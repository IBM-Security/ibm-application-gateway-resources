# coding: utf-8

"""
    IBM Application Gateway Configuration Specification (OpenAPI)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 19.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class PoliciesContentInjection(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'paths': 'list[str]',
        'location': 'str',
        'content': 'str'
    }

    attribute_map = {
        'name': 'name',
        'paths': 'paths',
        'location': 'location',
        'content': 'content'
    }

    def __init__(self, name=None, paths=None, location=None, content=None):  # noqa: E501
        """PoliciesContentInjection - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._paths = None
        self._location = None
        self._content = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if paths is not None:
            self.paths = paths
        if location is not None:
            self.location = location
        if content is not None:
            self.content = content

    @property
    def name(self):
        """Gets the name of this PoliciesContentInjection.  # noqa: E501

        A name to be associated with this content injection rule.   # noqa: E501

        :return: The name of this PoliciesContentInjection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PoliciesContentInjection.

        A name to be associated with this content injection rule.   # noqa: E501

        :param name: The name of this PoliciesContentInjection.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def paths(self):
        """Gets the paths of this PoliciesContentInjection.  # noqa: E501

        The path for which content injection will take place. This entry  is an array and can be used to specify multiple paths.   # noqa: E501

        :return: The paths of this PoliciesContentInjection.  # noqa: E501
        :rtype: list[str]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this PoliciesContentInjection.

        The path for which content injection will take place. This entry  is an array and can be used to specify multiple paths.   # noqa: E501

        :param paths: The paths of this PoliciesContentInjection.  # noqa: E501
        :type: list[str]
        """

        self._paths = paths

    @property
    def location(self):
        """Gets the location of this PoliciesContentInjection.  # noqa: E501

        The location where the content should be injected. The location is pattern matched against a line in the response using the '*.' wildcard characters.  The maximum length of a line which can be matched by this mechanism is 8192 bytes.   # noqa: E501

        :return: The location of this PoliciesContentInjection.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PoliciesContentInjection.

        The location where the content should be injected. The location is pattern matched against a line in the response using the '*.' wildcard characters.  The maximum length of a line which can be matched by this mechanism is 8192 bytes.   # noqa: E501

        :param location: The location of this PoliciesContentInjection.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def content(self):
        """Gets the content of this PoliciesContentInjection.  # noqa: E501

        The data which is to be injected.   # noqa: E501

        :return: The content of this PoliciesContentInjection.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this PoliciesContentInjection.

        The data which is to be injected.   # noqa: E501

        :param content: The content of this PoliciesContentInjection.  # noqa: E501
        :type: str
        """

        self._content = content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoliciesContentInjection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PoliciesContentInjection):
            return True

        return self.to_dict() != other.to_dict()
