# coding: utf-8

"""
    IBM Application Gateway Configuration Specification (OpenAPI)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 24.09
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class PoliciesWafRequestMatch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'method': 'str',
        'path': 'str',
        'version': 'str',
        'phases': 'PoliciesWafPhases'
    }

    attribute_map = {
        'method': 'method',
        'path': 'path',
        'version': 'version',
        'phases': 'phases'
    }

    def __init__(self, method=None, path=None, version='*', phases=None):  # noqa: E501
        """PoliciesWafRequestMatch - a model defined in OpenAPI"""  # noqa: E501

        self._method = None
        self._path = None
        self._version = None
        self._phases = None
        self.discriminator = None

        if method is not None:
            self.method = method
        if path is not None:
            self.path = path
        if version is not None:
            self.version = version
        if phases is not None:
            self.phases = phases

    @property
    def method(self):
        """Gets the method of this PoliciesWafRequestMatch.  # noqa: E501

        The HTTP method for which this match should be triggered. This value can include the wildcard `*` character to match multiple methods.   # noqa: E501

        :return: The method of this PoliciesWafRequestMatch.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this PoliciesWafRequestMatch.

        The HTTP method for which this match should be triggered. This value can include the wildcard `*` character to match multiple methods.   # noqa: E501

        :param method: The method of this PoliciesWafRequestMatch.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def path(self):
        """Gets the path of this PoliciesWafRequestMatch.  # noqa: E501

        The HTTP path for which this match should be triggered. This value can include the wildcard `*` character to match multiple paths.   # noqa: E501

        :return: The path of this PoliciesWafRequestMatch.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this PoliciesWafRequestMatch.

        The HTTP path for which this match should be triggered. This value can include the wildcard `*` character to match multiple paths.   # noqa: E501

        :param path: The path of this PoliciesWafRequestMatch.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def version(self):
        """Gets the version of this PoliciesWafRequestMatch.  # noqa: E501

        The HTTP version string for which this match should be  triggered. This value can include the wildcard `*` character to match multiple versions.   # noqa: E501

        :return: The version of this PoliciesWafRequestMatch.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PoliciesWafRequestMatch.

        The HTTP version string for which this match should be  triggered. This value can include the wildcard `*` character to match multiple versions.   # noqa: E501

        :param version: The version of this PoliciesWafRequestMatch.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def phases(self):
        """Gets the phases of this PoliciesWafRequestMatch.  # noqa: E501


        :return: The phases of this PoliciesWafRequestMatch.  # noqa: E501
        :rtype: PoliciesWafPhases
        """
        return self._phases

    @phases.setter
    def phases(self, phases):
        """Sets the phases of this PoliciesWafRequestMatch.


        :param phases: The phases of this PoliciesWafRequestMatch.  # noqa: E501
        :type: PoliciesWafPhases
        """

        self._phases = phases

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoliciesWafRequestMatch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PoliciesWafRequestMatch):
            return True

        return self.to_dict() != other.to_dict()
