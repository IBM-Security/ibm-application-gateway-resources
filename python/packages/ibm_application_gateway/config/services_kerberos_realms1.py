# coding: utf-8

"""
    IBM Application Gateway Configuration Specification (OpenAPI)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.09
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class ServicesKerberosRealms1(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'server_realm': 'str',
        'inter_realm': 'str'
    }

    attribute_map = {
        'server_realm': 'server_realm',
        'inter_realm': 'inter_realm'
    }

    def __init__(self, server_realm=None, inter_realm=None):  # noqa: E501
        """ServicesKerberosRealms1 - a model defined in OpenAPI"""  # noqa: E501

        self._server_realm = None
        self._inter_realm = None
        self.discriminator = None

        if server_realm is not None:
            self.server_realm = server_realm
        if inter_realm is not None:
            self.inter_realm = inter_realm

    @property
    def server_realm(self):
        """Gets the server_realm of this ServicesKerberosRealms1.  # noqa: E501

        The server realm for this capath.   # noqa: E501

        :return: The server_realm of this ServicesKerberosRealms1.  # noqa: E501
        :rtype: str
        """
        return self._server_realm

    @server_realm.setter
    def server_realm(self, server_realm):
        """Sets the server_realm of this ServicesKerberosRealms1.

        The server realm for this capath.   # noqa: E501

        :param server_realm: The server_realm of this ServicesKerberosRealms1.  # noqa: E501
        :type: str
        """

        self._server_realm = server_realm

    @property
    def inter_realm(self):
        """Gets the inter_realm of this ServicesKerberosRealms1.  # noqa: E501

        The inter realm for this capath.   # noqa: E501

        :return: The inter_realm of this ServicesKerberosRealms1.  # noqa: E501
        :rtype: str
        """
        return self._inter_realm

    @inter_realm.setter
    def inter_realm(self, inter_realm):
        """Sets the inter_realm of this ServicesKerberosRealms1.

        The inter realm for this capath.   # noqa: E501

        :param inter_realm: The inter_realm of this ServicesKerberosRealms1.  # noqa: E501
        :type: str
        """

        self._inter_realm = inter_realm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicesKerberosRealms1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServicesKerberosRealms1):
            return True

        return self.to_dict() != other.to_dict()
