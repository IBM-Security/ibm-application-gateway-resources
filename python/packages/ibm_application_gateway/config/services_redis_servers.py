# coding: utf-8

"""
    IBM Application Gateway Configuration Specification (OpenAPI)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 25.06
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class ServicesRedisServers(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'host': 'str',
        'port': 'float',
        'username': 'str',
        'password': 'str',
        'ssl': 'ServicesRedisSsl'
    }

    attribute_map = {
        'name': 'name',
        'host': 'host',
        'port': 'port',
        'username': 'username',
        'password': 'password',
        'ssl': 'ssl'
    }

    def __init__(self, name=None, host=None, port=6379, username=None, password=None, ssl=None):  # noqa: E501
        """ServicesRedisServers - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._host = None
        self._port = None
        self._username = None
        self._password = None
        self._ssl = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if host is not None:
            self.host = host
        if port is not None:
            self.port = port
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if ssl is not None:
            self.ssl = ssl

    @property
    def name(self):
        """Gets the name of this ServicesRedisServers.  # noqa: E501

        A label, or name, which is used to identify this server.   # noqa: E501

        :return: The name of this ServicesRedisServers.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServicesRedisServers.

        A label, or name, which is used to identify this server.   # noqa: E501

        :param name: The name of this ServicesRedisServers.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def host(self):
        """Gets the host of this ServicesRedisServers.  # noqa: E501

        The server name or IP address of the Redis server.   # noqa: E501

        :return: The host of this ServicesRedisServers.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ServicesRedisServers.

        The server name or IP address of the Redis server.   # noqa: E501

        :param host: The host of this ServicesRedisServers.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def port(self):
        """Gets the port of this ServicesRedisServers.  # noqa: E501

        The port on which the Redis server is listening for requests.   # noqa: E501

        :return: The port of this ServicesRedisServers.  # noqa: E501
        :rtype: float
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ServicesRedisServers.

        The port on which the Redis server is listening for requests.   # noqa: E501

        :param port: The port of this ServicesRedisServers.  # noqa: E501
        :type: float
        """
        if (port is not None and port < 1):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._port = port

    @property
    def username(self):
        """Gets the username of this ServicesRedisServers.  # noqa: E501

        The name of the user which is used when authenticating to the Redis server.   # noqa: E501

        :return: The username of this ServicesRedisServers.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ServicesRedisServers.

        The name of the user which is used when authenticating to the Redis server.   # noqa: E501

        :param username: The username of this ServicesRedisServers.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this ServicesRedisServers.  # noqa: E501

        The password which is used to access the Redis server.   # noqa: E501

        :return: The password of this ServicesRedisServers.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ServicesRedisServers.

        The password which is used to access the Redis server.   # noqa: E501

        :param password: The password of this ServicesRedisServers.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def ssl(self):
        """Gets the ssl of this ServicesRedisServers.  # noqa: E501


        :return: The ssl of this ServicesRedisServers.  # noqa: E501
        :rtype: ServicesRedisSsl
        """
        return self._ssl

    @ssl.setter
    def ssl(self, ssl):
        """Sets the ssl of this ServicesRedisServers.


        :param ssl: The ssl of this ServicesRedisServers.  # noqa: E501
        :type: ServicesRedisSsl
        """

        self._ssl = ssl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicesRedisServers):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServicesRedisServers):
            return True

        return self.to_dict() != other.to_dict()
