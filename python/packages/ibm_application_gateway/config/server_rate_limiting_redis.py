# coding: utf-8

"""
    IBM Application Gateway Configuration Specification (OpenAPI)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 24.09
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class ServerRateLimitingRedis(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'collection_name': 'str',
        'sync_window': 'float'
    }

    attribute_map = {
        'collection_name': 'collection_name',
        'sync_window': 'sync_window'
    }

    def __init__(self, collection_name=None, sync_window=5):  # noqa: E501
        """ServerRateLimitingRedis - a model defined in OpenAPI"""  # noqa: E501

        self._collection_name = None
        self._sync_window = None
        self.discriminator = None

        if collection_name is not None:
            self.collection_name = collection_name
        if sync_window is not None:
            self.sync_window = sync_window

    @property
    def collection_name(self):
        """Gets the collection_name of this ServerRateLimitingRedis.  # noqa: E501

        Specify the name of a Redis collection which will be used for  maintaining rate limiting data. Redis collections are defined using the services/redis[] entry.   # noqa: E501

        :return: The collection_name of this ServerRateLimitingRedis.  # noqa: E501
        :rtype: str
        """
        return self._collection_name

    @collection_name.setter
    def collection_name(self, collection_name):
        """Sets the collection_name of this ServerRateLimitingRedis.

        Specify the name of a Redis collection which will be used for  maintaining rate limiting data. Redis collections are defined using the services/redis[] entry.   # noqa: E501

        :param collection_name: The collection_name of this ServerRateLimitingRedis.  # noqa: E501
        :type: str
        """

        self._collection_name = collection_name

    @property
    def sync_window(self):
        """Gets the sync_window of this ServerRateLimitingRedis.  # noqa: E501

        The length of time (in seconds) a record from Redis will be  cached locally by this instance. Records will only be  synchronized with Redis after this window has elapsed.   # noqa: E501

        :return: The sync_window of this ServerRateLimitingRedis.  # noqa: E501
        :rtype: float
        """
        return self._sync_window

    @sync_window.setter
    def sync_window(self, sync_window):
        """Sets the sync_window of this ServerRateLimitingRedis.

        The length of time (in seconds) a record from Redis will be  cached locally by this instance. Records will only be  synchronized with Redis after this window has elapsed.   # noqa: E501

        :param sync_window: The sync_window of this ServerRateLimitingRedis.  # noqa: E501
        :type: float
        """
        if (sync_window is not None and sync_window < 0):  # noqa: E501
            raise ValueError("Invalid value for `sync_window`, must be a value greater than or equal to `0`")  # noqa: E501

        self._sync_window = sync_window

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerRateLimitingRedis):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServerRateLimitingRedis):
            return True

        return self.to_dict() != other.to_dict()
