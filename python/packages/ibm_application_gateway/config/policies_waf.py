# coding: utf-8

"""
    IBM Application Gateway Configuration Specification (OpenAPI)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 25.09
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class PoliciesWaf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'configuration': 'PoliciesWafConfiguration',
        'rules': 'PoliciesWafRules',
        'request_match': 'list[PoliciesWafRequestMatch]'
    }

    attribute_map = {
        'configuration': 'configuration',
        'rules': 'rules',
        'request_match': 'request_match'
    }

    def __init__(self, configuration=None, rules=None, request_match=None):  # noqa: E501
        """PoliciesWaf - a model defined in OpenAPI"""  # noqa: E501

        self._configuration = None
        self._rules = None
        self._request_match = None
        self.discriminator = None

        if configuration is not None:
            self.configuration = configuration
        if rules is not None:
            self.rules = rules
        if request_match is not None:
            self.request_match = request_match

    @property
    def configuration(self):
        """Gets the configuration of this PoliciesWaf.  # noqa: E501


        :return: The configuration of this PoliciesWaf.  # noqa: E501
        :rtype: PoliciesWafConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this PoliciesWaf.


        :param configuration: The configuration of this PoliciesWaf.  # noqa: E501
        :type: PoliciesWafConfiguration
        """

        self._configuration = configuration

    @property
    def rules(self):
        """Gets the rules of this PoliciesWaf.  # noqa: E501


        :return: The rules of this PoliciesWaf.  # noqa: E501
        :rtype: PoliciesWafRules
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this PoliciesWaf.


        :param rules: The rules of this PoliciesWaf.  # noqa: E501
        :type: PoliciesWafRules
        """

        self._rules = rules

    @property
    def request_match(self):
        """Gets the request_match of this PoliciesWaf.  # noqa: E501

        This entry defines a list of request matches for which the Web  Application Firewall will be run. Each defined request match must contain at least:   * method   * path   # noqa: E501

        :return: The request_match of this PoliciesWaf.  # noqa: E501
        :rtype: list[PoliciesWafRequestMatch]
        """
        return self._request_match

    @request_match.setter
    def request_match(self, request_match):
        """Sets the request_match of this PoliciesWaf.

        This entry defines a list of request matches for which the Web  Application Firewall will be run. Each defined request match must contain at least:   * method   * path   # noqa: E501

        :param request_match: The request_match of this PoliciesWaf.  # noqa: E501
        :type: list[PoliciesWafRequestMatch]
        """

        self._request_match = request_match

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoliciesWaf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PoliciesWaf):
            return True

        return self.to_dict() != other.to_dict()
