# coding: utf-8

"""
    IBM Application Gateway Configuration Specification (OpenAPI)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 24.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class PoliciesWafPhases(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'request_headers': 'bool',
        'request_body': 'bool',
        'response_headers': 'bool',
        'response_body': 'bool',
        'logging': 'bool'
    }

    attribute_map = {
        'request_headers': 'request_headers',
        'request_body': 'request_body',
        'response_headers': 'response_headers',
        'response_body': 'response_body',
        'logging': 'logging'
    }

    def __init__(self, request_headers=True, request_body=True, response_headers=True, response_body=True, logging=True):  # noqa: E501
        """PoliciesWafPhases - a model defined in OpenAPI"""  # noqa: E501

        self._request_headers = None
        self._request_body = None
        self._response_headers = None
        self._response_body = None
        self._logging = None
        self.discriminator = None

        if request_headers is not None:
            self.request_headers = request_headers
        if request_body is not None:
            self.request_body = request_body
        if response_headers is not None:
            self.response_headers = response_headers
        if response_body is not None:
            self.response_body = response_body
        if logging is not None:
            self.logging = logging

    @property
    def request_headers(self):
        """Gets the request_headers of this PoliciesWafPhases.  # noqa: E501

        Whether or not to run the WAF rules after the HTTP request  headers have been received.   # noqa: E501

        :return: The request_headers of this PoliciesWafPhases.  # noqa: E501
        :rtype: bool
        """
        return self._request_headers

    @request_headers.setter
    def request_headers(self, request_headers):
        """Sets the request_headers of this PoliciesWafPhases.

        Whether or not to run the WAF rules after the HTTP request  headers have been received.   # noqa: E501

        :param request_headers: The request_headers of this PoliciesWafPhases.  # noqa: E501
        :type: bool
        """

        self._request_headers = request_headers

    @property
    def request_body(self):
        """Gets the request_body of this PoliciesWafPhases.  # noqa: E501

        Whether or not to run the WAF rules after the HTTP request body has been received.   # noqa: E501

        :return: The request_body of this PoliciesWafPhases.  # noqa: E501
        :rtype: bool
        """
        return self._request_body

    @request_body.setter
    def request_body(self, request_body):
        """Sets the request_body of this PoliciesWafPhases.

        Whether or not to run the WAF rules after the HTTP request body has been received.   # noqa: E501

        :param request_body: The request_body of this PoliciesWafPhases.  # noqa: E501
        :type: bool
        """

        self._request_body = request_body

    @property
    def response_headers(self):
        """Gets the response_headers of this PoliciesWafPhases.  # noqa: E501

        Whether or not to run the WAF rules after the HTTP response headers have been received.   # noqa: E501

        :return: The response_headers of this PoliciesWafPhases.  # noqa: E501
        :rtype: bool
        """
        return self._response_headers

    @response_headers.setter
    def response_headers(self, response_headers):
        """Sets the response_headers of this PoliciesWafPhases.

        Whether or not to run the WAF rules after the HTTP response headers have been received.   # noqa: E501

        :param response_headers: The response_headers of this PoliciesWafPhases.  # noqa: E501
        :type: bool
        """

        self._response_headers = response_headers

    @property
    def response_body(self):
        """Gets the response_body of this PoliciesWafPhases.  # noqa: E501

        Whether or not to run the WAF rules after the HTTP response body has been received.   # noqa: E501

        :return: The response_body of this PoliciesWafPhases.  # noqa: E501
        :rtype: bool
        """
        return self._response_body

    @response_body.setter
    def response_body(self, response_body):
        """Sets the response_body of this PoliciesWafPhases.

        Whether or not to run the WAF rules after the HTTP response body has been received.   # noqa: E501

        :param response_body: The response_body of this PoliciesWafPhases.  # noqa: E501
        :type: bool
        """

        self._response_body = response_body

    @property
    def logging(self):
        """Gets the logging of this PoliciesWafPhases.  # noqa: E501

        Whether or not to run the WAF rules during the logging phase.   # noqa: E501

        :return: The logging of this PoliciesWafPhases.  # noqa: E501
        :rtype: bool
        """
        return self._logging

    @logging.setter
    def logging(self, logging):
        """Sets the logging of this PoliciesWafPhases.

        Whether or not to run the WAF rules during the logging phase.   # noqa: E501

        :param logging: The logging of this PoliciesWafPhases.  # noqa: E501
        :type: bool
        """

        self._logging = logging

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoliciesWafPhases):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PoliciesWafPhases):
            return True

        return self.to_dict() != other.to_dict()
