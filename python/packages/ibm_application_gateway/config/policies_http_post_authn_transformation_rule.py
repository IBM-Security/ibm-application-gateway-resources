# coding: utf-8

"""
    IBM Application Gateway Configuration Specification (OpenAPI)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 25.03
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class PoliciesHttpPostAuthnTransformationRule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'host': 'str',
        'authentication_mechanisms': 'list[str]',
        'rule': 'str'
    }

    attribute_map = {
        'name': 'name',
        'host': 'host',
        'authentication_mechanisms': 'authentication_mechanisms',
        'rule': 'rule'
    }

    def __init__(self, name=None, host=None, authentication_mechanisms=None, rule=None):  # noqa: E501
        """PoliciesHttpPostAuthnTransformationRule - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._host = None
        self._authentication_mechanisms = None
        self._rule = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if host is not None:
            self.host = host
        if authentication_mechanisms is not None:
            self.authentication_mechanisms = authentication_mechanisms
        if rule is not None:
            self.rule = rule

    @property
    def name(self):
        """Gets the name of this PoliciesHttpPostAuthnTransformationRule.  # noqa: E501

        The name which is associated with this transformation.   # noqa: E501

        :return: The name of this PoliciesHttpPostAuthnTransformationRule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PoliciesHttpPostAuthnTransformationRule.

        The name which is associated with this transformation.   # noqa: E501

        :param name: The name of this PoliciesHttpPostAuthnTransformationRule.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def host(self):
        """Gets the host of this PoliciesHttpPostAuthnTransformationRule.  # noqa: E501

        The host (obtained from the host header in the request) for which this transformation will take place. If no host header is specified all hosts will be matched.   # noqa: E501

        :return: The host of this PoliciesHttpPostAuthnTransformationRule.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this PoliciesHttpPostAuthnTransformationRule.

        The host (obtained from the host header in the request) for which this transformation will take place. If no host header is specified all hosts will be matched.   # noqa: E501

        :param host: The host of this PoliciesHttpPostAuthnTransformationRule.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def authentication_mechanisms(self):
        """Gets the authentication_mechanisms of this PoliciesHttpPostAuthnTransformationRule.  # noqa: E501

        The authentication mechanisms for which this transformation should be  triggered. The name of the authentication mechanism is located within the AZN_CRED_AUTH_METHOD attribute of an authenticated credential.   # noqa: E501

        :return: The authentication_mechanisms of this PoliciesHttpPostAuthnTransformationRule.  # noqa: E501
        :rtype: list[str]
        """
        return self._authentication_mechanisms

    @authentication_mechanisms.setter
    def authentication_mechanisms(self, authentication_mechanisms):
        """Sets the authentication_mechanisms of this PoliciesHttpPostAuthnTransformationRule.

        The authentication mechanisms for which this transformation should be  triggered. The name of the authentication mechanism is located within the AZN_CRED_AUTH_METHOD attribute of an authenticated credential.   # noqa: E501

        :param authentication_mechanisms: The authentication_mechanisms of this PoliciesHttpPostAuthnTransformationRule.  # noqa: E501
        :type: list[str]
        """

        self._authentication_mechanisms = authentication_mechanisms

    @property
    def rule(self):
        """Gets the rule of this PoliciesHttpPostAuthnTransformationRule.  # noqa: E501

        The HTTP transformation rule.   # noqa: E501

        :return: The rule of this PoliciesHttpPostAuthnTransformationRule.  # noqa: E501
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this PoliciesHttpPostAuthnTransformationRule.

        The HTTP transformation rule.   # noqa: E501

        :param rule: The rule of this PoliciesHttpPostAuthnTransformationRule.  # noqa: E501
        :type: str
        """

        self._rule = rule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoliciesHttpPostAuthnTransformationRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PoliciesHttpPostAuthnTransformationRule):
            return True

        return self.to_dict() != other.to_dict()
