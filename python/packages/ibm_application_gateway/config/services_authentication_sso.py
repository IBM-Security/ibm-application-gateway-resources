# coding: utf-8

"""
    IBM Application Gateway Configuration Specification (OpenAPI)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 24.06
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class ServicesAuthenticationSso(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'endpoint': 'str',
        'client_id': 'str',
        'client_secret': 'str',
        'payload': 'str'
    }

    attribute_map = {
        'endpoint': 'endpoint',
        'client_id': 'client_id',
        'client_secret': 'client_secret',
        'payload': 'payload'
    }

    def __init__(self, endpoint=None, client_id=None, client_secret=None, payload='basic'):  # noqa: E501
        """ServicesAuthenticationSso - a model defined in OpenAPI"""  # noqa: E501

        self._endpoint = None
        self._client_id = None
        self._client_secret = None
        self._payload = None
        self.discriminator = None

        if endpoint is not None:
            self.endpoint = endpoint
        if client_id is not None:
            self.client_id = client_id
        if client_secret is not None:
            self.client_secret = client_secret
        if payload is not None:
            self.payload = payload

    @property
    def endpoint(self):
        """Gets the endpoint of this ServicesAuthenticationSso.  # noqa: E501

        The endpoint which will be called to obtain an access token which is used in requests to the credential service. The endpoint should conform to the OAuth client credential flow (OAuth 2.0 RFC 6749, section 4.4).   # noqa: E501

        :return: The endpoint of this ServicesAuthenticationSso.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this ServicesAuthenticationSso.

        The endpoint which will be called to obtain an access token which is used in requests to the credential service. The endpoint should conform to the OAuth client credential flow (OAuth 2.0 RFC 6749, section 4.4).   # noqa: E501

        :param endpoint: The endpoint of this ServicesAuthenticationSso.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def client_id(self):
        """Gets the client_id of this ServicesAuthenticationSso.  # noqa: E501

        The client identifier to use during the OAuth client credential flow.   # noqa: E501

        :return: The client_id of this ServicesAuthenticationSso.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ServicesAuthenticationSso.

        The client identifier to use during the OAuth client credential flow.   # noqa: E501

        :param client_id: The client_id of this ServicesAuthenticationSso.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this ServicesAuthenticationSso.  # noqa: E501

        The client identifier to use during the OAuth client credential flow.   # noqa: E501

        :return: The client_secret of this ServicesAuthenticationSso.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this ServicesAuthenticationSso.

        The client identifier to use during the OAuth client credential flow.   # noqa: E501

        :param client_secret: The client_secret of this ServicesAuthenticationSso.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def payload(self):
        """Gets the payload of this ServicesAuthenticationSso.  # noqa: E501

        Specifies how the client id and secret will be posted to the authentication endpoint.   - If this value is `form`, the client id and secret will be included in forms POST data.   - If this value is `basic`, a basic authentication header will be constructed using the client id and secret.   # noqa: E501

        :return: The payload of this ServicesAuthenticationSso.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this ServicesAuthenticationSso.

        Specifies how the client id and secret will be posted to the authentication endpoint.   - If this value is `form`, the client id and secret will be included in forms POST data.   - If this value is `basic`, a basic authentication header will be constructed using the client id and secret.   # noqa: E501

        :param payload: The payload of this ServicesAuthenticationSso.  # noqa: E501
        :type: str
        """
        allowed_values = ["basic", "form"]  # noqa: E501
        if payload not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `payload` ({0}), must be one of {1}"  # noqa: E501
                .format(payload, allowed_values)
            )

        self._payload = payload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicesAuthenticationSso):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServicesAuthenticationSso):
            return True

        return self.to_dict() != other.to_dict()
