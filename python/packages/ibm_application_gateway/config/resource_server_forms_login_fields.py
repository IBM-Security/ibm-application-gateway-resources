# coding: utf-8

"""
    IBM Application Gateway Configuration Specification (OpenAPI)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.09
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class ResourceServerFormsLoginFields(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'source': 'str',
        'value': 'str'
    }

    attribute_map = {
        'name': 'name',
        'source': 'source',
        'value': 'value'
    }

    def __init__(self, name=None, source=None, value=None):  # noqa: E501
        """ResourceServerFormsLoginFields - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._source = None
        self._value = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if source is not None:
            self.source = source
        if value is not None:
            self.value = value

    @property
    def name(self):
        """Gets the name of this ResourceServerFormsLoginFields.  # noqa: E501

        The name of the form field that will be populated.   # noqa: E501

        :return: The name of this ResourceServerFormsLoginFields.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceServerFormsLoginFields.

        The name of the form field that will be populated.   # noqa: E501

        :param name: The name of this ResourceServerFormsLoginFields.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def source(self):
        """Gets the source of this ResourceServerFormsLoginFields.  # noqa: E501

        The data source which will be used to populate this form field. See the  [Login Form Field Types](#login-form-field-types) table  for an explanation of the values.   # noqa: E501

        :return: The source of this ResourceServerFormsLoginFields.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ResourceServerFormsLoginFields.

        The data source which will be used to populate this form field. See the  [Login Form Field Types](#login-form-field-types) table  for an explanation of the values.   # noqa: E501

        :param source: The source of this ResourceServerFormsLoginFields.  # noqa: E501
        :type: str
        """
        allowed_values = ["static", "attribute", "service"]  # noqa: E501
        if source not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def value(self):
        """Gets the value of this ResourceServerFormsLoginFields.  # noqa: E501

        This entry defines what information for the given source will be used to populate this form field. See the  [Login Form Field Values](#login-form-field-values) table for an explanation of the values.   # noqa: E501

        :return: The value of this ResourceServerFormsLoginFields.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ResourceServerFormsLoginFields.

        This entry defines what information for the given source will be used to populate this form field. See the  [Login Form Field Values](#login-form-field-values) table for an explanation of the values.   # noqa: E501

        :param value: The value of this ResourceServerFormsLoginFields.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceServerFormsLoginFields):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResourceServerFormsLoginFields):
            return True

        return self.to_dict() != other.to_dict()
