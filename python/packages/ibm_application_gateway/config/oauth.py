# coding: utf-8

"""
    IBM Application Gateway Configuration Specification (OpenAPI)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class Oauth(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'restricted': 'bool',
        'introspection_endpoint': 'str',
        'client_id': 'str',
        'client_secret': 'str',
        'client_id_hdr': 'str',
        'auth_method': 'str',
        'token_type_hint': 'str',
        'ssl': 'OauthSsl',
        'mapped_identity': 'str',
        'proxy': 'str',
        'attributes': 'list[str]',
        'multi_valued_scope': 'bool',
        'headers': 'list[OauthHeaders]'
    }

    attribute_map = {
        'name': 'name',
        'restricted': 'restricted',
        'introspection_endpoint': 'introspection_endpoint',
        'client_id': 'client_id',
        'client_secret': 'client_secret',
        'client_id_hdr': 'client_id_hdr',
        'auth_method': 'auth_method',
        'token_type_hint': 'token_type_hint',
        'ssl': 'ssl',
        'mapped_identity': 'mapped_identity',
        'proxy': 'proxy',
        'attributes': 'attributes',
        'multi_valued_scope': 'multi_valued_scope',
        'headers': 'headers'
    }

    def __init__(self, name=None, restricted=False, introspection_endpoint=None, client_id=None, client_secret=None, client_id_hdr=None, auth_method='client_secret_post', token_type_hint='access_token', ssl=None, mapped_identity='{sub}', proxy=None, attributes=None, multi_valued_scope=True, headers=None):  # noqa: E501
        """Oauth - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._restricted = None
        self._introspection_endpoint = None
        self._client_id = None
        self._client_secret = None
        self._client_id_hdr = None
        self._auth_method = None
        self._token_type_hint = None
        self._ssl = None
        self._mapped_identity = None
        self._proxy = None
        self._attributes = None
        self._multi_valued_scope = None
        self._headers = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if restricted is not None:
            self.restricted = restricted
        if introspection_endpoint is not None:
            self.introspection_endpoint = introspection_endpoint
        if client_id is not None:
            self.client_id = client_id
        if client_secret is not None:
            self.client_secret = client_secret
        if client_id_hdr is not None:
            self.client_id_hdr = client_id_hdr
        if auth_method is not None:
            self.auth_method = auth_method
        if token_type_hint is not None:
            self.token_type_hint = token_type_hint
        if ssl is not None:
            self.ssl = ssl
        if mapped_identity is not None:
            self.mapped_identity = mapped_identity
        if proxy is not None:
            self.proxy = proxy
        if attributes is not None:
            self.attributes = attributes
        if multi_valued_scope is not None:
            self.multi_valued_scope = multi_valued_scope
        if headers is not None:
            self.headers = headers

    @property
    def name(self):
        """Gets the name of this Oauth.  # noqa: E501

        The name which is used to identify and describe this endpoint.   # noqa: E501

        :return: The name of this Oauth.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Oauth.

        The name which is used to identify and describe this endpoint.   # noqa: E501

        :param name: The name of this Oauth.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def restricted(self):
        """Gets the restricted of this Oauth.  # noqa: E501

        A boolean flag which indicates whether this endpoint is restricted to certain resource servers or not.  If the endpoint is restricted only those resource servers which specifically mention this endpoint, using the identity/oauth element within the resource server definition, will be allowed to use this endpoint.   # noqa: E501

        :return: The restricted of this Oauth.  # noqa: E501
        :rtype: bool
        """
        return self._restricted

    @restricted.setter
    def restricted(self, restricted):
        """Sets the restricted of this Oauth.

        A boolean flag which indicates whether this endpoint is restricted to certain resource servers or not.  If the endpoint is restricted only those resource servers which specifically mention this endpoint, using the identity/oauth element within the resource server definition, will be allowed to use this endpoint.   # noqa: E501

        :param restricted: The restricted of this Oauth.  # noqa: E501
        :type: bool
        """

        self._restricted = restricted

    @property
    def introspection_endpoint(self):
        """Gets the introspection_endpoint of this Oauth.  # noqa: E501

        The fully qualified introspection endpoint for the OAuth provider.  For IBM Security Verify, this URL is usually in the format:<br/> `https://<verify-hostname>/v1.0/endpoint/default/introspect`  For IBM Security Verify Access, this URL is usually in the format:<br/> `https://<verify-access-hostname>/<junction>/sps/oauth/oauth20/introspect`   # noqa: E501

        :return: The introspection_endpoint of this Oauth.  # noqa: E501
        :rtype: str
        """
        return self._introspection_endpoint

    @introspection_endpoint.setter
    def introspection_endpoint(self, introspection_endpoint):
        """Sets the introspection_endpoint of this Oauth.

        The fully qualified introspection endpoint for the OAuth provider.  For IBM Security Verify, this URL is usually in the format:<br/> `https://<verify-hostname>/v1.0/endpoint/default/introspect`  For IBM Security Verify Access, this URL is usually in the format:<br/> `https://<verify-access-hostname>/<junction>/sps/oauth/oauth20/introspect`   # noqa: E501

        :param introspection_endpoint: The introspection_endpoint of this Oauth.  # noqa: E501
        :type: str
        """

        self._introspection_endpoint = introspection_endpoint

    @property
    def client_id(self):
        """Gets the client_id of this Oauth.  # noqa: E501

        The client identity which is used to authenticate to the introspection endpoint.   # noqa: E501

        :return: The client_id of this Oauth.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Oauth.

        The client identity which is used to authenticate to the introspection endpoint.   # noqa: E501

        :param client_id: The client_id of this Oauth.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this Oauth.  # noqa: E501

        The client secret which is used to authenticate to the introspection endpoint.  If a client_id field is not configured the secret will be treated as a bearer token, otherwise it will be used in a basic authentication header.   # noqa: E501

        :return: The client_secret of this Oauth.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this Oauth.

        The client secret which is used to authenticate to the introspection endpoint.  If a client_id field is not configured the secret will be treated as a bearer token, otherwise it will be used in a basic authentication header.   # noqa: E501

        :param client_secret: The client_secret of this Oauth.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def client_id_hdr(self):
        """Gets the client_id_hdr of this Oauth.  # noqa: E501

        The name of the HTTP header which contains the client identifier which is used to authenticate to the introspection endpoint.  This configuration entry is mutually exclusive with the client_id configuration entry.  If the client_id configuration entry is provided this configuration entry will be ignored.   # noqa: E501

        :return: The client_id_hdr of this Oauth.  # noqa: E501
        :rtype: str
        """
        return self._client_id_hdr

    @client_id_hdr.setter
    def client_id_hdr(self, client_id_hdr):
        """Sets the client_id_hdr of this Oauth.

        The name of the HTTP header which contains the client identifier which is used to authenticate to the introspection endpoint.  This configuration entry is mutually exclusive with the client_id configuration entry.  If the client_id configuration entry is provided this configuration entry will be ignored.   # noqa: E501

        :param client_id_hdr: The client_id_hdr of this Oauth.  # noqa: E501
        :type: str
        """

        self._client_id_hdr = client_id_hdr

    @property
    def auth_method(self):
        """Gets the auth_method of this Oauth.  # noqa: E501

        Introspection can be authenticated with BA or Forms. Specify the value `client_secret_post` to post the client credentials or `client_secret_basic` to provide the credentials via the Authorization header. If not provided will default to `client_secret_post`   # noqa: E501

        :return: The auth_method of this Oauth.  # noqa: E501
        :rtype: str
        """
        return self._auth_method

    @auth_method.setter
    def auth_method(self, auth_method):
        """Sets the auth_method of this Oauth.

        Introspection can be authenticated with BA or Forms. Specify the value `client_secret_post` to post the client credentials or `client_secret_basic` to provide the credentials via the Authorization header. If not provided will default to `client_secret_post`   # noqa: E501

        :param auth_method: The auth_method of this Oauth.  # noqa: E501
        :type: str
        """
        allowed_values = ["client_secret_post", "client_secret_basic"]  # noqa: E501
        if auth_method not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `auth_method` ({0}), must be one of {1}"  # noqa: E501
                .format(auth_method, allowed_values)
            )

        self._auth_method = auth_method

    @property
    def token_type_hint(self):
        """Gets the token_type_hint of this Oauth.  # noqa: E501

        A hint about the type of the token submitted for introspection.   # noqa: E501

        :return: The token_type_hint of this Oauth.  # noqa: E501
        :rtype: str
        """
        return self._token_type_hint

    @token_type_hint.setter
    def token_type_hint(self, token_type_hint):
        """Sets the token_type_hint of this Oauth.

        A hint about the type of the token submitted for introspection.   # noqa: E501

        :param token_type_hint: The token_type_hint of this Oauth.  # noqa: E501
        :type: str
        """

        self._token_type_hint = token_type_hint

    @property
    def ssl(self):
        """Gets the ssl of this Oauth.  # noqa: E501


        :return: The ssl of this Oauth.  # noqa: E501
        :rtype: OauthSsl
        """
        return self._ssl

    @ssl.setter
    def ssl(self, ssl):
        """Sets the ssl of this Oauth.


        :param ssl: The ssl of this Oauth.  # noqa: E501
        :type: OauthSsl
        """

        self._ssl = ssl

    @property
    def mapped_identity(self):
        """Gets the mapped_identity of this Oauth.  # noqa: E501

        A formatted string which is used to construct the credential principal name from elements of the introspection response token. Claims can be added to the identity string, surrounded by `{}`, for example:   {iss}/{sub} - would construct a principal name like the following:   https://server.example.com/248289761001   # noqa: E501

        :return: The mapped_identity of this Oauth.  # noqa: E501
        :rtype: str
        """
        return self._mapped_identity

    @mapped_identity.setter
    def mapped_identity(self, mapped_identity):
        """Sets the mapped_identity of this Oauth.

        A formatted string which is used to construct the credential principal name from elements of the introspection response token. Claims can be added to the identity string, surrounded by `{}`, for example:   {iss}/{sub} - would construct a principal name like the following:   https://server.example.com/248289761001   # noqa: E501

        :param mapped_identity: The mapped_identity of this Oauth.  # noqa: E501
        :type: str
        """

        self._mapped_identity = mapped_identity

    @property
    def proxy(self):
        """Gets the proxy of this Oauth.  # noqa: E501

        Specifies the proxy, if any, which is used to reach the OAuth provider. The proxy configuration entry should be in URL format. Eg: `http[s]://<address>:<port>`   # noqa: E501

        :return: The proxy of this Oauth.  # noqa: E501
        :rtype: str
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this Oauth.

        Specifies the proxy, if any, which is used to reach the OAuth provider. The proxy configuration entry should be in URL format. Eg: `http[s]://<address>:<port>`   # noqa: E501

        :param proxy: The proxy of this Oauth.  # noqa: E501
        :type: str
        """

        self._proxy = proxy

    @property
    def attributes(self):
        """Gets the attributes of this Oauth.  # noqa: E501

        A list of JSON data elements from the introspection response token which should be included in or excluded from the credential as an extended attribute. See the [Attributes Format](#attributes-format) table for a description of the expected format.   # noqa: E501

        :return: The attributes of this Oauth.  # noqa: E501
        :rtype: list[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Oauth.

        A list of JSON data elements from the introspection response token which should be included in or excluded from the credential as an extended attribute. See the [Attributes Format](#attributes-format) table for a description of the expected format.   # noqa: E501

        :param attributes: The attributes of this Oauth.  # noqa: E501
        :type: list[str]
        """

        self._attributes = attributes

    @property
    def multi_valued_scope(self):
        """Gets the multi_valued_scope of this Oauth.  # noqa: E501

        By default the OAuth scope attribute is provided as a single space separated string.  By enabling this configuration option the scope attribute will instead be converted to a multi-value attribute.   # noqa: E501

        :return: The multi_valued_scope of this Oauth.  # noqa: E501
        :rtype: bool
        """
        return self._multi_valued_scope

    @multi_valued_scope.setter
    def multi_valued_scope(self, multi_valued_scope):
        """Sets the multi_valued_scope of this Oauth.

        By default the OAuth scope attribute is provided as a single space separated string.  By enabling this configuration option the scope attribute will instead be converted to a multi-value attribute.   # noqa: E501

        :param multi_valued_scope: The multi_valued_scope of this Oauth.  # noqa: E501
        :type: bool
        """

        self._multi_valued_scope = multi_valued_scope

    @property
    def headers(self):
        """Gets the headers of this Oauth.  # noqa: E501

        Additional HTTP headers which can be included in the introspection  request.   # noqa: E501

        :return: The headers of this Oauth.  # noqa: E501
        :rtype: list[OauthHeaders]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this Oauth.

        Additional HTTP headers which can be included in the introspection  request.   # noqa: E501

        :param headers: The headers of this Oauth.  # noqa: E501
        :type: list[OauthHeaders]
        """

        self._headers = headers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Oauth):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Oauth):
            return True

        return self.to_dict() != other.to_dict()
