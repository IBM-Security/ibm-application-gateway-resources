# coding: utf-8

"""
    IBM Application Gateway Configuration Specification (OpenAPI)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 25.03
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class ServicesRedis(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'key_prefix': 'str',
        'default_collection': 'str',
        'collections': 'list[ServicesRedisCollections]'
    }

    attribute_map = {
        'key_prefix': 'key_prefix',
        'default_collection': 'default_collection',
        'collections': 'collections'
    }

    def __init__(self, key_prefix=None, default_collection=None, collections=None):  # noqa: E501
        """ServicesRedis - a model defined in OpenAPI"""  # noqa: E501

        self._key_prefix = None
        self._default_collection = None
        self._collections = None
        self.discriminator = None

        if key_prefix is not None:
            self.key_prefix = key_prefix
        if default_collection is not None:
            self.default_collection = default_collection
        if collections is not None:
            self.collections = collections

    @property
    def key_prefix(self):
        """Gets the key_prefix of this ServicesRedis.  # noqa: E501

        The key prefix for all data which is stored on the Redis server.   # noqa: E501

        :return: The key_prefix of this ServicesRedis.  # noqa: E501
        :rtype: str
        """
        return self._key_prefix

    @key_prefix.setter
    def key_prefix(self, key_prefix):
        """Sets the key_prefix of this ServicesRedis.

        The key prefix for all data which is stored on the Redis server.   # noqa: E501

        :param key_prefix: The key_prefix of this ServicesRedis.  # noqa: E501
        :type: str
        """

        self._key_prefix = key_prefix

    @property
    def default_collection(self):
        """Gets the default_collection of this ServicesRedis.  # noqa: E501

        The name of the default collection of Redis servers to be used.   # noqa: E501

        :return: The default_collection of this ServicesRedis.  # noqa: E501
        :rtype: str
        """
        return self._default_collection

    @default_collection.setter
    def default_collection(self, default_collection):
        """Sets the default_collection of this ServicesRedis.

        The name of the default collection of Redis servers to be used.   # noqa: E501

        :param default_collection: The default_collection of this ServicesRedis.  # noqa: E501
        :type: str
        """

        self._default_collection = default_collection

    @property
    def collections(self):
        """Gets the collections of this ServicesRedis.  # noqa: E501

        Used to define the configuration for a collection of replicated Redis servers.   # noqa: E501

        :return: The collections of this ServicesRedis.  # noqa: E501
        :rtype: list[ServicesRedisCollections]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this ServicesRedis.

        Used to define the configuration for a collection of replicated Redis servers.   # noqa: E501

        :param collections: The collections of this ServicesRedis.  # noqa: E501
        :type: list[ServicesRedisCollections]
        """

        self._collections = collections

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicesRedis):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServicesRedis):
            return True

        return self.to_dict() != other.to_dict()
