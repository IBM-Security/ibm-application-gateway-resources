# coding: utf-8

"""
    IBM Application Gateway Configuration Specification (OpenAPI)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 23.10
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class ServerResponseHeaders(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'header': 'str',
        'macro': 'str',
        'attribute': 'str',
        'text': 'str'
    }

    attribute_map = {
        'header': 'header',
        'macro': 'macro',
        'attribute': 'attribute',
        'text': 'text'
    }

    def __init__(self, header=None, macro=None, attribute=None, text=None):  # noqa: E501
        """ServerResponseHeaders - a model defined in OpenAPI"""  # noqa: E501

        self._header = None
        self._macro = None
        self._attribute = None
        self._text = None
        self.discriminator = None

        if header is not None:
            self.header = header
        if macro is not None:
            self.macro = macro
        if attribute is not None:
            self.attribute = attribute
        if text is not None:
            self.text = text

    @property
    def header(self):
        """Gets the header of this ServerResponseHeaders.  # noqa: E501

        The name of the HTTP header to be included in the response.   # noqa: E501

        :return: The header of this ServerResponseHeaders.  # noqa: E501
        :rtype: str
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this ServerResponseHeaders.

        The name of the HTTP header to be included in the response.   # noqa: E501

        :param header: The header of this ServerResponseHeaders.  # noqa: E501
        :type: str
        """

        self._header = header

    @property
    def macro(self):
        """Gets the macro of this ServerResponseHeaders.  # noqa: E501

        The name of the macro which the value will be taken from. Valid macro values are:    - `TAM_OP`   - `ERROR_CODE`   - `ERROR_TEXT`   - `ERROR_URL`   - `USERNAME`   # noqa: E501

        :return: The macro of this ServerResponseHeaders.  # noqa: E501
        :rtype: str
        """
        return self._macro

    @macro.setter
    def macro(self, macro):
        """Sets the macro of this ServerResponseHeaders.

        The name of the macro which the value will be taken from. Valid macro values are:    - `TAM_OP`   - `ERROR_CODE`   - `ERROR_TEXT`   - `ERROR_URL`   - `USERNAME`   # noqa: E501

        :param macro: The macro of this ServerResponseHeaders.  # noqa: E501
        :type: str
        """

        self._macro = macro

    @property
    def attribute(self):
        """Gets the attribute of this ServerResponseHeaders.  # noqa: E501

        The name of a credential attribute which the value will be taken from.   # noqa: E501

        :return: The attribute of this ServerResponseHeaders.  # noqa: E501
        :rtype: str
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this ServerResponseHeaders.

        The name of a credential attribute which the value will be taken from.   # noqa: E501

        :param attribute: The attribute of this ServerResponseHeaders.  # noqa: E501
        :type: str
        """

        self._attribute = attribute

    @property
    def text(self):
        """Gets the text of this ServerResponseHeaders.  # noqa: E501

        String content which will be inserted into the header verbatim.   # noqa: E501

        :return: The text of this ServerResponseHeaders.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ServerResponseHeaders.

        String content which will be inserted into the header verbatim.   # noqa: E501

        :param text: The text of this ServerResponseHeaders.  # noqa: E501
        :type: str
        """

        self._text = text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerResponseHeaders):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServerResponseHeaders):
            return True

        return self.to_dict() != other.to_dict()
