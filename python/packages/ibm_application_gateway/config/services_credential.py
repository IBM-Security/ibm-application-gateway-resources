# coding: utf-8

"""
    IBM Application Gateway Configuration Specification (OpenAPI)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 22.07
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class ServicesCredential(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'host': 'str',
        'port': 'str',
        'proxy': 'str',
        'url_pattern': 'str',
        'user_attribute': 'str',
        'user_attribute_encoding': 'str',
        'enc_key': 'str',
        'ssl': 'ServicesSsl',
        'authentication': 'ServicesAuthentication'
    }

    attribute_map = {
        'name': 'name',
        'host': 'host',
        'port': 'port',
        'proxy': 'proxy',
        'url_pattern': 'url_pattern',
        'user_attribute': 'user_attribute',
        'user_attribute_encoding': 'user_attribute_encoding',
        'enc_key': 'enc_key',
        'ssl': 'ssl',
        'authentication': 'authentication'
    }

    def __init__(self, name=None, host=None, port=None, proxy=None, url_pattern=None, user_attribute='AZN_PRINCIPAL_ID', user_attribute_encoding='url', enc_key=None, ssl=None, authentication=None):  # noqa: E501
        """ServicesCredential - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._host = None
        self._port = None
        self._proxy = None
        self._url_pattern = None
        self._user_attribute = None
        self._user_attribute_encoding = None
        self._enc_key = None
        self._ssl = None
        self._authentication = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if host is not None:
            self.host = host
        if port is not None:
            self.port = port
        if proxy is not None:
            self.proxy = proxy
        if url_pattern is not None:
            self.url_pattern = url_pattern
        if user_attribute is not None:
            self.user_attribute = user_attribute
        if user_attribute_encoding is not None:
            self.user_attribute_encoding = user_attribute_encoding
        if enc_key is not None:
            self.enc_key = enc_key
        if ssl is not None:
            self.ssl = ssl
        if authentication is not None:
            self.authentication = authentication

    @property
    def name(self):
        """Gets the name of this ServicesCredential.  # noqa: E501

        The name which is associated with this credential service.   # noqa: E501

        :return: The name of this ServicesCredential.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServicesCredential.

        The name which is associated with this credential service.   # noqa: E501

        :param name: The name of this ServicesCredential.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def host(self):
        """Gets the host of this ServicesCredential.  # noqa: E501

        The hostname of the endpoint where the credentials will be retrieved from.   # noqa: E501

        :return: The host of this ServicesCredential.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ServicesCredential.

        The hostname of the endpoint where the credentials will be retrieved from.   # noqa: E501

        :param host: The host of this ServicesCredential.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def port(self):
        """Gets the port of this ServicesCredential.  # noqa: E501

        The port of the endpoint where the credentials will be retrieved from.   # noqa: E501

        :return: The port of this ServicesCredential.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ServicesCredential.

        The port of the endpoint where the credentials will be retrieved from.   # noqa: E501

        :param port: The port of this ServicesCredential.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def proxy(self):
        """Gets the proxy of this ServicesCredential.  # noqa: E501

        The proxy server which will be used when connecting to the credential service. The configuration entry should be of the form: `<server>:<port>`   # noqa: E501

        :return: The proxy of this ServicesCredential.  # noqa: E501
        :rtype: str
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this ServicesCredential.

        The proxy server which will be used when connecting to the credential service. The configuration entry should be of the form: `<server>:<port>`   # noqa: E501

        :param proxy: The proxy of this ServicesCredential.  # noqa: E501
        :type: str
        """

        self._proxy = proxy

    @property
    def url_pattern(self):
        """Gets the url_pattern of this ServicesCredential.  # noqa: E501

        The path of the endpoint where the credentials will be retrieved from. This must contain the {user} and {resource} macros. When communicating with the credential service, IAG will substitute `{resource}` for the resource name provided in the configuration which refers to this credential service.   # noqa: E501

        :return: The url_pattern of this ServicesCredential.  # noqa: E501
        :rtype: str
        """
        return self._url_pattern

    @url_pattern.setter
    def url_pattern(self, url_pattern):
        """Sets the url_pattern of this ServicesCredential.

        The path of the endpoint where the credentials will be retrieved from. This must contain the {user} and {resource} macros. When communicating with the credential service, IAG will substitute `{resource}` for the resource name provided in the configuration which refers to this credential service.   # noqa: E501

        :param url_pattern: The url_pattern of this ServicesCredential.  # noqa: E501
        :type: str
        """

        self._url_pattern = url_pattern

    @property
    def user_attribute(self):
        """Gets the user_attribute of this ServicesCredential.  # noqa: E501

        The name of the credential attribute which is used to populate the {user} macro in the URL used when communicating with the credential service.   # noqa: E501

        :return: The user_attribute of this ServicesCredential.  # noqa: E501
        :rtype: str
        """
        return self._user_attribute

    @user_attribute.setter
    def user_attribute(self, user_attribute):
        """Sets the user_attribute of this ServicesCredential.

        The name of the credential attribute which is used to populate the {user} macro in the URL used when communicating with the credential service.   # noqa: E501

        :param user_attribute: The user_attribute of this ServicesCredential.  # noqa: E501
        :type: str
        """

        self._user_attribute = user_attribute

    @property
    def user_attribute_encoding(self):
        """Gets the user_attribute_encoding of this ServicesCredential.  # noqa: E501

        The type of encoding to perform on the user_attribute for inclusion in the URL to communicate with the credential service.   - If this value is `url`, the user attribute value will be URL Encoded.   - If this value is `base64url`, the user attribute value will be converted to lower case and Base64 Encoded for URL.   # noqa: E501

        :return: The user_attribute_encoding of this ServicesCredential.  # noqa: E501
        :rtype: str
        """
        return self._user_attribute_encoding

    @user_attribute_encoding.setter
    def user_attribute_encoding(self, user_attribute_encoding):
        """Sets the user_attribute_encoding of this ServicesCredential.

        The type of encoding to perform on the user_attribute for inclusion in the URL to communicate with the credential service.   - If this value is `url`, the user attribute value will be URL Encoded.   - If this value is `base64url`, the user attribute value will be converted to lower case and Base64 Encoded for URL.   # noqa: E501

        :param user_attribute_encoding: The user_attribute_encoding of this ServicesCredential.  # noqa: E501
        :type: str
        """
        allowed_values = ["url", "base64url"]  # noqa: E501
        if user_attribute_encoding not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `user_attribute_encoding` ({0}), must be one of {1}"  # noqa: E501
                .format(user_attribute_encoding, allowed_values)
            )

        self._user_attribute_encoding = user_attribute_encoding

    @property
    def enc_key(self):
        """Gets the enc_key of this ServicesCredential.  # noqa: E501

        The key which will be used to encrypt and decrypt credential data. This key should be an RSA or ECDSA key for which the private and public parts are available.   # noqa: E501

        :return: The enc_key of this ServicesCredential.  # noqa: E501
        :rtype: str
        """
        return self._enc_key

    @enc_key.setter
    def enc_key(self, enc_key):
        """Sets the enc_key of this ServicesCredential.

        The key which will be used to encrypt and decrypt credential data. This key should be an RSA or ECDSA key for which the private and public parts are available.   # noqa: E501

        :param enc_key: The enc_key of this ServicesCredential.  # noqa: E501
        :type: str
        """

        self._enc_key = enc_key

    @property
    def ssl(self):
        """Gets the ssl of this ServicesCredential.  # noqa: E501


        :return: The ssl of this ServicesCredential.  # noqa: E501
        :rtype: ServicesSsl
        """
        return self._ssl

    @ssl.setter
    def ssl(self, ssl):
        """Sets the ssl of this ServicesCredential.


        :param ssl: The ssl of this ServicesCredential.  # noqa: E501
        :type: ServicesSsl
        """

        self._ssl = ssl

    @property
    def authentication(self):
        """Gets the authentication of this ServicesCredential.  # noqa: E501


        :return: The authentication of this ServicesCredential.  # noqa: E501
        :rtype: ServicesAuthentication
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this ServicesCredential.


        :param authentication: The authentication of this ServicesCredential.  # noqa: E501
        :type: ServicesAuthentication
        """

        self._authentication = authentication

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicesCredential):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServicesCredential):
            return True

        return self.to_dict() != other.to_dict()
