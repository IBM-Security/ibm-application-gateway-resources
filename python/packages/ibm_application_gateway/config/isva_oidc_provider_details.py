# coding: utf-8

"""
    IBM Application Gateway Configuration Specification (OpenAPI)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 20.04
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class IsvaOidcProviderDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'junction': 'str',
        'definition_name': 'str'
    }

    attribute_map = {
        'junction': 'junction',
        'definition_name': 'definition_name'
    }

    def __init__(self, junction=None, definition_name=None):  # noqa: E501
        """IsvaOidcProviderDetails - a model defined in OpenAPI"""  # noqa: E501

        self._junction = None
        self._definition_name = None
        self.discriminator = None

        if junction is not None:
            self.junction = junction
        if definition_name is not None:
            self.definition_name = definition_name

    @property
    def junction(self):
        """Gets the junction of this IsvaOidcProviderDetails.  # noqa: E501

        The IBM Security Access Manager junction where the connection to the runtime which hosts the OIDC provider APIs can be established.   # noqa: E501

        :return: The junction of this IsvaOidcProviderDetails.  # noqa: E501
        :rtype: str
        """
        return self._junction

    @junction.setter
    def junction(self, junction):
        """Sets the junction of this IsvaOidcProviderDetails.

        The IBM Security Access Manager junction where the connection to the runtime which hosts the OIDC provider APIs can be established.   # noqa: E501

        :param junction: The junction of this IsvaOidcProviderDetails.  # noqa: E501
        :type: str
        """

        self._junction = junction

    @property
    def definition_name(self):
        """Gets the definition_name of this IsvaOidcProviderDetails.  # noqa: E501

        The name of the OIDC definition from the IBM Security Access Manager instance.   # noqa: E501

        :return: The definition_name of this IsvaOidcProviderDetails.  # noqa: E501
        :rtype: str
        """
        return self._definition_name

    @definition_name.setter
    def definition_name(self, definition_name):
        """Sets the definition_name of this IsvaOidcProviderDetails.

        The name of the OIDC definition from the IBM Security Access Manager instance.   # noqa: E501

        :param definition_name: The definition_name of this IsvaOidcProviderDetails.  # noqa: E501
        :type: str
        """

        self._definition_name = definition_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IsvaOidcProviderDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IsvaOidcProviderDetails):
            return True

        return self.to_dict() != other.to_dict()
