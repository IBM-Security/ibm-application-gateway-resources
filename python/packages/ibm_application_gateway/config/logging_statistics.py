# coding: utf-8

"""
    IBM Application Gateway Configuration Specification (OpenAPI)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.06
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class LoggingStatistics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'server': 'str',
        'port': 'float',
        'frequency': 'float',
        'components': 'list[str]'
    }

    attribute_map = {
        'server': 'server',
        'port': 'port',
        'frequency': 'frequency',
        'components': 'components'
    }

    def __init__(self, server=None, port=8125, frequency=1, components=None):  # noqa: E501
        """LoggingStatistics - a model defined in OpenAPI"""  # noqa: E501

        self._server = None
        self._port = None
        self._frequency = None
        self._components = None
        self.discriminator = None

        if server is not None:
            self.server = server
        if port is not None:
            self.port = port
        if frequency is not None:
            self.frequency = frequency
        if components is not None:
            self.components = components

    @property
    def server(self):
        """Gets the server of this LoggingStatistics.  # noqa: E501

        The server on which the statsd server is listening for requests.   # noqa: E501

        :return: The server of this LoggingStatistics.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this LoggingStatistics.

        The server on which the statsd server is listening for requests.   # noqa: E501

        :param server: The server of this LoggingStatistics.  # noqa: E501
        :type: str
        """

        self._server = server

    @property
    def port(self):
        """Gets the port of this LoggingStatistics.  # noqa: E501

        The port on which the statsd server is listening for requests.   # noqa: E501

        :return: The port of this LoggingStatistics.  # noqa: E501
        :rtype: float
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this LoggingStatistics.

        The port on which the statsd server is listening for requests.   # noqa: E501

        :param port: The port of this LoggingStatistics.  # noqa: E501
        :type: float
        """
        if (port is not None and port > 65535):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if (port is not None and port < 0):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._port = port

    @property
    def frequency(self):
        """Gets the frequency of this LoggingStatistics.  # noqa: E501

        The frequency (in seconds) that statistics are sent from the memory buffer to the statsd server.   # noqa: E501

        :return: The frequency of this LoggingStatistics.  # noqa: E501
        :rtype: float
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this LoggingStatistics.

        The frequency (in seconds) that statistics are sent from the memory buffer to the statsd server.   # noqa: E501

        :param frequency: The frequency of this LoggingStatistics.  # noqa: E501
        :type: float
        """
        if (frequency is not None and frequency < 1):  # noqa: E501
            raise ValueError("Invalid value for `frequency`, must be a value greater than or equal to `1`")  # noqa: E501

        self._frequency = frequency

    @property
    def components(self):
        """Gets the components of this LoggingStatistics.  # noqa: E501

        Specifies an array of statistic components to be enabled.  Refer to the troubleshooting documentation for a full description of the available component names.   # noqa: E501

        :return: The components of this LoggingStatistics.  # noqa: E501
        :rtype: list[str]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this LoggingStatistics.

        Specifies an array of statistic components to be enabled.  Refer to the troubleshooting documentation for a full description of the available component names.   # noqa: E501

        :param components: The components of this LoggingStatistics.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["iag.authn", "iag.http2", "iag.https", "iag.redis", "iag.resource_server", "iag.sescache", "iag.threads", "iag.websocket"]  # noqa: E501
        if (not set(components).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `components` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(components) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._components = components

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoggingStatistics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LoggingStatistics):
            return True

        return self.to_dict() != other.to_dict()
