# coding: utf-8

"""
    IBM Application Gateway Configuration Specification (OpenAPI)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 19.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class LoggingStatistics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_name': 'str',
        'component': 'str',
        'count': 'float',
        'interval': 'float'
    }

    attribute_map = {
        'file_name': 'file_name',
        'component': 'component',
        'count': 'count',
        'interval': 'interval'
    }

    def __init__(self, file_name=None, component=None, count=None, interval=None):  # noqa: E501
        """LoggingStatistics - a model defined in OpenAPI"""  # noqa: E501

        self._file_name = None
        self._component = None
        self._count = None
        self._interval = None
        self.discriminator = None

        if file_name is not None:
            self.file_name = file_name
        if component is not None:
            self.component = component
        if count is not None:
            self.count = count
        if interval is not None:
            self.interval = interval

    @property
    def file_name(self):
        """Gets the file_name of this LoggingStatistics.  # noqa: E501

        The full path name of the generated log file.   # noqa: E501

        :return: The file_name of this LoggingStatistics.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this LoggingStatistics.

        The full path name of the generated log file.   # noqa: E501

        :param file_name: The file_name of this LoggingStatistics.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def component(self):
        """Gets the component of this LoggingStatistics.  # noqa: E501

        The name of the statistical component to be enabled. Refer to the troubleshooting documentation for the full list of component names.   # noqa: E501

        :return: The component of this LoggingStatistics.  # noqa: E501
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this LoggingStatistics.

        The name of the statistical component to be enabled. Refer to the troubleshooting documentation for the full list of component names.   # noqa: E501

        :param component: The component of this LoggingStatistics.  # noqa: E501
        :type: str
        """

        self._component = component

    @property
    def count(self):
        """Gets the count of this LoggingStatistics.  # noqa: E501

        The number of reports sent to the log file. After the count value is reached, reporting to a log file stops. However, the statistic component is still enabled. If the interval value is not set or is set to 0 the count will have no effect. If the interval value is set and count is not set, statistics information will be sent to the log file at the interval indefinitely.   # noqa: E501

        :return: The count of this LoggingStatistics.  # noqa: E501
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this LoggingStatistics.

        The number of reports sent to the log file. After the count value is reached, reporting to a log file stops. However, the statistic component is still enabled. If the interval value is not set or is set to 0 the count will have no effect. If the interval value is set and count is not set, statistics information will be sent to the log file at the interval indefinitely.   # noqa: E501

        :param count: The count of this LoggingStatistics.  # noqa: E501
        :type: float
        """
        if (count is not None and count < 1):  # noqa: E501
            raise ValueError("Invalid value for `count`, must be a value greater than or equal to `1`")  # noqa: E501

        self._count = count

    @property
    def interval(self):
        """Gets the interval of this LoggingStatistics.  # noqa: E501

        The time interval (in seconds) when statistics are sent from the memory buffer to the log file. If the interval is not set or is set to 0, no statistics are sent to the log file. However, the statistic component is still enabled. If interval is set and count value is not set, statistics information will be sent to the log file at the interval indefinitely.   # noqa: E501

        :return: The interval of this LoggingStatistics.  # noqa: E501
        :rtype: float
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this LoggingStatistics.

        The time interval (in seconds) when statistics are sent from the memory buffer to the log file. If the interval is not set or is set to 0, no statistics are sent to the log file. However, the statistic component is still enabled. If interval is set and count value is not set, statistics information will be sent to the log file at the interval indefinitely.   # noqa: E501

        :param interval: The interval of this LoggingStatistics.  # noqa: E501
        :type: float
        """
        if (interval is not None and interval < 0):  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value greater than or equal to `0`")  # noqa: E501

        self._interval = interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoggingStatistics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LoggingStatistics):
            return True

        return self.to_dict() != other.to_dict()
