# coding: utf-8

"""
    IBM Application Gateway Configuration Specification (OpenAPI)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class PoliciesObligation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'oidc': 'PoliciesObligationOidc',
        'redirect_url': 'str'
    }

    attribute_map = {
        'oidc': 'oidc',
        'redirect_url': 'redirect_url'
    }

    def __init__(self, oidc=None, redirect_url=None):  # noqa: E501
        """PoliciesObligation - a model defined in OpenAPI"""  # noqa: E501

        self._oidc = None
        self._redirect_url = None
        self.discriminator = None

        if oidc is not None:
            self.oidc = oidc
        if redirect_url is not None:
            self.redirect_url = redirect_url

    @property
    def oidc(self):
        """Gets the oidc of this PoliciesObligation.  # noqa: E501


        :return: The oidc of this PoliciesObligation.  # noqa: E501
        :rtype: PoliciesObligationOidc
        """
        return self._oidc

    @oidc.setter
    def oidc(self, oidc):
        """Sets the oidc of this PoliciesObligation.


        :param oidc: The oidc of this PoliciesObligation.  # noqa: E501
        :type: PoliciesObligationOidc
        """

        self._oidc = oidc

    @property
    def redirect_url(self):
        """Gets the redirect_url of this PoliciesObligation.  # noqa: E501

        Allows clients to be redirected to a URL as a result of this policy evaluating successfully. This URL can contain embedded macros to include contextual information about the request and client which was obligated to be redirected to this URL. See the  [Redirect URL Macros](#redirect-url-macros) table above for  the available macros.   # noqa: E501

        :return: The redirect_url of this PoliciesObligation.  # noqa: E501
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this PoliciesObligation.

        Allows clients to be redirected to a URL as a result of this policy evaluating successfully. This URL can contain embedded macros to include contextual information about the request and client which was obligated to be redirected to this URL. See the  [Redirect URL Macros](#redirect-url-macros) table above for  the available macros.   # noqa: E501

        :param redirect_url: The redirect_url of this PoliciesObligation.  # noqa: E501
        :type: str
        """

        self._redirect_url = redirect_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoliciesObligation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PoliciesObligation):
            return True

        return self.to_dict() != other.to_dict()
