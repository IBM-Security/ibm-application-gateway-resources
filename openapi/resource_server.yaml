# (c) Copyright International Business Machines Corp. 2020, 2021
# The source code for this program is not published or otherwise divested
# of its trade secrets, irrespective of what has been deposited with the
# U.S. Copyright Office.

resource_server:
  description: >
    The definition for a single resource server which provides content for
    the gateway.
  type: object
  properties:

    path:
      description: >
        The path at which the resource server will be made available.
        This entry is required if the virtual\_host entry has not been
        specified. It is not valid to have both path and virtual\_host
        entries specified.
        Example: resource_servers:
                     - path: /static
                       ...
      type: string
      x-uuid: true
      x-requiredOneOf: true

    virtual_host:
      description: >
        The virtual host, as defined by the host header in the request, at
        which the resource server will be made available. Port information may
        also be specified if the virtual host is on a non-default port for the
        intended protocol. This entry is required if the path entry has not
        been specified. It is not valid to have both path and virtual\_host
        entries specified.
        Example: resource_servers:
                     - virtual_host: "application.ibm.com:9443" 
                       ...
      type: string
      x-uuid: true
      x-requiredOneOf: true

    connection_type:
      description: >
        The connection type the reverse proxy will make for this resource
        server.
        Example: resource_servers:
                     - path: "/example" 
                       ...
                       connection_type: ssl
      type: string
      default: tcp
      enum:
        - tcp
        - ssl
        - tcp_proxy
        - ssl_proxy

    transparent_path:
      description: >
        A boolean flag indicating whether or not this resource server uses
        a transparent path. For path type resource servers, setting this entry
        to true will result in the passing of the entire URL as
        observed by the reverse proxy to the resource server, including the
        value given in "path". If set to false the reverse proxy will filter
        the path from the URL and pass only the remainder of the URL to the
        resource server.
        Example: resource_servers:
                     - path: "/example" 
                       ...
                       transparent_path: true
      type: boolean
      default: false

    stateful:
      description: >
        A boolean flag indicating whether or not user requests, for the
        lifetime of a session, are always processed by the same resource
        server. 
        Example: resource_servers:
                     - path: "/example" 
                       ...
                       stateful: true
      type: boolean
      default: false

    http2:
      description: >
        Specifies the information associated with the HTTP2 configuration
        of the resource server.
        Example: resource_servers:
                     - path: "/example"
                       ...
                       http2:
                           enabled: true
                           sni: www.test.com
      type: object
      x-name: HTTP/2
      properties:

        enabled:
          description: >
            A boolean flag indicating whether or not to use HTTP/2 when making requests
            by the reverse proxy to the resource server.
          type: boolean
          default: false

        sni:
          description: >
            The Server Name Indicator the reverse proxy will indicate to the
            resource server when communicating using HTTP/2.
          type: string
          x-name: SNI

    identity_headers:
      description: |
        Specifies the configuration information associated with the provision of identity
        information to the resource server.

        ## Encoding
        Type | Description
        ---- | -----------
        utf8_bin | Unencoded UTF-8 data. This setting allows data to be transmitted without data loss, and the user does not need to URI-decode the data.
        utf8_uri | URI encoded UTF-8 data. All white space and non\-ASCII bytes are encoded %XY, where X and Y are hex values (0 - F).
        lcp_bin | Unencoded local code page data. Data loss can potentially occur with this mode. Use with caution.
        lcp_uri | URI encoded local code page data. Any UTF-8 characters that cannot be converted to a local code page are converted to question marks (?).

        ## Basic Auth
        Type    | Description
        ---- ---| -----------
        filter  | The Authorization header, if provided by the client, will be removed before the resource request is forwarded to the resource server.  This is the default option if no option is specified.
        supply  | A new Authorization header will be created by the gateway and forwarded to the resource server.  The Basic Authentication information contained in the header will consist of the name of the authenticated user, along with a static password.  Use the 'password' YAML configuration entry to set the static password.
        ignore  | The Authorization header, if provided by the client, will be forwarded to the resource server unchanged.
        service | A new Authorization header will be constructed using a username and password retrieved from a configured credential service. See "services/credential" for more information about configuring a credential service. The YAML entries "service" and "resource_name" must be specified when using this mode.

        Example: resource_servers:
                     - path: "/example"
                       ...
                       identity_headers:
                           encoding: utf8_uri
                           basic_auth:
                               mode: filter
                           ip_address: true
                           attributes:
                               - attribute: emailAddress
                                 header: email_header
                               - attribute: AUTHENTICATION_LEVEL
                                 header: auth_level
                           ltpa:
                               key: "@ltpa_keyfile"
                               key_password: passw0rd
                               version: 2
                           session_cookie: true
                           jwt:
                               certificate: 
                                   - "@jwt.cer"
                                   - "@jwt.key"
                                hdr_name: jwt
                                claims:
                                    - text: www.ibm.com
                                      name: iss
                                    - attr: AZN_CRED_PRINCIPAL_NAME
                                      name: sub
                                    - attr: AZN_*
                     - path: /ibmiis
                       connection_type: "tcp"
                       servers:
                           - host: test.ibm.com
                             port: 80
                       identity_headers:
                           kerberos:
                               resource_spn: HTTP/web.test.ibm.com@IBM.COM
                               always_send_tokens: true
                               user_identity: 
                                   username: "{preferred_username}"

      type: object
      properties:

        kerberos:
          description: |
            Specifies the information associated with Kerberos tokens. Note that the instance
            level 'services/kerberos' entry must be configured before enabling Kerberos tokens
            for any resource server.

          type: object
          properties:
            resource_spn:
              description: >
                The the service principal name of the target when requesting a Kerberos token. 
                The service principal name can be determined by executing the Microsoft utility 
                'setspn' (that is, 'setspn -L user', where 'user' is the identity of the back-end 
                web servers account).
              type: string
              x-name: Resource SPN
            always_send_tokens:
              description: >
                Indicates whether IAG sends a security token for every HTTP request or whether 
                IAG waits for a 401 response before it adds the security token.
              type: boolean
              default: false
            user_identity:
              description: >
                User Identity description.
              type: object
              properties:
                username:
                  description: >
                    An administrator can overwrite the UPN or sections of the UPN for Kerberos constrained delegation users with this entry. 
                    The replacement information can be either plain text or names of credential attributes that store the required 
                    information. If you specify plain text, the text is directly copied into the UPN sections. If you specify names of 
                    credential attributes by surrounding the text with braces eg. {preferred_username}, the replacement text is fetched from 
                    the value of the corresponding credential attribute.
                  type: string
                realm:
                  description: >
                    The realm to append to the client credential for Kerberos constrained delegation.
                    The realm value must be uppercase. Any input data that is not uppercase is automatically 
                    converted to uppercase. The realm must also be added as a realm to the Kerberos configuration in the Services module.
                  type: string

        encoding:
          description: >
            The encoding type to use for any identity headers passed to the
            resource server. See the Encoding table for a description of the available options.
          type: string
          default: utf8_uri
          enum:
            - utf8_bin
            - utf8_uri
            - lcp_bin
            - lcp_uri

        basic_auth:
          description: >
            Controls the basic authentication information, contained within
            the Authorization header, that is passed to the resource server.

            See the Basic Auth table for a description of the available 
            modes. 

            Note that some modes require additional parameters:

            - If the mode is "service", the following entries must also be
              provided: 
              - service 
              - resource_name

            - If the mode is "supply", the following entry must also be 
              provided:
              - password
          type: object
          x-name: Basic Authentication
          properties:
            mode:
              description: >
                The mode of handling the basic authentication headers.
              type: string
              default: filter
              enum:
                - filter
                - ignore
                - supply
                - service
            password:
              description: >
                If the mode entry is set to 'supply' then the password must be provided here.
              type: string
            service:
              description: >
                If the mode entry is set to 'service' then the credential service name must be provided here.
              type: string
            resource_name:
              description: >
                Used only when mode is "service".
                The name of the resource which will be passed to the 
                credential service when retrieving the username/password.
              type: string

        ip_address:
          description: >
            A boolean flag indicating whether or not to provide the client IP 
            address as a HTTP header in requests forwarded to the resource 
            server.  The IP address will be added in the 'iv-remote-address'
            HTTP header.
          type: boolean
          default: false
          x-name: IP Address

        iv_creds:
          description: >
            A boolean flag indicating whether or not to provide an ASN.1
            encoded version of the credential as a HTTP header in requests
            forwarded to the resource server.  The credential will be added 
            in the 'iv-creds' HTTP header.
          type: boolean
          default: false
          x-name: iv-creds

        attributes:
          description: >
             Specifies a list of attributes from the authenticated credential which will
             be inserted into the HTTP requests sent to the resource server.
          type: array
          items:
            type: object
            properties:
              attribute:
                description: The name of the credential attribute.
                type: string
                x-uuid: true
                x-required: true
              header:
                description: >
                  The name of the HTTP header which will contain the
                  credential attribute. If no name is supplied the name
                  of the credential attribute itself will be used.
                type: string
                x-uuid: true
                x-required: true

        session_cookie:
          description: >
            A boolean flag indicating whether or not to forward the reverse proxy cookie to the
            resource server. The name of this cookie is configured in the server:session:cookie_name entry.
          type: boolean
          default: false

        jwt:
          description: >
            Specifies the information associated with the generation of JSON
            Web tokens (JWT).
          type: object
          x-name: JWT
          properties:

            certificate:
              description: >
                PEM based personal certificate files which will be used to sign
                the JWT.  These certificate files should include the private 
                key, a certificate signed with the private key, and the signer
                certificate or signer certificate chain (if required).
              type: array
              items: 
                type: string
                x-uuid: true
                x-required: true

            hdr_name:
              description: >
                The name of the HTTP header which will contain the generated 
                JWT.
              type: string
              default: jwt
              x-name: Header Name

            claims:
              description: >
                The claims which are to be added to the JWT.  The claim can 
                either be obtained from a literal string, or from the value 
                of a credential attribute.
              type: array
              items:
                type: object
                properties:

                  name:
                    description: >
                      The name of the claim which is to be added to the JWT.  
                      If the name is not specified, and the claim value is 
                      obtained from an attribute name, the name of the claim 
                      will match the name of the attribute.   Nested objects
                      can be specified, separating the name of each object 
                      field with a . (dot).  If the name of a field itself 
                      embeds a dot it should be escaped with a backslash 
                      character.
                    type: string
                    x-uuid: true
                    x-required: true

                  text:
                    description: >
                      The literal text to be used as the claim value.  If both
                      a 'text' value and an 'attr' value is specified the 
                      'text' value will be used.  If an array is supplied in 
                      the configuration the claim will be added to the JWT as
                      a JSON array.
                    oneOf:
                      - type: string
                      - type: array
                        items:
                          type: string
                          x-uuid: true
                          x-required: true

                    type: string

                  type:
                    description: >
                      The type of textual data which is being provided.  This
                      will control the JSON type which is used in the JWT.
                      Please note that this field is only valid if a 'text' 
                      value has been specified and will be ignored if an
                      'attr' value is specified.
                    type: string
                    default: string
                    enum:
                      - string
                      - bool
                      - int

                  attr:
                    description: >
                      The name of the credential attribute from which the claim
                      value will be obtained.  The '*' and '?' pattern matching
                      characters can be used to match multiple attributes, 
                      however the pattern matching characters will be ignored 
                      if a claim 'name' is specified.  If both a 'text' value 
                      and an 'attr' value is specified the 'text' value will 
                      be used.
                    type: string
                    x-name: Attribute

        ltpa:
          description: >
            Specifies the information associated with the generation of an
            LTPA token.
          type: object
          x-name: LTPA
          properties:

            key:
              description: >
                The key which is used to protect the LTPA token.  This key
                must be in the correct proprietary format for an LTPA key.
              type: string

            key_password:
              description: >
                The password which is used to access the LTPA key.
              type: string

            version:
              description: >
                The version of the LTPA token to create.  Valid versions
                are 1 or 2, with a default of 1.
              type: number
              minimum: 1
              maximum: 2
              default: 1

    cookies:
      description: >
        Specifies the configuration information associated with the processing
        of cookies from the resource server.
        Example: resource_servers:
                     - path: "/example"
                       ...
                       cookies:
                           junction_cookie:
                               position: inhead
                               version: onfocus
                               ensure_unique: true
                               preserve_name: true
      type: object
      properties:

        junction_cookie:
          description: |
            The reverse proxy can set a "junction cookie" in returned HTML
            pages indicating which resource server the page was served from.
            This is useful for resource servers which dynamically generate URLs
            that may not be aware or capable of generating URLs containing the
            path which the reverse proxy served them from.

            ## Junction Cookie Positions

            **position** | Description
            ---------|---------
            **inhead**     | The junction cookie is set in a JavaScript block within the **<head> </head>** tags of the page. This is required for HTML 4.01 compliance.
            **trailer**    | The junction cookie is set in a JavaScript block that is appended to the end of the HTML page.
            **httpheader** | The junction cookie is returned as a standard HTTP cookie in the HTTP response headers.

            ## Junction Cookie Versions

            **version** | Description
            ---------|---------
            **onfocus**  | The JavaScript block will contain an onfocus event handler to ensure the correct junction cookie is used in a multiple-junction/multiple-browser-window scenario.
            **xhtml10**  | The inserted JavaScript block is HTML 4.01 and XHTML 1.0 compliant.

          type: object
          properties:

            position:
              description: >
                Controls the position in which the \<script\> block will be
                inserted. Refer to the Junction Cookie Positions table above
                for an explanation of these values.
              type: string
              enum:
                - inhead
                - trailer
                - httpheader

            version:
              description: >
                Controls how the cookie is set. This option is only valid for
                the **inhead** and **trailer** positions. Refer to the Junction
                Cookie Versions table above for an explanation of these values.
              type: string
              enum:
                - onfocus
                - xhtml10

            ensure_unique:
              description: >
                A boolean flag indicating whether or not to insert the resource server
                path or host to ensure that the cookie is unique.
              type: boolean
              default: false

            preserve_name:
              description: >
                A boolean flag indicating whether or not to preserve the original cookie name.
                When set to false, non-domain cookies are renamed AMWEBJCT!\<path\>.
              type: boolean
              default: false

    mutual_auth:
      description: >
        Specifies the configuration information associated with mutual authentication
        processing for the resource server.
        Example: resource_servers:
                     - path: "/example"
                       ...
                       mutual_auth:
                           basic_auth:
                               username: admin
                               password: passw0rd
                           certificate_auth:
                               certificate: 
                                   - "@cert.crt"
                                   - "@cert.key"
      type: object
      x-name: Mutual Authentication
      properties:

        basic_auth:
          description: >
            Specifies the configuration information associated with the basic authentication
            header which will be sent to the resource server.
          type: object
          x-name: Basic Authentication
          properties:

            username:
              description: >
                The name of the user to be included in the basic
                authentication header.
              type: string

            password:
              description: >
                The password of the user to be included in the basic
                authentication header.
              type: string

        certificate_auth:
          description: >
            Specifies the configuration information associated with the client certificate
            which will be sent to the resource server.
          type: object
          x-name: Certificate Authentication
          properties:

            certificate:
              description: >
                PEM based personal certificate files which will be used when
                communicating with the resource server.  These certificate files
                should include the private key, a certificate signed with the 
                private key, and the signer certificate or signer certificate 
                chain (if required).
              type: array
              items:
                type: string
                x-uuid: true
                x-required: true

    servers:
      description: >
        Specifies the location of the resource server that is being protected.
        This is an array type and multiple resource servers can be specified.
        Example: resource_servers:
                     - path: "/example"
                       ...
                       servers:
                           - host: www.test.com
                             port: 443
                             virtual_host: testportal.test.com
                             ssl:
                                 certificate: 
                                     - "@www-test-com.crt"
                                 server_dn: cn=test
                                 sni: www.test.com
                             url_style:
                                 case_insensitive: true
                                 windows: false
      type: array
      items:
        type: object
        properties:

          host:
            description: >
              The name or IP address of the server.
            type: string
            x-uuid: true
            x-required: true

          port:
            description: >
              The port on which the server is listening.
            type: number
            default: 443
            minimum: 0
            maximum: 65535
            x-uuid: true
            x-required: true

          virtual_host: 
            description: >
              If the resource server resides on a virtual host, this parameter
              can be used to specify the hostname which the reverse proxy
              should present in the host header for requests to this
              resource server. If this resource server definition is for a virtual
              host, this will be inherited from the resource server definition
              and should not be specified.
            type: string

          ssl:
            description: >
              SSL settings for the server.
            type: object
            x-name: SSL
            properties:

              certificate:
                description: >
                  If required, a signer certificate required for the reverse
                  proxy to trust the resource server can be specified
                  here in PEM format.
                type: array
                items:
                  type: string
                  x-uuid: true
                  x-required: true

              server_dn:
                description: >
                  This option can be used to ensure that the resource
                  server presents a specific certificate.
                type: string
                x-name: Server DN

              sni:
                description: >
                  Specifies the expected SNI of the resource server.
                type: string
                x-name: SNI

          url_style:
            description: >
              This entry defines how the resource server URLs are handled.
            type: object
            x-name: URL Style
            properties:

              case_insensitive:
                description: >
                  A boolean flag indicating whether or not URLs are case insensitive.
                type: boolean
                default: false

              windows:
                description: >
                  A boolean flag indicating whether or not to forbid requests to
                  URLs that appear to be Windows style file name aliases. If this
                  entry is set to true it will also enforce that URLs are case
                  insensitive.
                type: boolean
                default: false

    forms_login:
      description: |
        Specifies the configuration information used for performing form-based
        single sign-on to the protected application.

        ### Login Form Field Types

        Login form fields can be populated with data from three possible 
        sources, indicated by the 'source' field:

        Source | Usage
        -------|------
        service | Data from the credential service will be used to populate this field.
        attribute | A credential attribute value will be used to populate the field.
        static | A static string will be used to populate this field.

        ### Login Form Field Values

        Depending on the type of 'source' used, the usage of the 'value' can 
        differ.

        Source | Usage
        -------|-------
        service | The field from the credential service data to use. This can be either 'username' or 'password'
        attribute | The name of a credential attribute for which the value of will be used to populate this field.
        static | A static string literal which will be used to populate this field.

        In the below example:
        - Forms login will be attempted automatically on requests to the URL 
          'authenticate/login'
        - On the page, the HTML form with 'action="login.jsp"' will be detected
          as the login form
        - Credentials will be retrieved from the service named 
          'testCredentialService' service provided in the 'services/credential' 
          YAML. When requests are made to this service, the '{resource}' token 
          will be substituted with 'jspApp'.
        - To complete the login, IAG will send a forms POST to the URL indicated
          by the HTML form, containing the fields:
          - 'username', which is populated by the 'username' retrieved from the
            credential service.
          - 'password', which is populated by the decrypted version 'password'
            of the 'password' retrieved from the credential service.
          - 'SSO\_SOURCE' which is a static field always containing the 
            string 'IAG-SSO'
          - 'LOGIN\_ORIGIN' which is populated using the value of the credential
            attribute 'AZN\_CRED\_MECH\_ID' for the current user session.
        - When IAG submits the forms-based login, it will consider a response
          from the application with a HTTP status code 302 and a location 
          header matching "*/loginSuccess" to be a successful login.
        - If the response does not look like a successful login, IAG will 
          present the login form to the client.
        - As credential learning is enabled, when IAG observes the client POST 
          to '/login.jsp', it will extract the 'username' and 'password' fields
          and store them with the credential service for future use.

        Example: resource_servers:
                     - path: "/jspApp"
                       ...
                       forms_login:
                           credential_learning: true
                           login_resources:
                               - resource:      authenticate/login
                                 form_action:   /login.jsp
                                 service:       testCredentialService
                                 resource_name: jspApp
                                 fields:
                                     - name:   username
                                       source: service
                                       value:  username
                                     - name:   password
                                       source: service
                                       value:  password
                                     - name:   SSO_SOURCE
                                       source: static
                                       value:  "IAG-SSO"
                                     - name:   LOGIN_ORIGIN
                                       source: credential
                                       value:  AZN_CRED_MECH_ID
                                 response_rules:
                                     - success: true
                                       response_code: 302
                                       headers:
                                           - name: Location
                                             value: "*/loginSuccessful"
      type: object
      properties:
        credential_learning:
          description: >
            A boolean flag indicating whether or not credential learning is 
            enabled for this resource server. If credential learning is 
            enabled, when IAG is unable to automatically complete the forms
            login but observes a successful manual login, the credentials 
            used will be encrypted and stored in the credential service for
            future use.
          type: boolean
          default: false
        login_resources:
          description: >
            This entry is a list of login resources which each contain 
            configuration for each forms-based login page.
          type: array
          items:
            type: object
            properties:
              resource:
                description: >
                  This entry specifies a pattern that uniquely identifies 
                  requests for an application's login page.

                  The page will then be intercepted to begin the forms-login 
                  sign-on process. The pattern provided is compared to the
                  request URI.
                type: string
                x-uuid: true
                x-required: true
              form_action:
                description: >
                  This entry specifies a pattern that identifies which form 
                  contained in the intercepted page is the login form. The
                  matching is performed based on the 'action' attribute of 
                  the HTML '<form>' node.
                type: string
              service:
                description: >
                  The name of the credential service which is used to store
                  and retrieve credentials for this resource.
                type: string
              resource_name:
                description: >
                  The resource name which will be used when making requests
                  to the configured credential service.
                type: string
              fields:
                description: >
                  This entry is a list of the form fields which are need to
                  complete the form-based login.
                type: array
                items:
                  type: object
                  properties:
                    name:
                      description: >
                        The name of the form field that will be populated.
                      type: string
                      x-uuid: true
                      x-required: true
                    source:
                      description: >
                        The data source which will be used to populate this
                        form field.

                        See the 'Login Form Field Types' table for an 
                        explanation of the values.
                      type: string
                      enum:
                        - static
                        - attribute
                        - service
                    value:
                      description: >
                        This entry defines what information for the given
                        source will be used to populate this form field.

                        See the 'Login Form Field Values' table for an 
                        explanation of the values.

                      type: string
              response_rules:
                description: >
                  A list of rules which are used to determine if the 
                  forms-based was successful or not. These rules are 
                  evaluated in the order they are provided here.
                type: array
                items:
                  type: object

                  properties:
                    success:
                      description: >
                        A boolean to indicate whether this rule is used to 
                        detect a successful login or not.

                        'true' indicates a successful login, 'false' indicates
                        a failed login attempt.
                      type: boolean
                    response_code:
                      description: >
                        The HTTP status code expected in the response for 
                        this rule.
                      type: string
                      x-uuid: true
                      x-required: true
                    headers:
                      description: >
                        The HTTP headers expected in the response.
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            description: >
                              The name of the HTTP header to examine in the 
                              response. 

                              HTTP header names are not case sensitive.
                            type: string
                            x-uuid: true
                            x-required: true
                          value:
                            description: >
                              The expected value of the HTTP header. 

                              Header values are case sensitive.
                            type: string

    health:
      description: >
        Specifies the configuration which is used to establish
        the health of the resource server.
        Example: resource_servers:
                     - path: "/example"
                       ...
                       health:
                           ping:
                               method: HEAD
                               url: /
                               policy:
                                   frequency: 600
                                   threshold: 1
                                   recovery: 
                                       frequency: 300
                                       threshold: 1
                                   timeout: 10
                                   rule:
                                       - -50?
                                       - +*
                               rule:
                                   - -50?
                                   - +*
      type: object
      properties:

        ping:
          description: >
            Specifies the configuration that allows the reverse proxy to periodically
            ping each resource server to determine whether it is running.  
          type: object
          properties:

            method:
              description: >
                The HTTP method which will be used in the ping request.
              type: string

            url:
              description: >
                The URL to which the ping request will be sent.
              type: string
              x-name: URL

            policy:
              description: >
                The policy associated with the ping requests.
              type: object
              properties:

                frequency:
                  description: >
                    The frequency (in seconds) which ping requests will
                    be sent. If set to 0 the ping will be disabled.
                  type: number
                  minimum: 0
                  maximum: unlimited
                  default: 300

                threshold:
                  description: >
                    Specifies how many consecutive times the ping must
                    fail before the resource server is considered 
                    unhealthy.
                  type: number
                  minimum: 1
                  maximum: unlimited
                  default: 1

                timeout:
                  description: >
                    Specifies how long the reverse proxy should wait for
                    responses to ping requests. A value of 0 will result in
                    an indefinite wait. If not specified the timeout will default
                    to the http or https timeout.
                  type: number
                  minimum: 0
                  maximum: unlimited

                recovery:
                  description: >
                    When the resource server is unhealthy, these
                    entries specify how often they should be pinged and
                    how many consecutive successful pings should be
                    observed before the resource server is considered
                    healthy again.
                  type: object
                  properties:
                    frequency:
                      description: >
                        The frequency (in seconds) which ping requests
                        will be sent. If this value is not set it will
                        default to the value of the ping frequency.
                      type: number
                      minimum: 1
                      maximum: unlimited

                    threshold:
                      description: >
                        Specifies how many consecutive times the ping
                        must fail before the resource server is
                        considered unhealthy.
                      type: number
                      minimum: 1
                      maximum: unlimited
                      default: 1

                rule:
                  description: >
                    Specifies how to interpret responses to ping
                    requests. This entry is an ordered list of rules
                    based on the response status codes. Status codes
                    prefixed with a '+' are considered healthy, and
                    codes prefixed with '-' unhealthy. The wildcard
                    characters '*' and '?' can be used.
                  type: array
                  x-name: Ping Response Rules
                  items:
                    type: string
                    x-uuid: true
                    x-required: true
                    x-name: Ping Response Rule

            rule:
              description: >
                Regular (client initiated) requests can also be observed
                to determine the resource server health. This entry
                is an ordered list of rules based on the response status
                codes. Status codes prefixed with a '+' are considered
                healthy, and codes prefixed with '-' unhealthy. The
                wildcard characters '*' and '?' can be used.
              type: array
              x-name: Response Rules
              items:
                type: string
                x-uuid: true
                x-required: true
                x-name: Response Rule 

    worker_threads:
      description: >
        Specifies the limits that can be set on the percentage of worker
        threads that may be consumed by this resource server.
        Example: resource_servers:
                     - path: "/example"
                       ...
                       worker_threads:
                           soft_limit: 60
                           hard_limit: 80
      type: object
      properties:

        soft_limit:
          description: >
            Specifies the soft limit (as a percentage) of worker threads that the resource server can use.
            Warning messages will be displayed when the resource server uses more worker threads than allowed.
          type: number
          default: 0
          minimum: 0
          maximum: 100

        hard_limit:
          description: >
            Specifies the hard limit (as a percentage) of worker threads that the resource server can use.
            Warning messages will be displayed when the resource server uses more worker threads than allowed and
            clients are returned the 503 Service Unavailable message.
          type: number
          default: 0
          minimum: 0
          maximum: 100

    persistent_connections:
      description: >
        Configures the pool of persistent connections which is maintained
        for the resource server.  A persistent connection will allow an
        established connection to the resource server to be used for multiple
        requests.  
        Example: resource_servers:
                     - path: "/example"
                       ...
                       persistent_connections:
                         max_cache_size: 100
                         connection_timeout: 5
      type: object
      properties:

        max_cache_size:
          description: >
            The maximum number of persistent connections which will be 
            stored in the cache for future use.  Connections with resource 
            servers will be cached for future use unless the configured 
            limit is reached, or the 'connection: close' header is received 
            in the HTTP response.  Please note that if enabled there is the 
            potential for different user sessions to use the same connection 
            when processing requests.  To disable the persistent connection 
            functionality simply specify a value of 0.
          type: number
          default: 0
          minimum: 0
          maximum: unlimited

        connection_timeout:
          description: >
            The maximum number of seconds a persistent connection can 
            remain idle in the cache before the connection is cleaned up 
            and closed by the IAG.  This value should be lower than the 
            configured maximum connection lifetime for the resource server.  
            This behaviour is controlled for the Apache Web server, as an 
            example only, by the KeepAliveTimeout configuration entry.
          type: number
          default: 5
          minimum: 0
          maximum: unlimited

    identity:
      description: >
        Defines any special identity provider information for this resource
        server.
        Example: resource_servers:
                     - path: "/example"
                       ...
                       identity:
                         oauth: "verify_introspection"
      type: object
      properties:

        oauth:
          description: >
            The name of the OAuth introspection endpoint to use when
            accessing this resource server.
          type: string
          x-name: OAuth
