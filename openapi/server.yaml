# Copyright contributors to the Application Gateway project

server:
  description: >
    The `server` node defines configuration for the gateway daemon front-end.
  type: object
  properties:

    protocols:
      description: |
        Specifies the protocols which will be supported by the server. The server will listen on a different port for each protocol: `http/8080` and `https/8443`. If no protocols are specified, the server will listen for https requests only.

        Additionally, the server can be configured to expect the [PROXY Protocol](https://www.haproxy.com/blog/haproxy/proxy-protocol/) header by using the `*_proxy` values.

        Note that if the proxy protocol is enabled for a given protocol, all traffic for that protocol will be expected to contain the PROXY protocol headers. That is, the following entries are exclusive:
         - `http` and `http_proxy`
         - `https` and `https_proxy`

        protocol    | Port | Description
        ------------|------|-------------
        http        | 8080 | HTTP
        https       | 8443 | HTTPS
        http_proxy  | 8080 | HTTP with Proxy Protocol
        https_proxy | 8443 | HTTPS with Proxy Protocol


        Example:

        server:
          protocols:
            - https
            - http_proxy

      type: array
      items:
        description: >
          The name(s) of the protocols which the gateway will listen on.
        type: string
        default: https
        enum:
          - http
          - https
          - http_proxy
          - https_proxy
        x-uuid: true
        x-required: true
        x-name: Protocol

    client_ip_rules:
      description: |
        The rules which define whether a client is allowed to connect to this server. The rule is of the format:

        `[+|-]<client-ip>`

        where:

        Element           | Description
        ------------------|-------------
        +                 | Indicates that the client is permitted access.
        -                 | Indicates that the client is not permitted access.
        &lt;client-ip&gt; | The IP address of the client, which can also contain the pattern matching characters `*` and `?`.

        The client IP address of a request will be evaluated against each rule in sequence until a match is found.  The corresponding code (+|-) will then be used to determine whether the client connection is accepted.  If the client IP matches no configured rules the client connection will be accepted.

        Example:

        server:
          client_ip_rules:
            - +10.0.0.*
            - -9.*.*.*

      type: array
      x-name: Client IP Rules
      items:
        description: >
          A client IP address pattern(s).
        type: string
        x-uuid: true
        x-required: true
        x-name: IP Pattern

    ssl:
      description: >
        Specifies the secure configuration for the gateway server.
      type: object
      x-name: SSL
      properties:

        front_end:
          description: >
            Specifies the configuration the gateway server will use when securely communicating with clients. This configuration includes:
            
              - The certificate to be used for secure communication with clients.  If a certificate is not provided, the gateway will generate a self-signed certificate during bootstrapping.
            
              - The TLS protocols that are enabled for client communication.
            
              - Any additional server certificates which should be used for specific hosts using the `server name indication` (SNI) TLS extension.
            
            
            Example:
            
            server:
              ssl:
                front_end:
                  certificate:
                    - "@host.crt"
                    - "@host.key"
                    - "@ca.crt"
                  tlsv12: true
                  sni:
                    - certificate:
                      - "@test.crt"
                      - "@test.key"
                      hostname: www.test.com
                    - certificate:
                        - "@example.crt"
                        - "@example.key"
                      hostname: www.example.com
                trust_certificates:
                  - "@www-dev.pem"
                  - "@redis-staging-1.pem"
                  - "@redis-staging-2.pem"
          type: object
          properties:

            certificate:
              description: >
                PEM based personal certificate files which will be used when
                communicating with the client.  These certificate files
                should include the private key, a certificate signed with the
                private key, and the signer certificate or signer certificate
                chain (if required).

                If a certificate is not provided, the gateway will generate
                a self-signed certificate during bootstrapping.
              type: array
              items:
                type: string
                x-uuid: true
                x-required: true
                x-name: Certificate

            tlsv10:
              description: >
                A boolean which indicates whether or not TLS v1.0 is enabled.
              type: boolean
              default: false
              x-name: TLS 1.0

            tlsv11:
              description: >
                A boolean which indicates whether or not TLS v1.1 is enabled.
              type: boolean
              default: false
              x-name: TLS 1.1

            tlsv12:
              description: >
                A boolean which indicates whether or not TLS v1.2 is enabled.
              type: boolean
              default: true
              x-name: TLS 1.2

            tlsv13:
              description: >
                A boolean which indicates whether or not TLS v1.3 is enabled.
              type: boolean
              default: false
              x-name: TLS 1.3

            sni:
              description: >
                Specifies a list of SNI certificate to hostname mappings for the front end.
              type: array
              x-name: SNI
              items:
                type: object
                x-name: SNI
                properties:

                  certificate:
                    description: >
                      PEM based personal certificate files which will be used
                      when communicating with clients which indicate this host.
                      These certificate files should include the private key,
                      a certificate signed with the private key, and the
                      signer certificate or signer certificate chain
                      (if required).
                    type: array
                    items:
                      type: string
                      x-uuid: true
                      x-required: true
                      x-name: Certificate

                  hostname:
                    description: >
                      The name of the host for this SNI entry.
                    type: string
                    x-uuid: true
                    x-required: true

        applications:
          description: >
            Enables or disables the TLS protocols that are used for communication
            between the gateway daemon and the protected application.


            Example:

            server:
              ssl:
                applications:
                  tlsv13: true
          type: object
          properties:

            tlsv10:
              description: >
                A boolean which indicates whether or not TLS v1.0 is enabled.
              type: boolean
              default: false
              x-name: TLS 1.0

            tlsv11:
              description: >
                A boolean which indicates whether or not TLS v1.1 is enabled.
              type: boolean
              default: false
              x-name: TLS 1.1

            tlsv12:
              description: >
                A boolean which indicates whether or not TLS v1.2 is enabled.
              type: boolean
              default: true
              x-name: TLS 1.2

            tlsv13:
              description: >
                A boolean which indicates whether or not TLS v1.3 is enabled.
              type: boolean
              default: false
              x-name: TLS 1.3

        ciphers:
          description: |
            Specifies the ciphers and cipher suites which will be permitted for all secure communications.

            The following tables show the list of available ciphers.

            ### Supported Cipher Names

            Name |
            ---- |
            TLS_DHE_PSK_WITH_AES_128_CCM_8 |
            TLS_DHE_PSK_WITH_AES_128_CCM |
            TLS_DHE_PSK_WITH_AES_256_CCM_8 |
            TLS_DHE_PSK_WITH_AES_256_CCM |
            TLS_DHE_RSA_WITH_AES_128_CCM_8 |
            TLS_DHE_RSA_WITH_AES_128_CCM |
            TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 |
            TLS_DHE_RSA_WITH_AES_256_CCM_8 |
            TLS_DHE_RSA_WITH_AES_256_CCM |
            TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 |
            TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA |
            TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 |
            TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA |
            TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8 |
            TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 |
            TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 |
            TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA |
            TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 |
            TLS_ECDHE_ECDSA_WITH_RC4_128_SHA |
            TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA |
            TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 |
            TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA |
            TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 |
            TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 |
            TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA |
            TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 |
            TLS_ECDHE_RSA_WITH_RC4_128_SHA |
            TLS_PSK_WITH_AES_128_CCM_8 |
            TLS_PSK_WITH_AES_128_CCM |
            TLS_PSK_WITH_AES_256_CCM_8 |
            TLS_PSK_WITH_AES_256_CCM |
            TLS_RSA_EXPORT1024_WITH_DES_CBC_SHA |
            TLS_RSA_EXPORT1024_WITH_RC4_56_SHA |
            TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5 |
            TLS_RSA_EXPORT_WITH_RC4_40_MD5 |
            TLS_RSA_WITH_3DES_EDE_CBC_SHA |
            TLS_RSA_WITH_AES_128_CBC_SHA256 |
            TLS_RSA_WITH_AES_128_CBC_SHA |
            TLS_RSA_WITH_AES_128_CCM_8 |
            TLS_RSA_WITH_AES_128_CCM |
            TLS_RSA_WITH_AES_128_GCM_SHA256 |
            TLS_RSA_WITH_AES_256_CBC_SHA256 |
            TLS_RSA_WITH_AES_256_CBC_SHA |
            TLS_RSA_WITH_AES_256_CCM_8 |
            TLS_RSA_WITH_AES_256_CCM |
            TLS_RSA_WITH_AES_256_GCM_SHA384 |
            TLS_RSA_WITH_DES_CBC_SHA |
            TLS_RSA_WITH_NULL_MD5 |
            TLS_RSA_WITH_NULL_NULL |
            TLS_RSA_WITH_NULL_SHA |
            TLS_RSA_WITH_RC4_128_MD5 |
            TLS_RSA_WITH_RC4_128_SHA |
            TLS_RSA_WITH_NULL_SHA256 |
            TLS_ECDHE_ECDSA_WITH_NULL_SHA |
            TLS_ECDHE_RSA_WITH_NULL_SHA |

            ### Supported TLSv1.3 Cipher Names

            Name |
            ---- |
            TLS_AES_128_GCM_SHA256 |
            TLS_AES_256_GCM_SHA384 |
            TLS_CHACHA20_POLY1305_SHA256 |
            TLS_AES_128_CCM_SHA256 |
            TLS_AES_128_CCM_8_SHA256 |


            Example:

            server:
              ssl:
                ciphers:
                  - TLS_PSK_WITH_AES_256_CCM
                  - TLS_AES_128_CCM_8_SHA256
          type: array
          items:
            description: >
              The name(s) of the ciphers and cipher suites which will be permitted.

              For a list of valid ciphers, see:
                - [Supported Cipher Names](#supported-cipher-names)
                - [Supported TLSv1.3 Cipher Names](#supported-tlsv13-cipher-names)
            type: string
            x-uuid: true
            x-required: true
            x-name: Cipher

        trust_certificates:
          description: >
            PEM based signer certificates or signer certificate chains which 
            should be added to IAG's trust store. These can be signer 
            certificates which are required for secure communication with 
            resource servers or external services.


            Example:
            
            server:
              ssl:
                trust_certificates:
                  - "@www-dev.pem"
                  - "@redis-staging-1.pem"
                  - "@redis-staging-2.pem"
          type: array
          items:
            description: |
              PEM certificate data.
            type: string
            x-uuid: true
            x-required: true
            x-name: Trusted Certificates

    failover:
      description: >
        Specifies the configuration related to failover support for the
        IBM Application Gateway.


        Example:

        server:
          failover:
            key: 123A....
            cookie_name: jwe_cookie
            domain_cookie: false
      type: object
      properties:

        key:
          description: >
            The key which is used to protect the failover JWE cookie. This
            key should be 512 bits in length. If the key is greater than this
            size it will be truncated, and if it is less than this size it
            will be right-padded with 0's. An example openssl command to
            create this key is: `openssl rand -out oct-512-bit.bin 64`
          type: string

        cookie_name:
          description: >
            The name of the cookie which will be used to store the failover JWE.
          type: string

        domain_cookie:
          description: >
            A boolean flag indicating whether or not the failover cookie
            should include a domain. By including a domain the failover cookie
            will be sent to any server within the same DNS domain. For example,
            a failover cookie which is generated by `server_a.ibm.com` will
            also be sent to `server_b.ibm.com`. The name of the domain which
            is used in the failover cookie is derived from the Host header in
            the HTTP request.
          type: boolean
          default: false

    session:
      description: >
        Specifies the configuration for client sessions.


        Example:

        server:
          session:
            cookie_name: sess_cookie
            max_sessions: 20
            timeout: 600
            inactive_timeout: 100
            redis:
              enabled: true
              key_prefix: "iag-"
              default_collection: test-collection
              client_list_cache_lifetime: 10
              concurrent_sessions:
                enabled: true
                prompt_for_displacement: true
                max_user_sessions: 15
                user_identity_attribute_name: AZN_CRED_PRINCIPAL_NAME
            reauth:
              login_time_window: 10

      type: object
      properties:

        cookie_name:
          description: >
            The name of the session cookie presented to clients.
          type: string
          default: PD-S-SESSION-ID

        max_sessions:
          description: >
            The maximum number of concurrent sessions.
          type: number
          minimum: 1
          maximum: unlimited
          default: 4096

        timeout:
          description: >
            The maximum lifetime (in seconds) for a session. If set to `0`
            the sessions will not have a maximum lifetime, however once
            `max_sessions` is reached sessions will be reaped using a least
            recently used algorithm.
          type: number
          minimum: 0
          maximum: unlimited
          default: 3600

        inactive_timeout:
          description: >
            The maximum lifetime (in seconds) a session can remain inactive
            before it is expired. If set to `0` the sessions will not have a
            maximum inactive lifetime.
          type: number
          minimum: 0
          maximum: unlimited
          default: 600

        permit_user_switching:
          description: >
            During an obligated re-authentication, depending on the policy and
            identity provider a different user credential may be returned to
            the application gateway.
            By default, the application gateway will not accept a credential
            if the user name does not match the user which the session was
            originally established for.
            Use this entry to change the behaviour and allow the application
            gateway to accept a credential containing a different user name
            during re-authentication.
          type: boolean
          default: false

        redis:
          description: >
            Specifies the configuration for distributed sessions using a
            Redis environment.

            Redis collections are defined using the services/redis[] entry.

          type: object
          properties:
            enabled:
              description: >
                Enables the Redis session cache.
              type: boolean
            client_list_cache_lifetime:
              description: >
                The server needs to manually delete stale entries from the Redis
                cache during session creation and idle timeout events.  In
                order to be able to delete the stale entries it needs an
                up-to-date list of active clients of the Redis server (using
                the `CLIENT LIST` Redis command).  This command, depending on
                the number of clients which are registered with the Redis
                server, can be expensive and so IAG will cache and reuse
                the returned list of clients for a small period of time.  This
                configuration entry controls the length of time, in seconds,
                that a client list will be cached.
              type: number
              minimum: 0
              maximum: unlimited
              default: 10
            concurrent_sessions:
              description: >
                Specifies the configuration information associated with the
                tracking and management of concurrent user sessions.
              type: object
              properties:

                enabled:
                  description: >
                    Is concurrent user session tracking and management enabled?
                  type: boolean
                  default: true
                prompt_for_displacement:
                  description: >
                    If enabled the gateway will prompt users before
                    automatically displacing existing sessions with the same
                    user identity.  If disabled the gateway will automatically
                    log out the existing user session.
                  type: boolean
                  default: true
                max_user_sessions:
                  description: >
                    The maximum number of concurrent sessions which are allowed
                    for a single user.  A value of `0` indicates that an
                    unlimited number of sessions are allowed, and a value of
                    `-1` indicates that only a single session is allowed for
                    the user and that any existing sessions will be displaced
                    by the new session.  The maximum number of user sessions
                    for a particular session can also be defined using the
                    `tagvalue_max_concurrent_web_sessions` attribute of the
                    credential.
                  type: number
                  minimum: -1
                  maximum: unlimited
                  default: 0
                user_identity_attribute_name:
                  description: >
                    The name of the credential attribute which holds the unique
                    user identity for the session.  If the configured attribute
                    does not exist in the credential the default user identity
                    of `unknown` will be used.
                  type: string
                  default: AZN_CRED_PRINCIPAL_NAME

        reauth:
          description: >
            These entries control the behaviour of the re-authentication
            policies.
          type: object
          properties:
            login_time_window:
              description: >
                Controls the amount of time a re-authentication will be 
                considered valid for. This is a time (in seconds) after
                a re-authentication occurs during which a client will not be
                prompted to perform re-authentication again.

                By default, the login_time_window is set to zero, which means
                that every request to a resource protected with the reauth 
                policy directive will require the client to perform 
                re-authentication.
              type: number
              minimum: 0
              maximum: unlimited
              default: 0

    worker_threads:
      description: >
        The number of configured worker threads specifies the number of
        concurrent incoming requests that can be serviced by this gateway
        instance. Choosing the optimal number depends on the quantity and
        type of traffic on your network. Modifying this value should be done
        carefully to ensure optimal performance.


        Example:

        server:
          worker_threads: 300
      type: number
      minimum: 1
      maximum: unlimited
      default: 100

    http2:
      description: >
        A boolean which indicates whether or not to enable support for HTTP/2 clients.
        HTTP/2 supports a reduced set of cipher suites. The minimum cipher is
        `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256` which should be added to the
        `server/ssl/ciphers[]` entry.


        Example:

        server:
          http2: true
      type: boolean
      default: true
      x-name: HTTP/2

    websocket:
      description: >
        Specifies the configuration for WebSocket support.


        Example:

        server:
          websocket:
            worker_threads:
              max: 100
              idle: 0
            timeouts:
              applications:
                read: 30
                write: 30
              front_end:
                read: 30
                write: 30
      type: object
      x-name: WebSocket
      properties:

        worker_threads:
          description: >
            The number of available WebSocket worker threads.
          type: object
          properties:

            max:
              description: >
                The maximum number of threads which will be used used to proxy
                WebSocket connections through the gateway. A value of zero will cause
                WebSockets to be blocked. Each WebSocket connection will require
                two worker threads. If more than the max value are in use,
                the daemon will immediately close the WebSocket even if the
                WebSocket upgrade request to the application succeeded. The
                WebSocket threads operate independently from the server:worker_threads
                entry.
              type: number
              minimum: 0
              maximum: unlimited
              default: 0

            idle:
              description: >
                To avoid the overhead of starting and stopping web socket worker
                threads a number of threads can be left running idle. This will
                consume memory resources to keep them alive and idle when not in
                use, but will save CPU and thread start-up time when a new web
                socket requires threads. This option specifies the maximum count
                of cached idle worker threads. A value of zero will disable the
                caching of idle threads.
              type: number
              minimum: 0
              maximum: unlimited
              default: 0

        timeouts:
          description: >
            Web socket timeout settings.
          type: object
          properties:

            applications:
              description: >
                Specifies the web socket timeouts for connections between the
                gateway daemon and protected applications (in seconds). If the
                timeout is reached the web socket connection will be closed.
              type: object
              properties:

                read:
                  description: >
                    The maximum length of time (in seconds) to wait on a read
                    operation to complete.
                  type: number
                  minimum: 1
                  maximum: unlimited
                  default: 120

                write:
                  description: >
                    The maximum length of time (in seconds) to wait on a write
                    operation to complete.
                  type: number
                  minimum: 1
                  maximum: unlimited
                  default: 20

            front_end:
              description: >
                Specifies the web socket timeouts for connections to the
                gateway (in seconds). If the timeout is reached the web socket
                connection will be closed.
              type: object
              properties:

                read:
                  description: >
                    The maximum length of time (in seconds) to wait on a read
                    operation to complete.
                  type: number
                  minimum: 1
                  maximum: unlimited
                  default: 120

                write:
                  description: >
                    The maximum length of time (in seconds) to wait on a write
                    operation to complete.
                  type: number
                  minimum: 1
                  maximum: unlimited
                  default: 20

    local_pages:
      description: >
        Defines static assets which are served from the default `/` path of
        the reverse proxy. This entry must be either a zip file or a path
        which is relative to the `/var/iag/config` directory of the container.
        The provided contents will completely replace the default set of
        pages served from the `/` path of the IAG.

        #### Defaults

        If no value is specified here, the default set of pages will be used.
        The default set of pages, `local_pages.zip`, can be downloaded from GitHub
        (https://github.com/IBM-Security/ibm-application-gateway-resources/tree/master/pages)
        and used as a starting point for creating custom pages.


        Example:

        server:
          local_pages:
            content: "@myPages.zip"
            type: zip

      type: object
      properties:
        content:
          description: >
            The content which will be used for the local web space.  The
            content can either be the name of a directory, relative to the
            `/var/iag/config` directory of the container, or a zip file.
          type: string
        type:
          description: >
            The type of content which is being supplied.  Either a zip file
            or a directory name.
          type: string
          enum:
            - zip
            - path

    management_pages:
      description: |
        This entry overloads the server generated management response pages.
        This entry must be either a zip file or a path which is relative to the `/var/iag/config` directory of the container.
        The provided contents will completely replace the default set of management pages served by the IAG.

        The pages which are provided should conform to the directory structure and file name syntax explained below.
        The directory structure is:

        `<language_code>/<page_name>.<response_code>.<mime_type>`

        #### language_code

        `<language_code>` is a directory containing all the pages which will be presented to clients which prefer that language.
        If you do not wish to ever return pages to clients in a specific language, the corresponding language_code directory can be omitted.
        The reverse proxy will use the container language (set via the `LANG` environment variable) if a page is requested in a language which is not provided.

        For example, to only ever return management pages in English and French, include only the `C` and `fr` directories in the zip file and run the container with `LANG=C`.
        When a language other than English or French is requested, the page will fall back to `LANG` and be returned in English.

        | `language_code` | Language              |
        |-----------------|-----------------------|
        | pt              | Brazilian Portuguese  |
        | cs              | Czech                 |
        | zh_CN           | Chinese (Simplified)  |
        | zh_TW           | Chinese (Traditional) |
        | C               | English               |
        | fr              | French                |
        | de              | German                |
        | hu              | Hungarian             |
        | it              | Italian               |
        | ja              | Japanese              |
        | ko              | Korean                |
        | pl              | Polish                |
        | es              | Spanish               |
        | ru              | Russian               |

        #### page_name

        `<page_name>` corresponds to the specific event which the page is returned for.
        The list of valid page_names are:

        | `page_name`           |
        |-----------------------|
        | help                  |
        | login_success         |
        | logout                |
        | oidc_fragment         |
        | ratelimit             |
        | redirect              |
        | temp_cache_response |

        #### response_code

        `<response_code>` can be used to control the HTTP status code which the reverse proxy presents when it serves the page.
        This part of filename is optional and 200 will be used if no response_code is indicated.

        #### mime_type

        `<mime_type>` corresponds to the mime sub-type which this page will be returned for.
        For example, if a client request contains the `accept` header `text/html`, `html` is the mime sub-type and should be used for the file extension.
        If an `accept` header is not present, the reverse proxy will also consider the `content-type` header.

        #### Examples

        For example, to customise:

        - the `ratelimit` management response
        - for English language
        - to return HTTP status 500
        - for clients expecting `text/html`

        Create the following file in the zip file of management response pages:

        `C/ratelimit.500.html`

        #### Defaults

        If no value is specified here, the default set of pages will be used.
        The default set of pages, `management_pages.zip`, can be downloaded from GitHub (https://github.com/IBM-Security/ibm-application-gateway-resources/tree/master/pages) and used as a starting point for creating custom management pages.


        Example:

        server:
          management_pages:
            content: "@mgmtPages.zip"
            type: zip
      type: object
      properties:
        content:
          description: >
            The content which will be used for the management pages.  The
            content can either be the name of a directory, relative to the
            `/var/iag/config` directory of the container, or a zip file.
          type: string
        type:
          description: >
            The type of content which is being supplied.  Either a zip file
            or a directory name.
          type: string
          enum:
            - zip
            - path

    error_pages:
      description: |
        This entry overloads the server generated error response pages.
        This entry must be either a zip file or a path which is relative to the `/var/iag/config` directory of the container.
        The provided contents will completely replace the default set of error pages served by the IAG.

        The pages which are provided should conform to the directory structure and file name syntax explained below.
        The directory structure is:

        `<language_code>/<error_code>.<response_code>.<mime_type>`

        #### language_code

        `<language_code>` is a directory containing all the pages which will be presented to clients which prefer that language.
        If you do not wish to ever return pages to clients in a specific language, the corresponding language_code directory can be omitted.
        The reverse proxy will use the container language (set via the `LANG` environment variable) if a page is requested in a language which is not provided.

        For example, to only ever return error pages in English and French, include only the `C` and `fr` directories in the zip file and run the container with `LANG=C`.
        When a language other than English or French is requested, the page will fall back to `LANG` and be returned in English.

        | `language_code` | Language              |
        |-----------------|-----------------------|
        | pt              | Brazilian Portuguese  |
        | cs              | Czech                 |
        | zh_CN           | Chinese (Simplified)  |
        | zh_TW           | Chinese (Traditional) |
        | C               | English               |
        | fr              | French                |
        | de              | German                |
        | hu              | Hungarian             |
        | it              | Italian               |
        | ja              | Japanese              |
        | ko              | Korean                |
        | pl              | Polish                |
        | es              | Spanish               |
        | ru              | Russian               |

        #### error_code

        `<error_code>` corresponds to a specific error code in hexadecimal format.
        The special error code of `default` can also be used to configure a default page which is used for any error codes which do not have a specific page.

        #### response_code

        `<response_code>` can be used to control the HTTP status code which the reverse proxy presents when it serves the page.
        This part of filename is optional and the default value will be used if no response_code is indicated.

        | `error_code` | Default `response_code` | Description             |
        |--------------|-------------------------|-------------------------|
        | 38cf0420     | 301                     | Moved Permanently       |
        | 38cf0421     | 302                     | Moved Temporarily       |
        | 38cf0427     | 403                     | Forbidden               |
        | 38cf0428     | 404                     | Not Found               |
        | 38cf04c6     | 500                     | Server Not Responding   |
        | 38cf04d7     | 500                     | Server Not Responding   |
        | 38cf08cc     | 403                     | Forbidden (Time based)  |
        | default      | 400                     | Any other error code    |

        #### mime_type

        `<mime_type>` corresponds to the mime sub-type which this page will be returned for.
        For example, if a client request contains the `accept` header `text/html`, `html` is the mime sub-type and should be used for the file extension.
        If an `accept` header is not present, the reverse proxy will also consider the `content-type` header.

        #### Examples

        For example, to customise:

        - the `forbidden` error response (error code `38cf0427`)
        - for Korean language
        - to return HTTP status 500
        - for clients expecting `application/json`

        Create the following file in the zip file of error response pages:

        `ko/38cf0427.500.json`

        #### Defaults

        If no value is specified here, the default set of pages will be used.
        The default set of pages, `error_pages.zip`, can be downloaded from GitHub (https://github.com/IBM-Security/ibm-application-gateway-resources/tree/master/pages) and used as a starting point for creating custom error pages.


        Example:

        server:
          error_pages:
            content: "@errorPages.zip"
            type: zip
      type: object
      properties:
        content:
          description: >
            The content which will be used for the error pages.  The
            content can either be the name of a directory, relative to the
            `/var/iag/config` directory of the container, or a zip file.
          type: string
        type:
          description: >
            The type of content which is being supplied.  Either a zip file
            or a directory name.
          type: string
          enum:
            - zip
            - path

    public_assets:
      description: |
        This entry overloads the default assets used in server generated error and management response pages.
        These assets are served by the application gateway on the configured path segment (default `pkmspublic`) and are suitable for embedding in server generated responses such as error or management pages.


        #### Defaults

        If no value is specified here, the default set of assets will be used.
        The default set of assets, used by the default error and management pages, `public_assets.zip`, can be downloaded from GitHub (https://github.com/IBM-Security/ibm-application-gateway-resources/tree/master/pages).


        Example:

        server:
          public_assets:
            content: "@publicAssets.zip"
            type: zip
            path_segment: public
      type: object
      properties:
        content:
          description: >
            The content which will be used for the public assets.  The
            content can either be the name of a directory, relative to the
            `/var/iag/config` directory of the container, or a zip file.
          type: string
        type:
          description: >
            The type of content which is being supplied.  Either a zip file
            or a directory name.
          type: string
          enum:
            - zip
            - path
        path_segment:
          description: >
            The path which the assets will be available from. By default, this is
            `pkmspublic`.
          type: string
          default: pkmspublic

    enabled_languages:
      description: |
        The language(s) which will be permitted when the application gateway generates error and management response pages. The accept-language HTTP header from the request is used to determine the language used when generating responses.

        The first language in the list will be treated as the default language. The default language will be used if none of the languages contained in the accept-language HTTP header have been enabled.

        If this entry is not defined, all languages will be enabled with English (C) set as the default.

        #### language codes

        | `language code` | Language              |
        |-----------------|-----------------------|
        | pt              | Brazilian Portuguese  |
        | cs              | Czech                 |
        | zh_CN           | Chinese (Simplified)  |
        | zh_TW           | Chinese (Traditional) |
        | C               | English               |
        | fr              | French                |
        | de              | German                |
        | hu              | Hungarian             |
        | it              | Italian               |
        | ja              | Japanese              |
        | ko              | Korean                |
        | pl              | Polish                |
        | es              | Spanish               |
        | ru              | Russian               |


        Example:

        server:
          enabled_languages:
            - fr
            - ja

      type: array
      items:
        description: >
          The language(s) which will be permitted when the application gateway generates
          error and management response pages.
        type: string
        x-name: Language
        x-uuid: true
        enum:
          - C
          - cs
          - de
          - es
          - fr
          - hu
          - it
          - ja
          - ko
          - pl
          - pt_BR
          - ru
          - zh_CN
          - zh_TW

    credential_service_cache:
      description: >
        Specifies the configuration for the credential service cache. When the
        cache is enabled, IAG will cache the encrypted credentials received
        from the external credential service. If the cache is not enabled, IAG
        will request credentials from the credential service for every request
        requiring single sign-on.


        Example:

        server:
          credential_service_cache:
            cache_enabled: true
            cach_size: 2048
            entry_lifetime: 3600
            entry_idle_timeout: 3600
            login_clear_user: true
      type: object
      properties:
        cache_enabled:
          description: >
            A boolean to indicate whether the credential service cache is
            enabled or not.
          type: boolean
          default: false
        cache_size:
          description: >
            The cache size, the number of entries which will be cached.
          type: number
          minimum: 0
          maximum: unlimited
          default: 1024
        entry_lifetime:
          description: >
            The entry lifetime, the maximum number of seconds entries will be
            cached for, regardless of whether they are being used or not.
          type: number
          minimum: 0
          maximum: unlimited
          default: 900
        entry_idle_timeout:
          description: >
            The entry idle timeout, the number of seconds a cache entry which
            is not being used will remain cached for.
          type: number
          minimum: 0
          maximum: unlimited
          default: 900
        login_clear_user:
          description: >
            If set to true, on successful authentication any existing cached
            credentials for the authenticating user will be cleared.
          type: boolean
          default: false

    local_applications:
      description: >
        Specifies the configuration for any embedded applications.

      type: object
      properties:

        cred_viewer:
          description: |
            Specifies the configuration information related to the embedded credential viewer application.
            The credential viewer application can be used to display information about the credential associated with the current user session.

            ### Attributes Format

            The rules which define the credential attributes which will be included in the response data.
            The format of the configuration entry is:

            `[+|-]<attribute-name>`

            where:

            Element | Description
            ------- | -----------
            + | Indicates that this attribute should be added to the response.
            - | Indicates that this attribute should not be added to the response.
            &lt;attribute-name&gt; | The name of the credential attribute, which can also contain pattern matching characters (i.e. * ?).

            For example the value `-AUTHENTICATION_LEVEL` indicates that the authentication level attribute should not be added to the response.
            When constructing a response each credential attribute will be evaluated against each rule in sequence until a match is found.
            The corresponding code (+|-) will then be used to determine whether the credential attribute will be added to the response or not.
            If the attribute name does not match a configured rule it will, by default, be added to the response.
            The rule could alternatively contain the name of a single credential attribute whose value is used to define the attribute rules.
            In this scenario each individual rule in the attribute should be separated by a space character.
            If only a single attribute-rule configuration entry is defined, and the entry does not start with a `+` or `-` character, it will be used as the name of the credential attribute which contains the attribute rules.


            Example:

            server:
              local_applications:
                cred_viewer:
                  path_segment: credview
                  enable_html: true
                  attributes:
                    - "-AUTHENTICATION_LEVEL"

          type: object
          x-name: Credential Viewer
          properties:

            path_segment:
              description: >
                The path at which the application will be available. The
                path should be a simple path segment (i.e. should not contain
                a `/` character).
              type: string

            enable_html:
              description: >
                A boolean flag indicating whether or not the embedded HTML page
                which can render the JSON data is enabled.
              type: boolean
              default: true
              x-name: Enable HTML

            attributes:
              description: >
                The rules which define the credential attributes which will be
                included in the response data.  See the 
                [Attributes Format](#attributes-format) table for a description
                of the expected format.
              type: array
              items:
                type: string
                x-uuid: true
                x-required: true
                x-name: Attribute

        azn_decision:
          description: >
            Specifies the configuration information related to the embedded
            authorization decision application. The authorization decision
            application provides a Web service for making remote authorization
            decisions.


            Example:

            server:
              local_applications:
                azn_decision:
                  path_segment: azndec
                  max_cache_size: 100
                  max_cache_lifetime: 60

          type: object
          x-name: Authorization Decision
          properties:

            path_segment:
              description: >
                The path at which the application will be available. The
                path should be a simple path segment (i.e. should not contain
                a `/` character).
              type: string

            max_cache_size:
              description: >
                The maximum number of credentials which can be cached. If the
                addition of a new credential will exceed this maximum cache
                size a least-recently-used algorithm will be used to remove an
                older entry, making room for the new credential.
              type: number
              minimum: 1
              maximum: unlimited
              default: 8192

            max_cache_lifetime:
              description: >
                The maximum lifetime, in seconds, of an entry in the cache.
              type: number
              minimum: 1
              maximum: unlimited
              default: 300

        jwks:
          description: >
            Specifies the configuration information related to the embedded
            jwks application. The jwks application returns the public keys
            contained in the key database used for junction communication.
            The response data will conform to RFC 7517.


            Example:

            server:
              local_applications:
                jwks:
                  path_segment: jwks

          type: object
          x-name: JWKS
          properties:

            path_segment:
              description: >
                The path at which the application will be available. The
                path should be a simple path segment (i.e. should not contain
                a `/` character).
              type: string

    rate_limiting:
      description: >
        Specifies the global configuration related to rate limiting. Rate 
        limiting policies are defined using the policies/rate_limiting[] entry.


        Example:

        server:
          rate_limiting:
            cache_size: 16384
            redis:
              collection_name: test-collection
              sync_window: 10

      type: object
      properties:
        cache_size:
          description: >
            The number of unique records to cache locally for the rate
            limiting capability. When this cache is exhausted, the oldest 
            cached records are ejected. This effectively resets the rate
            limiting counters for this client(s). This number needs to be 
            higher than the number of requests being rate limited across a 
            refresh interval.
          type: number
          minimum: 1
          maximum: unlimited
          default: 16384

        redis:
          description: >
            These entries control whether or not rate limiting data will be 
            stored in a Redis database. When stored in a Redis database, 
            rate limiting data can be shared across multiple gateway instances.
          type: object
          properties:
            collection_name:
              description: >
                Specify the name of a Redis collection which will be used for 
                maintaining rate limiting data. Redis collections are defined
                using the services/redis[] entry.
              type: string
            sync_window:
              description: >
                The length of time (in seconds) a record from Redis will be 
                cached locally by this instance. Records will only be 
                synchronized with Redis after this window has elapsed.
              type: number
              minimum: 0
              maximum: unlimited
              default: 5

    content_security_policy:
      description: |
        Specifies whether or not the gateway will use the default content security policy.

        The default policy inserts the following HTTP headers into all responses:

        header | value
        -------|-------
        x-frame-options | DENY
        x-xss-protection | 1
        content-security-policy | default-src 'self'; frame-ancestors 'self'; form-action 'self';
        x-content-type-options | nosniff


        Example:

        server:
          content_security_policy: disabled

      type: string
      default: default
      enum:
        - default
        - disabled

    response_headers:
      description: >
        This entry can be used to set HTTP headers which are always present in all responses
        which are returned to clients.

        For each entry, only one of `macro`, `attribute` or `text` can be specified.


        Example:

        server:
          response_headers:
            - header:    X-Client-ID
              macro:     USER
            - header:    X-Client-Apparent-IP
              attribute: AZN_CRED_NETWORK_ADDRESS_STR
            - header:    X-IBM-Environment
              text:      staging
      type: array
      items:
          description: >
            Each entry corresponds to a single HTTP header. 
          type: object
          properties:
            header:
              description: >
                The name of the HTTP header to be included in the response.
              type: string
              x-required: true
              x-uuid: true
            macro:
              description: >
                The name of the macro which the value will be taken from.

                Valid macro values are:

                  - `TAM_OP`
                  - `ERROR_CODE`
                  - `ERROR_TEXT`
                  - `ERROR_URL`
                  - `USERNAME`
              type: string
            attribute:
              description: >
                The name of a credential attribute which the value will be taken from.
              type: string
            text:
              description: >
                String content which will be inserted into the header verbatim.
              type: string