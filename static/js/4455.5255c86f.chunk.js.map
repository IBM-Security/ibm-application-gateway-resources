{"version":3,"file":"static/js/4455.5255c86f.chunk.js","mappings":"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","sources":["content/servicesPage/servicescredentialEdit.js","../node_modules/carbon-components-react/es/components/Icon/Icon.js"],"sourcesContent":["import React, { useCallback, useState, lazy, Suspense } from 'react';\nimport {\n  Button,\n  TextInput,\n  NumberInput,\n  Select,\n  SelectItem,\n  Checkbox,\n  DataTable,\n  TableRow,\n  TableHead,\n  TableHeader,\n  TableContainer,\n  TableCell,\n  Table,\n  TableBody,\n  TableToolbar,\n  TableToolbarContent,\n  Icon,\n} from 'carbon-components-react';\n\nimport {\n    iconEdit, iconEditSolid, iconEditOutline,\n  } from 'carbon-icons';\n\nimport Collapsible from 'react-collapsible';\nimport { Tabs, Tab, TabPanel, TabList } from 'react-web-tabs';\nimport { Tooltip as ReactTooltip } from \"react-tooltip\";\n\nimport { safeLoad, getDivHeight, jsonToYaml, updateStyle, updateStyle2, editProps, validateField, toggleDescription } from '../../helpers';\n\n\nconst ServicescredentialsslcertificateDeleteModal = lazy(() => import('./servicescredentialsslcertificateDeleteModal'));\nconst ServicescredentialsslcertificateAdd = lazy(() => import('./servicescredentialsslcertificateAdd'));\nconst ServicescredentialsslcertificateEdit = lazy(() => import('./servicescredentialsslcertificateEdit'));\n\n\n  const handleChange = () => {\n  };\n\n  const handleSave = (loadGrid, idPrefix, objectName,  tbName, parentIdPrefix,  doClose) => {\n\n    if(idPrefix === undefined) idPrefix = \"\";\n\n    var json = {};\n      \n    if(document.getElementById(\"services_credential_authentication_access_token_token_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_authentication_access_token_token\"] = document.getElementById(\"services_credential_authentication_access_token_token_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_authentication_ba_password_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_authentication_ba_password\"] = document.getElementById(\"services_credential_authentication_ba_password_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_authentication_ba_username_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_authentication_ba_username\"] = document.getElementById(\"services_credential_authentication_ba_username_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_authentication_sso_client_id_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_authentication_sso_client_id\"] = document.getElementById(\"services_credential_authentication_sso_client_id_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_authentication_sso_client_secret_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_authentication_sso_client_secret\"] = document.getElementById(\"services_credential_authentication_sso_client_secret_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_authentication_sso_endpoint_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_authentication_sso_endpoint\"] = document.getElementById(\"services_credential_authentication_sso_endpoint_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_authentication_sso_payload_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_authentication_sso_payload\"] = document.getElementById(\"services_credential_authentication_sso_payload_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_enc_key_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_enc_key\"] = document.getElementById(\"services_credential_enc_key_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_host_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_host\"] = document.getElementById(\"services_credential_host_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_name_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_name\"] = document.getElementById(\"services_credential_name_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_port_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_port\"] = document.getElementById(\"services_credential_port_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_proxy_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_proxy\"] = document.getElementById(\"services_credential_proxy_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_ssl_server_dn_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_ssl_server_dn\"] = document.getElementById(\"services_credential_ssl_server_dn_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_ssl_sni_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_ssl_sni\"] = document.getElementById(\"services_credential_ssl_sni_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_url_pattern_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_url_pattern\"] = document.getElementById(\"services_credential_url_pattern_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_user_attribute_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_user_attribute\"] = document.getElementById(\"services_credential_user_attribute_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_user_attribute_encoding_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_user_attribute_encoding\"] = document.getElementById(\"services_credential_user_attribute_encoding_id\" + idPrefix).value;\n    }\n    json[\"services_credential_ssl_certificate\"] = services_credential_ssl_certificaterowData.services_credential_ssl_certificate;\n      \n    loadGrid( json[\"services_credential_authentication_access_token_token\"], json[\"services_credential_authentication_ba_password\"], json[\"services_credential_authentication_ba_username\"], json[\"services_credential_authentication_sso_client_id\"], json[\"services_credential_authentication_sso_client_secret\"], json[\"services_credential_authentication_sso_endpoint\"], json[\"services_credential_authentication_sso_payload\"], json[\"services_credential_enc_key\"], json[\"services_credential_host\"], json[\"services_credential_name\"], json[\"services_credential_port\"], json[\"services_credential_proxy\"], json[\"services_credential_ssl_server_dn\"], json[\"services_credential_ssl_sni\"], json[\"services_credential_url_pattern\"], json[\"services_credential_user_attribute\"], json[\"services_credential_user_attribute_encoding\"], json[\"services_credential_ssl_certificate\"], true); \n\n    handleClose(idPrefix, objectName,  tbName, parentIdPrefix,  doClose);\n  };\n\n  const handleAdd = (rowId, dataLoad, idPrefix, objectName,  tbName, parentIdPrefix,  loadGrids, data, setData) => {\n\n    var oName = (objectName)?objectName:\"\";\n    window[oName + \"editing\"] = true;\n    window[oName + \"rowId\"] = rowId;\n\n    if(loadGrids) {\n      for(var i = 0; i < loadGrids.length; i++) {\n        loadGrids[i](objectName, data, setData);\n      }\n    }\n\n    dataLoad();\n\n    var pName = oName;\n    if(pName.endsWith(\"_credential\")) {\n        var len = \"_credential\".length;\n        pName = pName.slice(0, -len);\n    }\n\n    if(tbName !== undefined && tbName !== \"\") {\n      document.getElementById(tbName).style.display = \"none\";\n    }\n\n    updateStyle(pName + \"_div\" + parentIdPrefix, \"display\", \"none\");\n    document.getElementById(\"editservices_credentialPage\" + idPrefix).style.display = \"block\";\n    document.getElementById(pName + \"_tab\" + parentIdPrefix).style.display = \"none\";\n\n  };\n\n  const handleClose = (idPrefix, objectName,  tbName, parentIdPrefix,  doClose) => {\n\n    var oName = (objectName)?objectName:\"\";\n    delete(window[oName + \"editing\"]);\n    delete(window[oName + \"rowId\"]);\n\n    var pName = oName;\n    if(pName.endsWith(\"_credential\")) {\n        var len = \"_credential\".length;\n        pName = pName.slice(0, -len);\n    }\n\n    if(tbName !== undefined && tbName !== \"\") {\n      document.getElementById(tbName).style.display = \"flex\";\n    }\n\n    updateStyle(pName + \"_div\" + parentIdPrefix, \"display\", \"block\");\n    document.getElementById(\"editservices_credentialPage\" + idPrefix).style.display = \"none\";\n    document.getElementById(pName + \"_tab\" + parentIdPrefix).style.display = \"flex\";\n\n\n\n      if(doClose) {\n        doClose();\n      }\n  };\n\n  const closeAdd = (idPrefix) => {\n\n      if(idPrefix === undefined) idPrefix = \"\";\n\n      updateStyle(\"services_credential_div\" + idPrefix, \"display\", \"block\");\n      document.getElementById(\"services_credential_tab\" + idPrefix).style.display = \"flex\";\n\n  };\n\nconst services_credential_ssl_certificateheaderData = [\n    {\n    header: 'Certificate',\n    key: 'certificate',\n  },\n\n];\n\nconst services_credential_ssl_certificaterowData = {services_credential_ssl_certificate: []};\n\nconst services_credential_ssl_certificatehandleAdd = (idPrefix, clearFields) => {\n    if(idPrefix === undefined) idPrefix = \"\";\n\n    // Set the fields to empty\n    if(clearFields) {\n      for(var i = 0; i < clearFields.length; i++) {\n        eval(clearFields[i]);\n      }\n    }\n\n    document.getElementById(\"services_credential_ssl_certificate_certificate_id\" + idPrefix).value = \"\";\n    // Hide the tab page\n    updateStyle(\"services_credential_div\" + idPrefix, \"display\", \"none\");\n    // Show the add page\n    document.getElementById(\"addservicescredentialssl_certificatePage\" + idPrefix).style.display = \"block\";\n    // Hide the remaining fields\n    document.getElementById(\"services_credential_tab\" + idPrefix).style.display = \"none\";\n\n  };\n\n    const getEditData = (objectName, data, setData) => {\n      var oName = (objectName)?objectName:\"\"\n\n      var yamlText = window.iagyaml;\n      var json = {};\n      if(yamlText !== null && yamlText !== undefined) {\n        json = safeLoad(yamlText);\n        if(json === undefined || json === null) {\n          json = {};\n        }\n      }\n\n    services_credential_ssl_certificaterowData.services_credential_ssl_certificate = [];\n    if(data && setData) {\n      for(var i = 0; i < data.length; i++) {\n        var tempId = ((data[i].name)?data[i].name:\"\");\n        if(tempId === window[oName + \"rowId\"]) {\n            if(data[i] !== undefined && data[i].ssl !== undefined && data[i].ssl.certificate !== undefined ) {\n              if(typeof data[i].ssl.certificate === \"string\") {\n                var newItem = {};\n                newItem[\"id\"] = data[i].ssl.certificate;\n                newItem[\"certificate\"] = data[i].ssl.certificate;\n                services_credential_ssl_certificaterowData.services_credential_ssl_certificate.push(newItem);\n              } else {\n                for(var i2 = 0; i2 < data[i].ssl.certificate.length; i2++) {\n                  var newItem = {};\n                  if(data[i].ssl.certificate[i2].id) {\n                    newItem[\"id\"] = data[i].ssl.certificate[i2].id;\n                  } else if(data[i].ssl.certificate[i2].certificate) {\n                    newItem[\"id\"] = data[i].ssl.certificate[i2].certificate;\n                  } else {\n                    newItem[\"id\"] = data[i].ssl.certificate[i2];\n                  }\n                  if(data[i].ssl.certificate[i2].certificate) {\n                    newItem[\"certificate\"] = data[i].ssl.certificate[i2].certificate;\n                  } else {\n                    newItem[\"certificate\"] = data[i].ssl.certificate[i2];\n                  }\n                  services_credential_ssl_certificaterowData.services_credential_ssl_certificate.push(newItem);\n                }\n              }\n              setData(\"setservices_credential_ssl_certificate\", services_credential_ssl_certificaterowData.services_credential_ssl_certificate);\n            }\n        }\n      }\n    } else {\n      if(json !== undefined && json.services !== undefined && json.services.credential !== undefined ) {\n        for(var i = 0; i < json.services.credential.length; i++) {\n          var tempId = ((json.services_credential[i].name)?json.services_credential[i].name:\"\");\n          if(tempId === window[oName + \"rowId\"]) {\n            if(json !== undefined && json.services !== undefined && json.services.credential[i] !== undefined && json.services.credential[i].ssl !== undefined && json.services.credential[i].ssl.certificate !== undefined ) {\n              for(var i2 = 0; i2 < json.services.credential[i].ssl.certificate.length; i2++) {\n                var newItem = {};\n                newItem.id = json.services.credential[i].ssl.certificate[i2];\n                newItem.certificate = json.services.credential[i].ssl.certificate[i2];\n                services_credential_ssl_certificaterowData.services_credential_ssl_certificate.push(newItem);\n              }\n            }\n          }\n        }\n      }\n    }\n  };\nconst Services_credentialEdit = (props) => {\n\n    var row = props.row;\n    const loadGrid = props.loadGrid;\n    const doClose = props.doClose;\n    const idPrefix = (props.idPrefix)?props.idPrefix:\"\";\n    const parentIdPrefix = (props.parentIdPrefix)?props.parentIdPrefix:\"\";\n    const objectName = (props.name)?props.name:\"\";\n    const tbName = (props.toolbarName)?props.toolbarName:\"\";\n\n    var rowId = (row !== undefined)?row.id:\"\";\n\n    const [services_credential_ssl_certificate, setservices_credential_ssl_certificate] = React.useState([]);\n    const [fetchedservices_credential_ssl_certificate, setFetchedservices_credential_ssl_certificate] = React.useState(false);\n\n    React.useEffect(() => {\n      services_credential_ssl_certificateloadGrid();\n    }, [fetchedservices_credential_ssl_certificate]);\n\n    const services_credential_ssl_certificateloadGrid = React.useCallback(async (services_credential_ssl_certificate_certificate, add) => {\n      try {\n        var attrs = [];\n        if(services_credential_ssl_certificate_certificate) {\n          if(add) {\n            for(var i = 0; i < services_credential_ssl_certificaterowData.services_credential_ssl_certificate.length; i++) {\n              var tempId = ((services_credential_ssl_certificaterowData.services_credential_ssl_certificate[i].certificate)?services_credential_ssl_certificaterowData.services_credential_ssl_certificate[i].certificate:\"\") + \"\";\n              if((window.services_credential_ssl_certificateediting != true && window.services_credential_ssl_certificateediting != \"true\") || tempId != window.services_credential_ssl_certificaterowId) {\n                attrs.push(services_credential_ssl_certificaterowData.services_credential_ssl_certificate[i]);\n              }\n            }\n            var newId = ((services_credential_ssl_certificate_certificate)?services_credential_ssl_certificate_certificate:\"\") + \"\";\n            attrs.push({\n              id: newId,\n              certificate: services_credential_ssl_certificate_certificate,\n            });\n          } else {\n            // Must be a delete\n            for(var i = 0; i < services_credential_ssl_certificaterowData.services_credential_ssl_certificate.length; i++) {\n              if(services_credential_ssl_certificaterowData.services_credential_ssl_certificate[i].certificate !== services_credential_ssl_certificate_certificate ) {\n                attrs.push(services_credential_ssl_certificaterowData.services_credential_ssl_certificate[i]);\n              }\n            }\n          }\n        } else {\n          attrs = services_credential_ssl_certificaterowData.services_credential_ssl_certificate;\n        }\n        services_credential_ssl_certificaterowData.services_credential_ssl_certificate = attrs;\n        const data = {services_credential_ssl_certificate: attrs};\n        setservices_credential_ssl_certificate(data.services_credential_ssl_certificate);\n\n        if(services_credential_ssl_certificate_certificate !== undefined && services_credential_ssl_certificate_certificate !== null ) {\n            handleChange();\n\n        }\n\n      } catch (e) {\n        console.log(e);\n      }\n      return true;\n    });\n\n\n    const [services_credential_authentication_access_token_token, setservices_credential_authentication_access_token_token] = useState(''),\n    updateservices_credential_authentication_access_token_token = useCallback((evt) => setservices_credential_authentication_access_token_token(evt.target.value), []);\n\n    const [services_credential_authentication_ba_password, setservices_credential_authentication_ba_password] = useState(''),\n    updateservices_credential_authentication_ba_password = useCallback((evt) => setservices_credential_authentication_ba_password(evt.target.value), []);\n\n    const [services_credential_authentication_ba_username, setservices_credential_authentication_ba_username] = useState(''),\n    updateservices_credential_authentication_ba_username = useCallback((evt) => setservices_credential_authentication_ba_username(evt.target.value), []);\n\n    const [services_credential_authentication_sso_client_id, setservices_credential_authentication_sso_client_id] = useState(''),\n    updateservices_credential_authentication_sso_client_id = useCallback((evt) => setservices_credential_authentication_sso_client_id(evt.target.value), []);\n\n    const [services_credential_authentication_sso_client_secret, setservices_credential_authentication_sso_client_secret] = useState(''),\n    updateservices_credential_authentication_sso_client_secret = useCallback((evt) => setservices_credential_authentication_sso_client_secret(evt.target.value), []);\n\n    const [services_credential_authentication_sso_endpoint, setservices_credential_authentication_sso_endpoint] = useState(''),\n    updateservices_credential_authentication_sso_endpoint = useCallback((evt) => setservices_credential_authentication_sso_endpoint(evt.target.value), []);\n\n    const [services_credential_authentication_sso_payload, setservices_credential_authentication_sso_payload] = useState('basic'),\n    updateservices_credential_authentication_sso_payload = useCallback((evt) => setservices_credential_authentication_sso_payload(evt.target.value), []);\n\n    const [services_credential_enc_key, setservices_credential_enc_key] = useState(''),\n    updateservices_credential_enc_key = useCallback((evt) => setservices_credential_enc_key(evt.target.value), []);\n\n    const [services_credential_host, setservices_credential_host] = useState(''),\n    updateservices_credential_host = useCallback((evt) => setservices_credential_host(evt.target.value), []);\n\n    const [services_credential_name, setservices_credential_name] = useState(''),\n    updateservices_credential_name = useCallback((evt) => setservices_credential_name(evt.target.value), []);\n\n    const [services_credential_port, setservices_credential_port] = useState(''),\n    updateservices_credential_port = useCallback((evt) => setservices_credential_port(evt.target.value), []);\n\n    const [services_credential_proxy, setservices_credential_proxy] = useState(''),\n    updateservices_credential_proxy = useCallback((evt) => setservices_credential_proxy(evt.target.value), []);\n\n    const [services_credential_ssl_certificate_certificate, setservices_credential_ssl_certificate_certificate] = useState(''),\n    updateservices_credential_ssl_certificate_certificate = useCallback((evt) => setservices_credential_ssl_certificate_certificate(evt.target.value), []);\n    const [services_credential_ssl_certificate_certificate_valid, setservices_credential_ssl_certificate_certificate_valid] = useState(true);\n    const [services_credential_ssl_certificate_certificate_invalid_text, setservices_credential_ssl_certificate_certificate_invalid_text] = useState(\"\");\n\n\n    const [services_credential_ssl_server_dn, setservices_credential_ssl_server_dn] = useState(''),\n    updateservices_credential_ssl_server_dn = useCallback((evt) => setservices_credential_ssl_server_dn(evt.target.value), []);\n\n    const [services_credential_ssl_sni, setservices_credential_ssl_sni] = useState(''),\n    updateservices_credential_ssl_sni = useCallback((evt) => setservices_credential_ssl_sni(evt.target.value), []);\n\n    const [services_credential_url_pattern, setservices_credential_url_pattern] = useState(''),\n    updateservices_credential_url_pattern = useCallback((evt) => setservices_credential_url_pattern(evt.target.value), []);\n\n    const [services_credential_user_attribute, setservices_credential_user_attribute] = useState('AZN_PRINCIPAL_ID'),\n    updateservices_credential_user_attribute = useCallback((evt) => setservices_credential_user_attribute(evt.target.value), []);\n\n    const [services_credential_user_attribute_encoding, setservices_credential_user_attribute_encoding] = useState('url'),\n    updateservices_credential_user_attribute_encoding = useCallback((evt) => setservices_credential_user_attribute_encoding(evt.target.value), []);\n\n\n\n    const [fetcheddata, setFetcheddata] = React.useState(false);\n    React.useEffect(() => {\n      dataLoad();\n    }, [fetcheddata]);\n    const dataLoad = () => {\n\n      for(var i = 0; i < services_credential_ssl_certificaterowData.services_credential_ssl_certificate.length; i++) {\n        if(services_credential_ssl_certificaterowData.services_credential_ssl_certificate[i].id === window.services_credential_ssl_certificaterowId) {\n        setservices_credential_ssl_certificate_certificate((services_credential_ssl_certificaterowData.services_credential_ssl_certificate[i] !== undefined && services_credential_ssl_certificaterowData.services_credential_ssl_certificate[i].certificate !== undefined )?services_credential_ssl_certificaterowData.services_credential_ssl_certificate[i].certificate:\"\");\n        }\n      }\n\n\n      return true;\n    };\n\n    const setDataMain = (functionName, data) => {\n      if(functionName && data) {\n        eval(functionName)(data);\n      }\n    };\n\n  if(props.editing == true) {\n    return (\n      <Icon {...editProps.editIcon()} onClick={() => {handleAdd(rowId, props.dataLoad, idPrefix, objectName,  tbName, parentIdPrefix,  [getEditData], props.data, props.setData); }} title={\"TODO\"} />    );\n  } else {\n    return (\n      <div>\n        <div id={'editservices_credentialPage' + idPrefix} style={{display:'none'}} className=\"bx--col bx--no-gutter\">\n\n\n          <Tabs id= {\"services_credential_tab\" + idPrefix} defaultTab={\"General_tab\" + idPrefix} vertical className=\"vertical-tabs\" style={{overflow:'auto'}}>\n              <TabList>\n                <Tab tabFor={\"General_tab\" + idPrefix}>General</Tab>\n                <Tab tabFor={\"authentication_tab\" + idPrefix}>Authentication</Tab>\n                <Tab tabFor={\"ssl_tab\" + idPrefix}>SSL</Tab>\n              </TabList>\n              <TabPanel style={{width:'100%', overflow:'auto'}} tabId={\"authentication_tab\" + idPrefix}>\n                <div className=\"iag_sublevel_tabs\" style={{height:'60vh', overflow:'auto'}}>\n                <div className= {\"iag_form_elem iag_tab_heading services_credential_div\" + idPrefix}>\n                  <span className=\"iag_breadcrumb\">Services / Credential : </span><br/>                  <h2>Authentication Settings</h2><hr/>\n                  <Collapsible tabIndex=\"0\" trigger=\"Controls how IAG will authenticate itself when communicating with the credential service\">\n                    <p>Controls how IAG will authenticate itself when communicating with the credential service. Only one of the following may be used at any time.</p>\n                  </Collapsible>\n\n                </div>\n                <div className={\"iag--simple-div services_credential_div\" + idPrefix}>\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n  <h3>Authentication</h3><hr/>\n</div>\n                <div className=\"iag-wdgt-container\" style={{marginLeft:\"20px\",marginBottom:\"10px\"}}>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n  <h3>Access Token</h3><hr/>\n</div>\n                <div className=\"iag-wdgt-container\" style={{marginLeft:\"40px\",marginBottom:\"10px\"}}>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_authentication_access_token_token}  id={\"services_credential_authentication_access_token_token_id\" + idPrefix}  data-tooltip-id={\"services_credential_authentication_access_token_token_tooltip_id\" + idPrefix}  labelText=\"Token\" onChange={props.updateservices_credential_authentication_access_token_token}/>\n          <ReactTooltip id={\"services_credential_authentication_access_token_token_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The literal access token that will be passed as a bearer token.<br/>Alternatively, if surrounded by &#123;}, this field can name a credential attribute for which the value of will be used as a bearer token.<br/></div></ReactTooltip>\n        </div>\n\n                </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n  <h3>Basic Authentication</h3><hr/>\n</div>\n                <div className=\"iag-wdgt-container\" style={{marginLeft:\"40px\",marginBottom:\"10px\"}}>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_authentication_ba_password}  id={\"services_credential_authentication_ba_password_id\" + idPrefix}  data-tooltip-id={\"services_credential_authentication_ba_password_tooltip_id\" + idPrefix}  labelText=\"Password\" onChange={props.updateservices_credential_authentication_ba_password}/>\n          <ReactTooltip id={\"services_credential_authentication_ba_password_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The password to be used to perform basic authentication to the credential service.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_authentication_ba_username}  id={\"services_credential_authentication_ba_username_id\" + idPrefix}  data-tooltip-id={\"services_credential_authentication_ba_username_tooltip_id\" + idPrefix}  labelText=\"Username\" onChange={props.updateservices_credential_authentication_ba_username}/>\n          <ReactTooltip id={\"services_credential_authentication_ba_username_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The username to be used to perform basic authentication to the credential service.<br/></div></ReactTooltip>\n        </div>\n\n                </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n  <h3>SSO</h3><hr/>\n</div>\n                <div className=\"iag-wdgt-container\" style={{marginLeft:\"40px\",marginBottom:\"10px\"}}>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_authentication_sso_client_id}  id={\"services_credential_authentication_sso_client_id_id\" + idPrefix}  data-tooltip-id={\"services_credential_authentication_sso_client_id_tooltip_id\" + idPrefix}  labelText=\"Client ID\" onChange={props.updateservices_credential_authentication_sso_client_id}/>\n          <ReactTooltip id={\"services_credential_authentication_sso_client_id_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The client identifier to use during the OAuth client credential flow.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_authentication_sso_client_secret}  id={\"services_credential_authentication_sso_client_secret_id\" + idPrefix}  data-tooltip-id={\"services_credential_authentication_sso_client_secret_tooltip_id\" + idPrefix}  labelText=\"Client Secret\" onChange={props.updateservices_credential_authentication_sso_client_secret}/>\n          <ReactTooltip id={\"services_credential_authentication_sso_client_secret_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The client identifier to use during the OAuth client credential flow.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_authentication_sso_endpoint}  id={\"services_credential_authentication_sso_endpoint_id\" + idPrefix}  data-tooltip-id={\"services_credential_authentication_sso_endpoint_tooltip_id\" + idPrefix}  labelText=\"Endpoint\" onChange={props.updateservices_credential_authentication_sso_endpoint}/>\n          <ReactTooltip id={\"services_credential_authentication_sso_endpoint_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The endpoint which will be called to obtain an access token which is used in requests to the credential service.<br/>The endpoint should conform to the OAuth client credential flow (OAuth 2.0 RFC 6749, section 4.4).<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n                <Select\n                  value={props.services_credential_authentication_sso_payload}\n                   id={\"services_credential_authentication_sso_payload_id\" + idPrefix}\n data-tooltip-id={\"services_credential_authentication_sso_payload_tooltip_id\" + idPrefix}                   labelText=\"Payload\"\n                  onChange={props.updateservices_credential_authentication_sso_payload}>\n                  <SelectItem text=\"\" value=\"\" />\n                  <SelectItem text=\"basic\" value=\"basic\" />\n                  <SelectItem text=\"form\" value=\"form\" />\n                </Select>\n          <ReactTooltip id={\"services_credential_authentication_sso_payload_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>Specifies how the client id and secret will be posted to the authentication endpoint.<br/>  - If this value is `form`, the client id and secret will be included in forms POST data.<br/>  - If this value is `basic`, a basic authentication header will be constructed using the client id and secret.<br/></div></ReactTooltip>\n                </div>\n\n                </div>\n\n                </div>\n\n                </div>\n                </div>\n                  <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n                    <Button onClick={() => { handleClose(idPrefix,  objectName,  tbName, parentIdPrefix,  doClose); }}>Cancel</Button>\n                    <Button disabled={(!props.services_credential_name || !props.services_credential_name_valid)} onClick={() => { handleSave(loadGrid, idPrefix,  objectName,  tbName, parentIdPrefix,  doClose); }}>Save</Button>\n                  </div>\n              </TabPanel>\n              <TabPanel style={{width:'100%', overflow:'auto'}} tabId={\"General_tab\" + idPrefix}>\n                <div className=\"iag_sublevel_tabs\" style={{height:'60vh', overflow:'auto'}}>\n                <div className= {\"iag_form_elem iag_tab_heading services_credential_div\" + idPrefix}>\n                  <span className=\"iag_breadcrumb\">Services / Credential : </span><br/>                  <h2>General Settings</h2><hr/>\n                  Specifies the general settings associated with this component\n                </div>\n                <div className={\"iag--simple-div services_credential_div\" + idPrefix}>\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_enc_key}  id={\"services_credential_enc_key_id\" + idPrefix}  data-tooltip-id={\"services_credential_enc_key_tooltip_id\" + idPrefix}  labelText=\"Encryption Key\" onChange={props.updateservices_credential_enc_key}/>\n          <ReactTooltip id={\"services_credential_enc_key_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The key which will be used to encrypt and decrypt credential data. This key should be an RSA or ECDSA key for which the private and public parts are available.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_host}  id={\"services_credential_host_id\" + idPrefix}  data-tooltip-id={\"services_credential_host_tooltip_id\" + idPrefix}  labelText=\"Host\" onChange={props.updateservices_credential_host}/>\n          <ReactTooltip id={\"services_credential_host_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The hostname of the endpoint where the credentials will be retrieved from.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_name}  id={\"services_credential_name_id\" + idPrefix}  data-tooltip-id={\"services_credential_name_tooltip_id\" + idPrefix}  labelText=\"Name *\" onChange={props.updateservices_credential_name}/>\n          <ReactTooltip id={\"services_credential_name_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The name which is associated with this credential service.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_port}  id={\"services_credential_port_id\" + idPrefix}  data-tooltip-id={\"services_credential_port_tooltip_id\" + idPrefix}  labelText=\"Port\" onChange={props.updateservices_credential_port}/>\n          <ReactTooltip id={\"services_credential_port_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The port of the endpoint where the credentials will be retrieved from.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_proxy}  id={\"services_credential_proxy_id\" + idPrefix}  data-tooltip-id={\"services_credential_proxy_tooltip_id\" + idPrefix}  labelText=\"Proxy\" onChange={props.updateservices_credential_proxy}/>\n          <ReactTooltip id={\"services_credential_proxy_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The proxy server which will be used when connecting to the credential service. The configuration entry should be of the form: `&lt;server&gt;:&lt;port&gt;`<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_url_pattern}  id={\"services_credential_url_pattern_id\" + idPrefix}  data-tooltip-id={\"services_credential_url_pattern_tooltip_id\" + idPrefix}  labelText=\"URL Pattern\" onChange={props.updateservices_credential_url_pattern}/>\n          <ReactTooltip id={\"services_credential_url_pattern_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The path of the endpoint where the credentials will be retrieved from. This must contain the &#123;user} and &#123;resource} macros. When communicating with the credential service, IAG will substitute `&#123;resource}` for the resource name provided in the configuration which refers to this credential service.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_user_attribute}  id={\"services_credential_user_attribute_id\" + idPrefix}  data-tooltip-id={\"services_credential_user_attribute_tooltip_id\" + idPrefix}  labelText=\"User Attribute\" onChange={props.updateservices_credential_user_attribute}/>\n          <ReactTooltip id={\"services_credential_user_attribute_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The name of the credential attribute which is used to populate the &#123;user} macro in the URL used when communicating with the credential service.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n                <Select\n                  value={props.services_credential_user_attribute_encoding}\n                   id={\"services_credential_user_attribute_encoding_id\" + idPrefix}\n data-tooltip-id={\"services_credential_user_attribute_encoding_tooltip_id\" + idPrefix}                   labelText=\"User Attribute Encoding\"\n                  onChange={props.updateservices_credential_user_attribute_encoding}>\n                  <SelectItem text=\"\" value=\"\" />\n                  <SelectItem text=\"url\" value=\"url\" />\n                  <SelectItem text=\"base64url\" value=\"base64url\" />\n                </Select>\n          <ReactTooltip id={\"services_credential_user_attribute_encoding_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The type of encoding to perform on the user_attribute for inclusion in the URL to communicate with the credential service.<br/>  - If this value is `url`, the user attribute value will be URL Encoded.<br/>  - If this value is `base64url`, the user attribute value will be converted to lower case and Base64 Encoded for URL.<br/></div></ReactTooltip>\n                </div>\n\n                </div>\n                </div>\n                  <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n                    <Button onClick={() => { handleClose(idPrefix,  objectName,  tbName, parentIdPrefix,  doClose); }}>Cancel</Button>\n                    <Button disabled={(!props.services_credential_name || !props.services_credential_name_valid)} onClick={() => { handleSave(loadGrid, idPrefix,  objectName,  tbName, parentIdPrefix,  doClose); }}>Save</Button>\n                  </div>\n              </TabPanel>\n              <TabPanel style={{width:'100%', overflow:'auto'}} tabId={\"ssl_tab\" + idPrefix}>\n                <div className=\"iag_sublevel_tabs\" style={{height:'60vh', overflow:'auto'}}>\n                <div className= {\"iag_form_elem iag_tab_heading services_credential_div\" + idPrefix}>\n                  <span className=\"iag_breadcrumb\">Services / Credential : </span><br/>                  <h2>SSL Settings</h2><hr/>\n                  SSL settings for the credential service connection.\n                </div>\n                <div className={\"iag--simple-div services_credential_div\" + idPrefix}>\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n  <h3>SSL</h3><hr/>\n</div>\n                <div className=\"iag-wdgt-container\" style={{marginLeft:\"20px\",marginBottom:\"10px\"}}>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n  <h3 tabIndex=\"0\"  data-tooltip-id={\"services_credential_ssl_certificate_tooltip_id\" + idPrefix} >Certificate</h3><hr/>\n</div>\n          <ReactTooltip id={\"services_credential_ssl_certificate_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>PEM based personal certificate files which will be used when communicating with the resource server.  These certificate files should include the private key, a certificate signed with the private key, and the signer certificate or signer certificate chain (if required).<br/></div></ReactTooltip>\n\n                <div id={\"services_credential_ssl_certificateTableDiv\" + idPrefix} style={{marginLeft:\"10px\",marginBottom:\"10px\"}}>\n                  <div className={\"iag_form_elem services_credential_div\" + idPrefix}>\n                    <DataTable id={\"services_credential_ssl_certificateTable\" + idPrefix} isSortable\n                        headers={services_credential_ssl_certificateheaderData}\n                        rows={services_credential_ssl_certificaterowData.services_credential_ssl_certificate}\n                        render={({\n                          rows,\n                          headers,\n                          getHeaderProps,\n                          getRowProps,\n                          getTableProps,\n                          getToolbarProps,\n                          onInputChange,\n                          getTableContainerProps\n                    }) => (\n                      <TableContainer>\n                        <TableToolbar aria-label=\"data table toolbar\">\n                          <TableToolbarContent>\n                            <Button onClick={() => {services_credential_ssl_certificatehandleAdd(idPrefix, [setservices_credential_ssl_certificate_certificate(''),    setservices_credential_ssl_certificate_certificate_valid(true),]);}}>Add</Button>\n                          </TableToolbarContent>\n                        </TableToolbar>\n                        <Table size='normal' {...getTableProps()}>\n                          <TableHead>\n                            <TableRow>\n                              {headers.map(header => (\n                                <TableHeader {...getHeaderProps({ header })}>\n                                  {header.header}\n                                </TableHeader>\n                              ))}\n                              <TableHeader>\n                                  Actions\n                              </TableHeader>\n                            </TableRow>\n                          </TableHead>\n                          <TableBody>\n                            {rows.map(row => (\n                              <TableRow key={row.id}>\n                                {row.cells.map(cell => (\n                                  <TableCell key={cell.id}>{cell.value}</TableCell>\n                                ))}\n                                <TableCell>\n                                  <Suspense fallback={<div></div>}>\n                                    <ServicescredentialsslcertificateDeleteModal row={row} loadGrid={services_credential_ssl_certificateloadGrid} />\n                                  </Suspense>\n                                  <Suspense fallback={<div></div>}>\n                                    <ServicescredentialsslcertificateEdit  data={services_credential_ssl_certificaterowData.services_credential_ssl_certificate} setData={setDataMain} row={row} loadGrid={services_credential_ssl_certificateloadGrid} dataLoad={dataLoad} editing={true} name={\"services_credential_ssl_certificate\"} idPrefix={idPrefix + \"_edit\"} parentIdPrefix={idPrefix} \n            updateservices_credential_ssl_certificate_certificate={updateservices_credential_ssl_certificate_certificate} services_credential_ssl_certificate_certificate={services_credential_ssl_certificate_certificate}\n            services_credential_ssl_certificate_certificate_valid={services_credential_ssl_certificate_certificate_valid}\n            services_credential_ssl_certificate_certificate_invalid_text={services_credential_ssl_certificate_certificate_invalid_text}\n                                    />\n                                  </Suspense>\n                                </TableCell>\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </TableContainer>)}\n                    />\n                  </div>\n                </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_ssl_server_dn}  id={\"services_credential_ssl_server_dn_id\" + idPrefix}  data-tooltip-id={\"services_credential_ssl_server_dn_tooltip_id\" + idPrefix}  labelText=\"Server DN\" onChange={props.updateservices_credential_ssl_server_dn}/>\n          <ReactTooltip id={\"services_credential_ssl_server_dn_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>Specifies the accepted DN of the certificate presented by the credential service. If this entry is empty, any DN will be accepted.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_ssl_sni}  id={\"services_credential_ssl_sni_id\" + idPrefix}  data-tooltip-id={\"services_credential_ssl_sni_tooltip_id\" + idPrefix}  labelText=\"SNI\" onChange={props.updateservices_credential_ssl_sni}/>\n          <ReactTooltip id={\"services_credential_ssl_sni_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The server name (SNI) which will be indicated when establishing a connection to the credential service. If this entry is empty, no name will be indicated.<br/></div></ReactTooltip>\n        </div>\n\n                </div>\n\n                </div>\n                </div>\n                  <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n                    <Button onClick={() => { handleClose(idPrefix,  objectName,  tbName, parentIdPrefix,  doClose); }}>Cancel</Button>\n                    <Button disabled={(!props.services_credential_name || !props.services_credential_name_valid)} onClick={() => { handleSave(loadGrid, idPrefix,  objectName,  tbName, parentIdPrefix,  doClose); }}>Save</Button>\n                  </div>\n              </TabPanel>\n          </Tabs>\n                  <Suspense fallback={<div></div>}>\n                    <ServicescredentialsslcertificateAdd loadGrid={services_credential_ssl_certificateloadGrid} doClose={() => {closeAdd(idPrefix);}} idPrefix={idPrefix} \n            updateservices_credential_ssl_certificate_certificate={updateservices_credential_ssl_certificate_certificate} services_credential_ssl_certificate_certificate={services_credential_ssl_certificate_certificate}\n            services_credential_ssl_certificate_certificate_valid={services_credential_ssl_certificate_certificate_valid}\n            services_credential_ssl_certificate_certificate_invalid_text={services_credential_ssl_certificate_certificate_invalid_text}\n                    />\n                  </Suspense>\n                  <Suspense fallback={<div></div>}>\n                    <ServicescredentialsslcertificateEdit  loadGrid={services_credential_ssl_certificateloadGrid} dataLoad={dataLoad} name={\"services_credential_ssl_certificate\"} idPrefix={idPrefix + \"_edit\"} parentIdPrefix={idPrefix} \n            updateservices_credential_ssl_certificate_certificate={updateservices_credential_ssl_certificate_certificate} services_credential_ssl_certificate_certificate={services_credential_ssl_certificate_certificate}\n            services_credential_ssl_certificate_certificate_valid={services_credential_ssl_certificate_certificate_valid}\n            services_credential_ssl_certificate_certificate_invalid_text={services_credential_ssl_certificate_certificate_invalid_text}\n                    />\n                  </Suspense>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Services_credentialEdit;\n","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nvar _excluded = [\"className\", \"iconTitle\", \"description\", \"fill\", \"fillRule\", \"height\", \"name\", \"icon\", \"role\", \"style\", \"width\", \"iconRef\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport invariant from 'invariant';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport icons from 'carbon-icons';\n/**\n * The icons list object from `carbon-icons`.\n * @type {object}\n */\n\nvar iconsList = icons;\n/**\n * Returns a single icon Object\n * @param {string} name - \"name\" property of icon\n * @param {object} [iconsObj=icons] - JSON Array of Objects\n * @example\n * // Returns a single icon Object\n * this.findIcon('copy-code', icons.json);\n */\n\nexport function findIcon(name) {\n  var iconsObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : iconsList;\n  var icon = iconsObj.filter(function (obj) {\n    return obj.name === name;\n  });\n\n  if (icon.length === 0) {\n    return false;\n  } else if (icon.length > 1) {\n    throw new Error('Multiple icons found...');\n  } else {\n    return icon[0];\n  }\n}\n/**\n * Sets the icons list object from `carbon-icons`.\n * Doing so instead of having this module directly import `carbon-icons`\n * avoids the icons list being included in applications' bundles if only limited set of icons is in use.\n * @param {object} list The icons list from `carbon-icons`.\n */\n\nexport function setIconsList(list) {\n  iconsList = list;\n}\n/**\n * Returns \"svgData\" Object\n * @param {string} iconName - \"name\" property of icon\n * @example\n * // Returns svgData Object for given iconName\n * this.getSvgData('copy-code');\n */\n\nexport function getSvgData(iconName) {\n  var icon = findIcon(iconName);\n  return icon ? icon.svgData : false;\n}\n/**\n * @param {object} svgData - JSON Object for an SVG icon\n * @returns {ReactElement} Elements/Nodes for SVG\n * @example\n * // Returns SVG elements\n * const svgData = getSvgData('copy-code');\n * svgShapes(svgData);\n */\n\nexport function svgShapes(svgData) {\n  var svgElements = Object.keys(svgData).filter(function (key) {\n    return svgData[key];\n  }).map(function (svgProp) {\n    var data = svgData[svgProp];\n\n    if (svgProp === 'circles') {\n      return data.map(function (circle, index) {\n        var circleProps = {\n          cx: circle.cx,\n          cy: circle.cy,\n          r: circle.r,\n          key: \"circle\".concat(index)\n        };\n        return /*#__PURE__*/React.createElement(\"circle\", _extends({\n          key: index\n        }, circleProps));\n      });\n    } else if (svgProp === 'paths') {\n      return data.map(function (path, index) {\n        return /*#__PURE__*/React.createElement(\"path\", {\n          d: path.d,\n          key: \"key\".concat(index)\n        });\n      });\n    } else if (svgProp === 'polygons') {\n      return data.map(function (polygon, index) {\n        return /*#__PURE__*/React.createElement(\"polygon\", {\n          points: polygon.points,\n          key: \"key\".concat(index)\n        });\n      });\n    }\n\n    return '';\n  });\n  return svgElements;\n}\nexport function isPrefixed(name) {\n  if (process.env.NODE_ENV !== \"production\") {\n    !(typeof name === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, '[Icon] icon name is missing. You likely forgot to specify the icon, ' + 'or are using older (pre-`7.x`) version of `carbon-icons` library. ' + 'To specify the icon, use either `icon` (data) or `name` (icon name) properties.') : invariant(false) : void 0;\n  }\n\n  return name && name.split('--')[0] === 'icon';\n}\n\nvar Icon = function Icon(_ref) {\n  var className = _ref.className,\n      iconTitle = _ref.iconTitle,\n      description = _ref.description,\n      fill = _ref.fill,\n      fillRule = _ref.fillRule,\n      height = _ref.height,\n      name = _ref.name,\n      icon = _ref.icon,\n      role = _ref.role,\n      style = _ref.style,\n      width = _ref.width,\n      iconRef = _ref.iconRef,\n      other = _objectWithoutProperties(_ref, _excluded);\n\n  var props = _objectSpread({\n    className: className,\n    fill: fill,\n    fillRule: fillRule,\n    height: height || icon.height,\n    name: isPrefixed ? name : \"icon--\".concat(name),\n    role: role,\n    style: style,\n    viewBox: icon.viewBox,\n    width: width || icon.width,\n    ref: iconRef\n  }, other);\n\n  var svgContent = icon ? svgShapes(icon.svgData) : '';\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({}, props, {\n    \"aria-label\": description\n  }), /*#__PURE__*/React.createElement(\"title\", null, typeof iconTitle === 'undefined' ? description : iconTitle), svgContent);\n};\n\nIcon.propTypes = {\n  /**\n   * The CSS class name.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon description.\n   */\n  description: PropTypes.string.isRequired,\n\n  /**\n   * The `<svg>` `fill` attribute.\n   */\n  fill: PropTypes.string,\n\n  /**\n   * The `<svg>` `fillRule` attribute.\n   */\n  fillRule: PropTypes.string,\n\n  /**\n   * The `<svg>` `height` attribute.\n   */\n  height: PropTypes.string,\n\n  /**\n   * The icon data.\n   */\n  icon: PropTypes.shape({\n    width: PropTypes.string,\n    height: PropTypes.string,\n    viewBox: PropTypes.string.isRequired,\n    svgData: PropTypes.object.isRequired\n  }),\n\n  /**\n   * The `ref` callback for the icon.\n   */\n  iconRef: PropTypes.func,\n\n  /**\n   * The icon title.\n   */\n  iconTitle: PropTypes.string,\n\n  /**\n   * The name of the icon.\n   */\n  name: PropTypes.string,\n\n  /**\n   * The `role` attribute.\n   */\n  role: PropTypes.string,\n\n  /**\n   * The CSS styles.\n   */\n  style: PropTypes.object,\n\n  /**\n   * The `<svg>` `viewbox` attribute.\n   */\n  viewBox: PropTypes.string,\n\n  /**\n   * The `<svg>` `width` attribute.\n   */\n  width: PropTypes.string\n};\nIcon.defaultProps = {\n  fillRule: 'evenodd',\n  role: 'img'\n};\nexport { icons };\nexport default Icon;"],"names":["ServicescredentialsslcertificateDeleteModal","lazy","ServicescredentialsslcertificateAdd","ServicescredentialsslcertificateEdit","handleChange","handleSave","loadGrid","idPrefix","objectName","tbName","parentIdPrefix","doClose","undefined","json","document","getElementById","value","endsWith","services_credential_ssl_certificaterowData","services_credential_ssl_certificate","handleClose","handleAdd","rowId","dataLoad","loadGrids","data","setData","oName","window","i","length","pName","slice","style","display","updateStyle","closeAdd","services_credential_ssl_certificateheaderData","header","key","services_credential_ssl_certificatehandleAdd","clearFields","eval","getEditData","yamlText","iagyaml","safeLoad","name","ssl","certificate","newItem","push","i2","id","services","credential","services_credential","Services_credentialEdit","props","row","toolbarName","setservices_credential_ssl_certificate","React","fetchedservices_credential_ssl_certificate","setFetchedservices_credential_ssl_certificate","services_credential_ssl_certificateloadGrid","async","services_credential_ssl_certificate_certificate","add","attrs","tempId","services_credential_ssl_certificateediting","services_credential_ssl_certificaterowId","newId","e","console","log","services_credential_authentication_access_token_token","setservices_credential_authentication_access_token_token","useState","updateservices_credential_authentication_access_token_token","useCallback","evt","target","services_credential_authentication_ba_password","setservices_credential_authentication_ba_password","updateservices_credential_authentication_ba_password","services_credential_authentication_ba_username","setservices_credential_authentication_ba_username","updateservices_credential_authentication_ba_username","services_credential_authentication_sso_client_id","setservices_credential_authentication_sso_client_id","updateservices_credential_authentication_sso_client_id","services_credential_authentication_sso_client_secret","setservices_credential_authentication_sso_client_secret","updateservices_credential_authentication_sso_client_secret","services_credential_authentication_sso_endpoint","setservices_credential_authentication_sso_endpoint","updateservices_credential_authentication_sso_endpoint","services_credential_authentication_sso_payload","setservices_credential_authentication_sso_payload","updateservices_credential_authentication_sso_payload","services_credential_enc_key","setservices_credential_enc_key","updateservices_credential_enc_key","services_credential_host","setservices_credential_host","updateservices_credential_host","services_credential_name","setservices_credential_name","updateservices_credential_name","services_credential_port","setservices_credential_port","updateservices_credential_port","services_credential_proxy","setservices_credential_proxy","updateservices_credential_proxy","setservices_credential_ssl_certificate_certificate","updateservices_credential_ssl_certificate_certificate","services_credential_ssl_certificate_certificate_valid","setservices_credential_ssl_certificate_certificate_valid","services_credential_ssl_certificate_certificate_invalid_text","setservices_credential_ssl_certificate_certificate_invalid_text","services_credential_ssl_server_dn","setservices_credential_ssl_server_dn","updateservices_credential_ssl_server_dn","services_credential_ssl_sni","setservices_credential_ssl_sni","updateservices_credential_ssl_sni","services_credential_url_pattern","setservices_credential_url_pattern","updateservices_credential_url_pattern","services_credential_user_attribute","setservices_credential_user_attribute","updateservices_credential_user_attribute","services_credential_user_attribute_encoding","setservices_credential_user_attribute_encoding","updateservices_credential_user_attribute_encoding","fetcheddata","setFetcheddata","setDataMain","functionName","editing","_jsx","Icon","_objectSpread","editProps","editIcon","onClick","title","children","_jsxs","className","Tabs","defaultTab","vertical","overflow","TabList","Tab","tabFor","TabPanel","width","tabId","height","Collapsible","tabIndex","trigger","marginLeft","marginBottom","TextInput","labelText","onChange","ReactTooltip","clickable","place","effect","maxWidth","Select","SelectItem","text","Button","disabled","services_credential_name_valid","DataTable","isSortable","headers","rows","render","_ref","getHeaderProps","getRowProps","getTableProps","getToolbarProps","onInputChange","getTableContainerProps","TableContainer","TableToolbar","TableToolbarContent","Table","size","TableHead","TableRow","map","TableHeader","TableBody","cells","cell","TableCell","Suspense","fallback","_excluded","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","apply","isPrefixed","split","svgData","iconTitle","description","fill","fillRule","icon","role","iconRef","other","_objectWithoutProperties","arguments","source","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","concat","viewBox","ref","svgContent","svgProp","circle","index","circleProps","cx","cy","r","_extends","path","d","polygon","points","propTypes","PropTypes","isRequired","defaultProps"],"sourceRoot":""}