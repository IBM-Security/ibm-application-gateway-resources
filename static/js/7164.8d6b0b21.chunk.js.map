{"version":3,"file":"static/js/7164.8d6b0b21.chunk.js","mappings":"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","sources":["content/servicesPage/serviceskerberosrealmsAdd.js"],"sourcesContent":["import React, { useCallback, useState, lazy, Suspense } from 'react';\nimport {\n  Button,\n  TextInput,\n  NumberInput,\n  Select,\n  SelectItem,\n  Checkbox,\n  DataTable,\n  TableRow,\n  TableHead,\n  TableHeader,\n  TableContainer,\n  TableCell,\n  Table,\n  TableBody,\n  TableToolbar,\n  TableToolbarContent,\n} from 'carbon-components-react';\n\nimport Collapsible from 'react-collapsible';\nimport { Tabs, Tab, TabPanel, TabList } from 'react-web-tabs';\nimport { Tooltip as ReactTooltip } from \"react-tooltip\";\n\nimport { safeLoad, getDivHeight, jsonToYaml, updateStyle, updateStyle2, validateField, toggleDescription } from '../../helpers';\n\n\nconst ServiceskerberosrealmspropertiesDeleteModal = lazy(() => import('./serviceskerberosrealmspropertiesDeleteModal'));\nconst ServiceskerberosrealmspropertiesAdd = lazy(() => import('./serviceskerberosrealmspropertiesAdd'));\nconst ServiceskerberosrealmspropertiesEdit = lazy(() => import('./serviceskerberosrealmspropertiesEdit'));\n\n\n  const handleChange = () => {\n  };\n\n  const handleSave = (loadGrid, idPrefix, doClose) => {\n\n    if(idPrefix === undefined) idPrefix = \"\";\n\n    var json = {};\n      \n    if(document.getElementById(\"services_kerberos_realms_hostname_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_kerberos_realms_hostname\"] = document.getElementById(\"services_kerberos_realms_hostname_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_kerberos_realms_kdc_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_kerberos_realms_kdc\"] = document.getElementById(\"services_kerberos_realms_kdc_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_kerberos_realms_name_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_kerberos_realms_name\"] = document.getElementById(\"services_kerberos_realms_name_id\" + idPrefix).value;\n    }\n    json[\"services_kerberos_realms_properties\"] = services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties;\n      \n    loadGrid( json[\"services_kerberos_realms_hostname\"], json[\"services_kerberos_realms_kdc\"], json[\"services_kerberos_realms_name\"], json[\"services_kerberos_realms_properties\"], true); \n\n    handleClose(idPrefix, doClose);\n  };\n\n  const handleAdd = (setservices_kerberos_realms_properties, idPrefix, doAdd, doClose) => {\n    if(idPrefix === undefined) idPrefix = \"\";\n\n\n    document.getElementById(\"services_kerberos_realms_hostname_id\").value = \"\";\n    document.getElementById(\"services_kerberos_realms_kdc_id\").value = \"\";\n    document.getElementById(\"services_kerberos_realms_name_id\").value = \"\";\n    services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties = []\n    setservices_kerberos_realms_properties(services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties);\n\n\n    if(doAdd) {\n      doAdd();\n    }\n\n    handleClose(idPrefix,  doClose);\n  };\n\n  const handleClose = (idPrefix, doClose) => {\n    updateStyle(\"services_div\" + idPrefix, \"display\", \"block\");\n    document.getElementById(\"addserviceskerberos_realmsPage\" + idPrefix).style.display = \"none\";\n\n      if(doClose) {\n        doClose();\n      }\n  };\n\n  const closeAdd = (idPrefix) => {\n      if(idPrefix === undefined) idPrefix = \"\";\n\n      updateStyle(\"services_kerberos_realms_div\" + idPrefix, \"display\", \"block\");\n      document.getElementById(\"services_kerberos_realms_tab\" + idPrefix).style.display = \"flex\";\n\n  };\n\nconst services_kerberos_realms_propertiesheaderData = [\n    {\n    header: 'Name',\n    key: 'name',\n  },\n{\n    header: 'Value',\n    key: 'value',\n  },\n\n];\n\nconst services_kerberos_realms_propertiesrowData = {services_kerberos_realms_properties: []};\n\nconst services_kerberos_realms_propertieshandleAdd = (idPrefix, clearFields) => {\n    if(idPrefix === undefined) idPrefix = \"\";\n\n    // Set the fields to empty\n    if(clearFields) {\n      for(var i = 0; i < clearFields.length; i++) {\n        eval(clearFields[i]);\n      }\n    }\n\n    document.getElementById(\"services_kerberos_realms_properties_name_id\" + idPrefix).value = \"\";\n    document.getElementById(\"services_kerberos_realms_properties_value_id\" + idPrefix).value = \"\";\n    // Hide the tab page\n    updateStyle(\"services_kerberos_realms_div\" + idPrefix, \"display\", \"none\");\n    // Show the add page\n    document.getElementById(\"addserviceskerberosrealms_propertiesPage\" + idPrefix).style.display = \"block\";\n    // Hide the remaining fields\n    document.getElementById(\"services_kerberos_realms_tab\" + idPrefix).style.display = \"none\";\n\n  };\n\nconst Serviceskerberos_realmsAdd = (props) => {\n\n    var row = props.row;\n    const loadGrid = props.loadGrid;\n    const doClose = props.doClose;\n    const idPrefix = (props.idPrefix)?props.idPrefix:\"\";\n\n    const [services_kerberos_realms_properties, setservices_kerberos_realms_properties] = React.useState([]);\n    const [fetchedservices_kerberos_realms_properties, setFetchedservices_kerberos_realms_properties] = React.useState(false);\n\n    React.useEffect(() => {\n      services_kerberos_realms_propertiesloadGrid();\n    }, [fetchedservices_kerberos_realms_properties]);\n\n    const services_kerberos_realms_propertiesloadGrid = React.useCallback(async (services_kerberos_realms_properties_name, services_kerberos_realms_properties_value, add) => {\n      try {\n        var attrs = [];\n        if(services_kerberos_realms_properties_name) {\n          if(add) {\n            for(var i = 0; i < services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties.length; i++) {\n              var tempId = ((services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties[i].name)?services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties[i].name:\"\") + \"\";\n              if((window.services_kerberos_realms_propertiesediting != true && window.services_kerberos_realms_propertiesediting != \"true\") || tempId != window.services_kerberos_realms_propertiesrowId) {\n                attrs.push(services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties[i]);\n              }\n            }\n            var newId = ((services_kerberos_realms_properties_name)?services_kerberos_realms_properties_name:\"\") + \"\";\n            attrs.push({\n              id: newId,\n              name: services_kerberos_realms_properties_name,\nvalue: services_kerberos_realms_properties_value,\n            });\n          } else {\n            // Must be a delete\n            for(var i = 0; i < services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties.length; i++) {\n              if(services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties[i].name !== services_kerberos_realms_properties_name ) {\n                attrs.push(services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties[i]);\n              }\n            }\n          }\n        } else {\n          attrs = services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties;\n        }\n        services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties = attrs;\n        const data = {services_kerberos_realms_properties: attrs};\n        setservices_kerberos_realms_properties(data.services_kerberos_realms_properties);\n\n        if(services_kerberos_realms_properties_name !== undefined && services_kerberos_realms_properties_name !== null ) {\n            handleChange();\n\n        }\n\n      } catch (e) {\n        console.log(e);\n      }\n      return true;\n    });\n\n\n\n    const [services_kerberos_realms_hostname, setservices_kerberos_realms_hostname] = useState(''),\n    updateservices_kerberos_realms_hostname = useCallback((evt) => setservices_kerberos_realms_hostname(evt.target.value), []);\n\n    const [services_kerberos_realms_kdc, setservices_kerberos_realms_kdc] = useState(''),\n    updateservices_kerberos_realms_kdc = useCallback((evt) => setservices_kerberos_realms_kdc(evt.target.value), []);\n\n    const [services_kerberos_realms_name, setservices_kerberos_realms_name] = useState(''),\n    updateservices_kerberos_realms_name = useCallback((evt) => setservices_kerberos_realms_name(evt.target.value), []);\n\n    const [services_kerberos_realms_properties_name, setservices_kerberos_realms_properties_name] = useState(''),\n    updateservices_kerberos_realms_properties_name = useCallback((evt) => {\n      setservices_kerberos_realms_properties_name(evt.target.value);\n      var tempId = evt.target.value;\n      validateField(services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties, setservices_kerberos_realms_properties_name_valid, setservices_kerberos_realms_properties_name_invalid_text, \"Services Kerberos Realms Properties\", \"name\", tempId);\n    }, []);\n\n    const [services_kerberos_realms_properties_name_valid, setservices_kerberos_realms_properties_name_valid] = useState(true);\n    const [services_kerberos_realms_properties_name_invalid_text, setservices_kerberos_realms_properties_name_invalid_text] = useState(\"\");\n\n\n    const [services_kerberos_realms_properties_value, setservices_kerberos_realms_properties_value] = useState(''),\n    updateservices_kerberos_realms_properties_value = useCallback((evt) => setservices_kerberos_realms_properties_value(evt.target.value), []);\n\n\n    const [fetcheddata, setFetcheddata] = React.useState(false);\n    React.useEffect(() => {\n      dataLoad();\n    }, [fetcheddata]);\n    const dataLoad = () => {\n\n      for(var i = 0; i < services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties.length; i++) {\n        if(services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties[i].id === window.services_kerberos_realms_propertiesrowId) {\n        setservices_kerberos_realms_properties_name((services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties[i] !== undefined && services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties[i].name !== undefined )?services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties[i].name:\"\");\n        setservices_kerberos_realms_properties_value((services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties[i] !== undefined && services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties[i].value !== undefined )?services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties[i].value:\"\");\n        }\n      }\n\n\n      return true;\n    };\n\n    const setDataMain = (functionName, data) => {\n      if(functionName && data) {\n        eval(functionName)(data);\n      }\n    };\n\n    return (\n      <div>\n        \n        <div id={'addserviceskerberos_realmsPage' + idPrefix} style={{display:'none'}} className=\"bx--col bx--no-gutter\">\n\n          <Tabs id= {\"services_kerberos_realms_tab\" + idPrefix} defaultTab={\"General_tab\" + idPrefix} vertical className=\"vertical-tabs\" style={{overflow:'auto'}}>\n              <TabList>\n                <Tab tabFor={\"General_tab\" + idPrefix}>General</Tab>\n                <Tab tabFor={\"properties_tab\" + idPrefix}>Properties</Tab>\n              </TabList>\n              <TabPanel style={{width:'100%', overflow:'auto'}} tabId={\"General_tab\" + idPrefix}>\n                <div className=\"iag_sublevel_tabs\" style={{height:'60vh', overflow:'auto'}}>\n                <div className= {\"iag_form_elem iag_tab_heading services_kerberos_realms_div\" + idPrefix}>\n                  <span className=\"iag_breadcrumb\">Services / Kerberos / Realms : </span><br/>                  <h2>General Settings</h2><hr/>\n                  Specifies the general settings associated with this component\n                </div>\n                <div className={\"iag--simple-div services_kerberos_realms_div\" + idPrefix}>\n                <div className= {\"iag_form_elem services_kerberos_realms_div\" + idPrefix}>\n  <h3>Realms</h3><hr/>\n</div>\n                <div className=\"iag-wdgt-container\" style={{marginLeft:\"20px\",marginBottom:\"10px\"}}>\n\n                <div className= {\"iag_form_elem services_kerberos_realms_div\" + idPrefix}>\n          <TextInput  value={props.services_kerberos_realms_hostname}  id={\"services_kerberos_realms_hostname_id\" + idPrefix}  data-tooltip-id={\"services_kerberos_realms_hostname_tooltip_id\" + idPrefix}  labelText=\"Hostname\" onChange={props.updateservices_kerberos_realms_hostname}/>\n          <ReactTooltip id={\"services_kerberos_realms_hostname_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The hostname for this realm.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_kerberos_realms_div\" + idPrefix}>\n          <TextInput  value={props.services_kerberos_realms_kdc}  id={\"services_kerberos_realms_kdc_id\" + idPrefix}  data-tooltip-id={\"services_kerberos_realms_kdc_tooltip_id\" + idPrefix}  labelText=\"KDC\" onChange={props.updateservices_kerberos_realms_kdc}/>\n          <ReactTooltip id={\"services_kerberos_realms_kdc_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The name or address of a host running a KDC for that realm. An optional port number, separated from the hostname by a colon, may be included.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_kerberos_realms_div\" + idPrefix}>\n          <TextInput  invalid={!props.services_kerberos_realms_name_valid}  invalidText={props.services_kerberos_realms_name_invalid_text}  value={props.services_kerberos_realms_name}  id={\"services_kerberos_realms_name_id\" + idPrefix}  data-tooltip-id={\"services_kerberos_realms_name_tooltip_id\" + idPrefix}  labelText=\"Name *\" onChange={props.updateservices_kerberos_realms_name}/>\n          <ReactTooltip id={\"services_kerberos_realms_name_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The name of the Kerberos Realm being configured.<br/></div></ReactTooltip>\n        </div>\n\n                </div>\n\n                </div>\n                </div>\n                  <div className= {\"iag_form_elem services_kerberos_realms_div\" + idPrefix}>\n                    <Button onClick={() => { handleClose(idPrefix,  doClose); }}>Cancel</Button>\n                    <Button disabled={(!props.services_kerberos_realms_name || !props.services_kerberos_realms_name_valid)} onClick={() => { handleSave(loadGrid, idPrefix,  doClose); }}>Save</Button>\n                  </div>\n              </TabPanel>\n              <TabPanel style={{width:'100%', overflow:'auto'}} tabId={\"properties_tab\" + idPrefix}>\n                <div className=\"iag_sublevel_tabs\" style={{height:'60vh', overflow:'auto'}}>\n                <div className= {\"iag_form_elem iag_tab_heading services_kerberos_realms_div\" + idPrefix}>\n                  <span className=\"iag_breadcrumb\">Services / Kerberos / Realms : </span><br/>                  <h2>Properties Settings</h2><hr/>\n                </div>\n                <div className={\"iag--simple-div services_kerberos_realms_div\" + idPrefix}>\n                <div className= {\"iag_form_elem services_kerberos_realms_div\" + idPrefix}>\n  <h3 tabIndex=\"0\"  data-tooltip-id={\"services_kerberos_realms_properties_tooltip_id\" + idPrefix} >Properties</h3><hr/>\n</div>\n          <ReactTooltip id={\"services_kerberos_realms_properties_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>Advanced additional properties to be added to the Realm configuration. These properties correspond to the properties in the [realms] &lt;realm name&gt; section of krb5.conf.<br/></div></ReactTooltip>\n\n                <div id={\"services_kerberos_realms_propertiesTableDiv\" + idPrefix} style={{marginLeft:\"10px\",marginBottom:\"10px\"}}>\n                  <div className={\"iag_form_elem services_kerberos_realms_div\" + idPrefix}>\n                    <DataTable id={\"services_kerberos_realms_propertiesTable\" + idPrefix} isSortable\n                        headers={services_kerberos_realms_propertiesheaderData}\n                        rows={services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties}\n                        render={({\n                          rows,\n                          headers,\n                          getHeaderProps,\n                          getRowProps,\n                          getTableProps,\n                          getToolbarProps,\n                          onInputChange,\n                          getTableContainerProps\n                    }) => (\n                      <TableContainer>\n                        <TableToolbar aria-label=\"data table toolbar\">\n                          <TableToolbarContent>\n                            <Button onClick={() => {services_kerberos_realms_propertieshandleAdd(idPrefix, [setservices_kerberos_realms_properties_name(''),    setservices_kerberos_realms_properties_name_valid(true),    setservices_kerberos_realms_properties_value(''),]);}}>Add</Button>\n                          </TableToolbarContent>\n                        </TableToolbar>\n                        <Table size='normal' {...getTableProps()}>\n                          <TableHead>\n                            <TableRow>\n                              {headers.map(header => (\n                                <TableHeader {...getHeaderProps({ header })}>\n                                  {header.header}\n                                </TableHeader>\n                              ))}\n                              <TableHeader>\n                                  Actions\n                              </TableHeader>\n                            </TableRow>\n                          </TableHead>\n                          <TableBody>\n                            {rows.map(row => (\n                              <TableRow key={row.id}>\n                                {row.cells.map(cell => (\n                                  <TableCell key={cell.id}>{cell.value}</TableCell>\n                                ))}\n                                <TableCell>\n                                  <Suspense fallback={<div></div>}>\n                                    <ServiceskerberosrealmspropertiesDeleteModal row={row} loadGrid={services_kerberos_realms_propertiesloadGrid} />\n                                  </Suspense>\n                                  <Suspense fallback={<div></div>}>\n                                    <ServiceskerberosrealmspropertiesEdit  data={services_kerberos_realms_propertiesrowData.services_kerberos_realms_properties} setData={setDataMain} row={row} loadGrid={services_kerberos_realms_propertiesloadGrid} dataLoad={dataLoad} editing={true} name={\"services_kerberos_realms_properties\"} idPrefix={idPrefix + \"_add\"} parentIdPrefix={idPrefix} \n            updateservices_kerberos_realms_properties_name={updateservices_kerberos_realms_properties_name} services_kerberos_realms_properties_name={services_kerberos_realms_properties_name}\n            services_kerberos_realms_properties_name_valid={services_kerberos_realms_properties_name_valid}\n            services_kerberos_realms_properties_name_invalid_text={services_kerberos_realms_properties_name_invalid_text}\n            updateservices_kerberos_realms_properties_value={updateservices_kerberos_realms_properties_value} services_kerberos_realms_properties_value={services_kerberos_realms_properties_value}\n                                    />\n                                  </Suspense>\n                                </TableCell>\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </TableContainer>)}\n                    />\n                  </div>\n                </div>\n\n                </div>\n                </div>\n                  <div className= {\"iag_form_elem services_kerberos_realms_div\" + idPrefix}>\n                    <Button onClick={() => { handleClose(idPrefix,  doClose); }}>Cancel</Button>\n                    <Button disabled={(!props.services_kerberos_realms_name || !props.services_kerberos_realms_name_valid)} onClick={() => { handleSave(loadGrid, idPrefix,  doClose); }}>Save</Button>\n                  </div>\n              </TabPanel>\n          </Tabs>\n                  <Suspense fallback={<div></div>}>\n                    <ServiceskerberosrealmspropertiesAdd loadGrid={services_kerberos_realms_propertiesloadGrid} doClose={() => {closeAdd(idPrefix);}} idPrefix={idPrefix} \n            updateservices_kerberos_realms_properties_name={updateservices_kerberos_realms_properties_name} services_kerberos_realms_properties_name={services_kerberos_realms_properties_name}\n            services_kerberos_realms_properties_name_valid={services_kerberos_realms_properties_name_valid}\n            services_kerberos_realms_properties_name_invalid_text={services_kerberos_realms_properties_name_invalid_text}\n            updateservices_kerberos_realms_properties_value={updateservices_kerberos_realms_properties_value} services_kerberos_realms_properties_value={services_kerberos_realms_properties_value}\n                    />\n                  </Suspense>\n                  <Suspense fallback={<div></div>}>\n                    <ServiceskerberosrealmspropertiesEdit  loadGrid={services_kerberos_realms_propertiesloadGrid} dataLoad={dataLoad} name={\"services_kerberos_realms_properties\"} idPrefix={idPrefix + \"_add\"} parentIdPrefix={idPrefix} \n            updateservices_kerberos_realms_properties_name={updateservices_kerberos_realms_properties_name} services_kerberos_realms_properties_name={services_kerberos_realms_properties_name}\n            services_kerberos_realms_properties_name_valid={services_kerberos_realms_properties_name_valid}\n            services_kerberos_realms_properties_name_invalid_text={services_kerberos_realms_properties_name_invalid_text}\n            updateservices_kerberos_realms_properties_value={updateservices_kerberos_realms_properties_value} services_kerberos_realms_properties_value={services_kerberos_realms_properties_value}\n                    />\n                  </Suspense>\n        </div>\n        </div>\n    );\n}\n\nexport default Serviceskerberos_realmsAdd;\n"],"names":["ServiceskerberosrealmspropertiesDeleteModal","lazy","ServiceskerberosrealmspropertiesAdd","ServiceskerberosrealmspropertiesEdit","handleChange","handleSave","loadGrid","idPrefix","doClose","undefined","json","document","getElementById","value","endsWith","services_kerberos_realms_propertiesrowData","services_kerberos_realms_properties","handleClose","handleAdd","setservices_kerberos_realms_properties","doAdd","updateStyle","style","display","closeAdd","services_kerberos_realms_propertiesheaderData","header","key","services_kerberos_realms_propertieshandleAdd","clearFields","i","length","eval","Serviceskerberos_realmsAdd","props","row","React","fetchedservices_kerberos_realms_properties","setFetchedservices_kerberos_realms_properties","services_kerberos_realms_propertiesloadGrid","async","services_kerberos_realms_properties_name","services_kerberos_realms_properties_value","add","attrs","tempId","name","window","services_kerberos_realms_propertiesediting","services_kerberos_realms_propertiesrowId","push","newId","id","e","console","log","services_kerberos_realms_hostname","setservices_kerberos_realms_hostname","useState","updateservices_kerberos_realms_hostname","useCallback","evt","target","services_kerberos_realms_kdc","setservices_kerberos_realms_kdc","updateservices_kerberos_realms_kdc","services_kerberos_realms_name","setservices_kerberos_realms_name","updateservices_kerberos_realms_name","setservices_kerberos_realms_properties_name","updateservices_kerberos_realms_properties_name","validateField","setservices_kerberos_realms_properties_name_valid","setservices_kerberos_realms_properties_name_invalid_text","services_kerberos_realms_properties_name_valid","services_kerberos_realms_properties_name_invalid_text","setservices_kerberos_realms_properties_value","updateservices_kerberos_realms_properties_value","fetcheddata","setFetcheddata","dataLoad","setDataMain","functionName","data","_jsx","children","_jsxs","className","Tabs","defaultTab","vertical","overflow","TabList","Tab","tabFor","TabPanel","width","tabId","height","marginLeft","marginBottom","TextInput","labelText","onChange","ReactTooltip","clickable","place","effect","maxWidth","invalid","services_kerberos_realms_name_valid","invalidText","services_kerberos_realms_name_invalid_text","Button","onClick","disabled","tabIndex","DataTable","isSortable","headers","rows","render","_ref","getHeaderProps","getRowProps","getTableProps","getToolbarProps","onInputChange","getTableContainerProps","TableContainer","TableToolbar","TableToolbarContent","Table","_objectSpread","size","TableHead","TableRow","map","TableHeader","TableBody","cells","cell","TableCell","Suspense","fallback","setData","editing","parentIdPrefix"],"sourceRoot":""}