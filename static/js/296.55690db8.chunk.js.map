{"version":3,"sources":["content/policiesPage/policiescontent_injectionAdd.js"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","this","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","PoliciescontentInjectionpathsDeleteModal","lazy","all","__webpack_require__","bind","PoliciescontentInjectionpathsAdd","PoliciescontentInjectionpathsEdit","handleChange","handleSave","loadGrid","idPrefix","doClose","undefined","json","document","getElementById","endsWith","checked","toString","policies_content_injection_pathsrowData","policies_content_injection_paths","handleClose","handleAdd","setpolicies_content_injection_paths","doAdd","updateStyle","style","display","closeAdd","policies_content_injection_pathsheaderData","header","key","policies_content_injection_pathshandleAdd","clearFields","eval","Policies_content_injectionAdd","props","row","_React$useState","React","useState","_React$useState2","_slicedToArray","_React$useState3","_React$useState4","fetchedpolicies_content_injection_paths","setFetchedpolicies_content_injection_paths","useEffect","policies_content_injection_pathsloadGrid","useCallback","_ref","_asyncToGenerator","_callee","policies_content_injection_paths_paths","add","attrs","tempId","newId","_context","paths","window","policies_content_injection_pathsediting","policies_content_injection_pathsrowId","id","console","log","_x","_x2","apply","arguments","_useState","_useState2","policies_content_injection_content","setpolicies_content_injection_content","updatepolicies_content_injection_content","evt","target","_useState3","_useState4","policies_content_injection_full_line_match","setpolicies_content_injection_full_line_match","updatepolicies_content_injection_full_line_match","_useState5","_useState6","policies_content_injection_location","setpolicies_content_injection_location","updatepolicies_content_injection_location","_useState7","_useState8","policies_content_injection_name","setpolicies_content_injection_name","updatepolicies_content_injection_name","_useState9","_useState10","setpolicies_content_injection_paths_paths","updatepolicies_content_injection_paths_paths","validateField","setpolicies_content_injection_paths_paths_valid","setpolicies_content_injection_paths_paths_invalid_text","_useState11","_useState12","policies_content_injection_paths_paths_valid","_useState13","_useState14","policies_content_injection_paths_paths_invalid_text","_useState15","_useState16","policies_content_injection_replace_match","setpolicies_content_injection_replace_match","updatepolicies_content_injection_replace_match","_React$useState5","_React$useState6","fetcheddata","setFetcheddata","dataLoad","setDataMain","functionName","data","createElement","className","Tabs","defaultTab","vertical","overflow","TabList","Tab","tabFor","TabPanel","width","tabId","height","TextInput","onFocus","ReactTooltip","show","onBlur","hide","data-tip","data-for","labelText","onChange","place","effect","maxWidth","Checkbox","invalid","policies_content_injection_name_valid","invalidText","policies_content_injection_name_invalid_text","Button","onClick","disabled","tabIndex","marginLeft","marginBottom","DataTable","isSortable","headers","rows","render","_ref2","getHeaderProps","getTableProps","getRowProps","getToolbarProps","onInputChange","getTableContainerProps","TableContainer","TableToolbar","aria-label","TableToolbarContent","Table","assign","size","TableHead","TableRow","map","TableHeader","TableBody","cells","cell","TableCell","Suspense","fallback","setData","editing","parentIdPrefix"],"mappings":"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","file":"static/js/296.55690db8.chunk.js","sourcesContent":["import React, { useCallback, useState, lazy, Suspense } from 'react';\nimport {\n  Button,\n  TextInput,\n  NumberInput,\n  Select,\n  SelectItem,\n  Checkbox,\n  DataTable,\n  TableRow,\n  TableHead,\n  TableHeader,\n  TableContainer,\n  TableCell,\n  Table,\n  TableBody,\n  TableToolbar,\n  TableToolbarContent,\n} from 'carbon-components-react';\n\nimport Collapsible from 'react-collapsible';\nimport { Tabs, Tab, TabPanel, TabList } from 'react-web-tabs';\nimport ReactTooltip from \"react-tooltip\";\n\nimport { safeLoad, getDivHeight, jsonToYaml, updateStyle, updateStyle2, validateField, toggleDescription } from '../../helpers';\n\n\nconst PoliciescontentInjectionpathsDeleteModal = lazy(() => import('./policiescontent_injectionpathsDeleteModal'));\nconst PoliciescontentInjectionpathsAdd = lazy(() => import('./policiescontent_injectionpathsAdd'));\nconst PoliciescontentInjectionpathsEdit = lazy(() => import('./policiescontent_injectionpathsEdit'));\n\n\n  const handleChange = () => {\n  };\n\n  const handleSave = (loadGrid, idPrefix, doClose) => {\n\n    if(idPrefix === undefined) idPrefix = \"\";\n\n    var json = {};\n      \n    if(document.getElementById(\"policies_content_injection_content_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"policies_content_injection_content\"] = document.getElementById(\"policies_content_injection_content_id\" + idPrefix).value;\n    }\n    json[\"policies_content_injection_full_line_match\"] = document.getElementById(\"policies_content_injection_full_line_match_id\" + idPrefix).checked.toString();\n    if(document.getElementById(\"policies_content_injection_location_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"policies_content_injection_location\"] = document.getElementById(\"policies_content_injection_location_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"policies_content_injection_name_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"policies_content_injection_name\"] = document.getElementById(\"policies_content_injection_name_id\" + idPrefix).value;\n    }\n    json[\"policies_content_injection_replace_match\"] = document.getElementById(\"policies_content_injection_replace_match_id\" + idPrefix).checked.toString();\n    json[\"policies_content_injection_paths\"] = policies_content_injection_pathsrowData.policies_content_injection_paths;\n      \n    loadGrid( json[\"policies_content_injection_content\"], json[\"policies_content_injection_full_line_match\"], json[\"policies_content_injection_location\"], json[\"policies_content_injection_name\"], json[\"policies_content_injection_replace_match\"], json[\"policies_content_injection_paths\"], true); \n\n    handleClose(idPrefix, doClose);\n  };\n\n  const handleAdd = (setpolicies_content_injection_paths, idPrefix, doAdd, doClose) => {\n    if(idPrefix === undefined) idPrefix = \"\";\n\n\n    document.getElementById(\"policies_content_injection_content_id\").value = \"\";\n    document.getElementById(\"policies_content_injection_full_line_match_id\").checked = false;\n    document.getElementById(\"policies_content_injection_location_id\").value = \"\";\n    document.getElementById(\"policies_content_injection_name_id\").value = \"\";\n    document.getElementById(\"policies_content_injection_replace_match_id\").checked = false;\n    policies_content_injection_pathsrowData.policies_content_injection_paths = []\n    setpolicies_content_injection_paths(policies_content_injection_pathsrowData.policies_content_injection_paths);\n\n\n    if(doAdd) {\n      doAdd();\n    }\n\n    handleClose(idPrefix,  doClose);\n  };\n\n  const handleClose = (idPrefix, doClose) => {\n    updateStyle(\"policies_div\" + idPrefix, \"display\", \"block\");\n    document.getElementById(\"addpolicies_content_injectionPage\" + idPrefix).style.display = \"none\";\n\n      if(doClose) {\n        doClose();\n      }\n  };\n\n  const closeAdd = (idPrefix) => {\n      if(idPrefix === undefined) idPrefix = \"\";\n\n      updateStyle(\"policies_content_injection_div\" + idPrefix, \"display\", \"block\");\n      document.getElementById(\"policies_content_injection_tab\" + idPrefix).style.display = \"flex\";\n\n  };\n\nconst policies_content_injection_pathsheaderData = [\n    {\n    header: 'Path',\n    key: 'paths',\n  },\n\n];\n\nconst policies_content_injection_pathsrowData = {policies_content_injection_paths: []};\n\nconst policies_content_injection_pathshandleAdd = (idPrefix, clearFields) => {\n    if(idPrefix === undefined) idPrefix = \"\";\n\n    // Set the fields to empty\n    if(clearFields) {\n      for(var i = 0; i < clearFields.length; i++) {\n        eval(clearFields[i]);\n      }\n    }\n\n    document.getElementById(\"policies_content_injection_paths_paths_id\" + idPrefix).value = \"\";\n    // Hide the tab page\n    updateStyle(\"policies_content_injection_div\" + idPrefix, \"display\", \"none\");\n    // Show the add page\n    document.getElementById(\"addpoliciescontent_injection_pathsPage\" + idPrefix).style.display = \"block\";\n    // Hide the remaining fields\n    document.getElementById(\"policies_content_injection_tab\" + idPrefix).style.display = \"none\";\n\n  };\n\nconst Policies_content_injectionAdd = (props) => {\n\n    var row = props.row;\n    const loadGrid = props.loadGrid;\n    const doClose = props.doClose;\n    const idPrefix = (props.idPrefix)?props.idPrefix:\"\";\n\n    const [policies_content_injection_paths, setpolicies_content_injection_paths] = React.useState([]);\n    const [fetchedpolicies_content_injection_paths, setFetchedpolicies_content_injection_paths] = React.useState(false);\n\n    React.useEffect(() => {\n      policies_content_injection_pathsloadGrid();\n    }, [fetchedpolicies_content_injection_paths]);\n\n    const policies_content_injection_pathsloadGrid = React.useCallback(async (policies_content_injection_paths_paths, add) => {\n      try {\n        var attrs = [];\n        if(policies_content_injection_paths_paths) {\n          if(add) {\n            for(var i = 0; i < policies_content_injection_pathsrowData.policies_content_injection_paths.length; i++) {\n              var tempId = ((policies_content_injection_pathsrowData.policies_content_injection_paths[i].paths)?policies_content_injection_pathsrowData.policies_content_injection_paths[i].paths:\"\") + \"\";\n              if((window.policies_content_injection_pathsediting != true && window.policies_content_injection_pathsediting != \"true\") || tempId != window.policies_content_injection_pathsrowId) {\n                attrs.push(policies_content_injection_pathsrowData.policies_content_injection_paths[i]);\n              }\n            }\n            var newId = ((policies_content_injection_paths_paths)?policies_content_injection_paths_paths:\"\") + \"\";\n            attrs.push({\n              id: newId,\n              paths: policies_content_injection_paths_paths,\n            });\n          } else {\n            // Must be a delete\n            for(var i = 0; i < policies_content_injection_pathsrowData.policies_content_injection_paths.length; i++) {\n              if(policies_content_injection_pathsrowData.policies_content_injection_paths[i].paths !== policies_content_injection_paths_paths ) {\n                attrs.push(policies_content_injection_pathsrowData.policies_content_injection_paths[i]);\n              }\n            }\n          }\n        } else {\n          attrs = policies_content_injection_pathsrowData.policies_content_injection_paths;\n        }\n        policies_content_injection_pathsrowData.policies_content_injection_paths = attrs;\n        const data = {policies_content_injection_paths: attrs};\n        setpolicies_content_injection_paths(data.policies_content_injection_paths);\n\n        if(policies_content_injection_paths_paths !== undefined && policies_content_injection_paths_paths !== null ) {\n            handleChange();\n\n        }\n\n      } catch (e) {\n        console.log(e);\n      }\n      return true;\n    });\n\n\n\n    const [policies_content_injection_content, setpolicies_content_injection_content] = useState(''),\n    updatepolicies_content_injection_content = useCallback((evt) => setpolicies_content_injection_content(evt.target.value), []);\n\n    const [policies_content_injection_full_line_match, setpolicies_content_injection_full_line_match] = useState(true),\n    updatepolicies_content_injection_full_line_match = useCallback((evt) => setpolicies_content_injection_full_line_match(evt), []);\n\n    const [policies_content_injection_location, setpolicies_content_injection_location] = useState(''),\n    updatepolicies_content_injection_location = useCallback((evt) => setpolicies_content_injection_location(evt.target.value), []);\n\n    const [policies_content_injection_name, setpolicies_content_injection_name] = useState(''),\n    updatepolicies_content_injection_name = useCallback((evt) => setpolicies_content_injection_name(evt.target.value), []);\n\n    const [policies_content_injection_paths_paths, setpolicies_content_injection_paths_paths] = useState(''),\n    updatepolicies_content_injection_paths_paths = useCallback((evt) => {\n      setpolicies_content_injection_paths_paths(evt.target.value);\n      var tempId = evt.target.value;\n      validateField(policies_content_injection_pathsrowData.policies_content_injection_paths, setpolicies_content_injection_paths_paths_valid, setpolicies_content_injection_paths_paths_invalid_text, \"Policies Content Injection Paths\", \"paths\", tempId);\n    }, []);\n\n    const [policies_content_injection_paths_paths_valid, setpolicies_content_injection_paths_paths_valid] = useState(true);\n    const [policies_content_injection_paths_paths_invalid_text, setpolicies_content_injection_paths_paths_invalid_text] = useState(\"\");\n\n\n    const [policies_content_injection_replace_match, setpolicies_content_injection_replace_match] = useState(false),\n    updatepolicies_content_injection_replace_match = useCallback((evt) => setpolicies_content_injection_replace_match(evt), []);\n\n\n    const [fetcheddata, setFetcheddata] = React.useState(false);\n    React.useEffect(() => {\n      dataLoad();\n    }, [fetcheddata]);\n    const dataLoad = () => {\n\n      for(var i = 0; i < policies_content_injection_pathsrowData.policies_content_injection_paths.length; i++) {\n        if(policies_content_injection_pathsrowData.policies_content_injection_paths[i].id === window.policies_content_injection_pathsrowId) {\n        setpolicies_content_injection_paths_paths((policies_content_injection_pathsrowData.policies_content_injection_paths[i] !== undefined && policies_content_injection_pathsrowData.policies_content_injection_paths[i].paths !== undefined )?policies_content_injection_pathsrowData.policies_content_injection_paths[i].paths:\"\");\n        }\n      }\n\n\n      return true;\n    };\n\n    const setDataMain = (functionName, data) => {\n      if(functionName && data) {\n        eval(functionName)(data);\n      }\n    };\n\n    return (\n      <div>\n        \n        <div id={'addpolicies_content_injectionPage' + idPrefix} style={{display:'none'}} className=\"bx--col bx--no-gutter\">\n\n          <Tabs id= {\"policies_content_injection_tab\" + idPrefix} defaultTab={\"General_tab\" + idPrefix} vertical className=\"vertical-tabs\" style={{overflow:'auto'}}>\n              <TabList>\n                <Tab tabFor={\"General_tab\" + idPrefix}>General</Tab>\n                <Tab tabFor={\"paths_tab\" + idPrefix}>Paths</Tab>\n              </TabList>\n              <TabPanel style={{width:'100%', overflow:'auto'}} tabId={\"General_tab\" + idPrefix}>\n                <div className=\"iag_sublevel_tabs\" style={{height:'60vh', overflow:'auto'}}>\n                <div className= {\"iag_form_elem iag_tab_heading policies_content_injection_div\" + idPrefix}>\n                  <span className=\"iag_breadcrumb\">Policies / Content Injection : </span><br/>                  <h2>General Settings</h2><hr/>\n                  Specifies the general settings associated with this component\n                </div>\n                <div className={\"iag--simple-div policies_content_injection_div\" + idPrefix}>\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n          <TextInput  value={props.policies_content_injection_content}  id={\"policies_content_injection_content_id\" + idPrefix}  onFocus={(e) => ReactTooltip.show(e.target)} onBlur={(e) => ReactTooltip.hide(e.target)} data-tip data-for={\"policies_content_injection_content_tooltip_id\" + idPrefix}  labelText=\"Content\" onChange={props.updatepolicies_content_injection_content}/>\n          <ReactTooltip id={\"policies_content_injection_content_tooltip_id\" + idPrefix} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The data which is to be injected.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n          <Checkbox checked={props.policies_content_injection_full_line_match} id={\"policies_content_injection_full_line_match_id\" + idPrefix}  onFocus={(e) => ReactTooltip.show(e.target)} onBlur={(e) => ReactTooltip.hide(e.target)} data-tip data-for={\"policies_content_injection_full_line_match_tooltip_id\" + idPrefix}  labelText=\"Full Line Match\" onChange={props.updatepolicies_content_injection_full_line_match}/>\n          <ReactTooltip id={\"policies_content_injection_full_line_match_tooltip_id\" + idPrefix} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>Should the location match a full line, or should it match any string in the response?  When a full line match is configured the content will be inserted prior to the matching line.  When a partial line match is configured the content will be inserted immediately prior to the matching string.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n          <TextInput  value={props.policies_content_injection_location}  id={\"policies_content_injection_location_id\" + idPrefix}  onFocus={(e) => ReactTooltip.show(e.target)} onBlur={(e) => ReactTooltip.hide(e.target)} data-tip data-for={\"policies_content_injection_location_tooltip_id\" + idPrefix}  labelText=\"Location\" onChange={props.updatepolicies_content_injection_location}/>\n          <ReactTooltip id={\"policies_content_injection_location_tooltip_id\" + idPrefix} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The location where the content should be injected. If a full line match is being used the location is pattern matched against a line in the response using the `*.` wildcard characters.  The maximum length of a line which can be matched is 8192 bytes.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n          <TextInput  invalid={!props.policies_content_injection_name_valid}  invalidText={props.policies_content_injection_name_invalid_text}  value={props.policies_content_injection_name}  id={\"policies_content_injection_name_id\" + idPrefix}  onFocus={(e) => ReactTooltip.show(e.target)} onBlur={(e) => ReactTooltip.hide(e.target)} data-tip data-for={\"policies_content_injection_name_tooltip_id\" + idPrefix}  labelText=\"Name *\" onChange={props.updatepolicies_content_injection_name}/>\n          <ReactTooltip id={\"policies_content_injection_name_tooltip_id\" + idPrefix} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>A name to be associated with this content injection rule.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n          <Checkbox checked={props.policies_content_injection_replace_match} id={\"policies_content_injection_replace_match_id\" + idPrefix}  onFocus={(e) => ReactTooltip.show(e.target)} onBlur={(e) => ReactTooltip.hide(e.target)} data-tip data-for={\"policies_content_injection_replace_match_tooltip_id\" + idPrefix}  labelText=\"Replace Match\" onChange={props.updatepolicies_content_injection_replace_match}/>\n          <ReactTooltip id={\"policies_content_injection_replace_match_tooltip_id\" + idPrefix} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>If a partial line match is being used this configuration entry will control whether the matching string is replaced with the supplied content, or whether the supplied content is inserted prior to the matching string.  This configuration entry will be ignored if full line matches are being used.<br/></div></ReactTooltip>\n        </div>\n\n                </div>\n                </div>\n                  <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n                    <Button onClick={() => { handleClose(idPrefix,  doClose); }}>Cancel</Button>\n                    <Button disabled={(!props.policies_content_injection_name || !props.policies_content_injection_name_valid)} onClick={() => { handleSave(loadGrid, idPrefix,  doClose); }}>Save</Button>\n                  </div>\n              </TabPanel>\n              <TabPanel style={{width:'100%', overflow:'auto'}} tabId={\"paths_tab\" + idPrefix}>\n                <div className=\"iag_sublevel_tabs\" style={{height:'60vh', overflow:'auto'}}>\n                <div className= {\"iag_form_elem iag_tab_heading policies_content_injection_div\" + idPrefix}>\n                  <span className=\"iag_breadcrumb\">Policies / Content Injection : </span><br/>                  <h2>Paths Settings</h2><hr/>\n                </div>\n                <div className={\"iag--simple-div policies_content_injection_div\" + idPrefix}>\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n  <h3 tabIndex=\"0\"  onFocus={(e) => ReactTooltip.show(e.target)} onBlur={(e) => ReactTooltip.hide(e.target)} data-tip data-for={\"policies_content_injection_paths_tooltip_id\" + idPrefix} >Paths</h3><hr/>\n</div>\n          <ReactTooltip id={\"policies_content_injection_paths_tooltip_id\" + idPrefix} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The path for which content injection will take place. This entry is an array and can be used to specify multiple paths.<br/></div></ReactTooltip>\n\n                <div id={\"policies_content_injection_pathsTableDiv\" + idPrefix} style={{marginLeft:\"10px\",marginBottom:\"10px\"}}>\n                  <div className={\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n                    <DataTable id={\"policies_content_injection_pathsTable\" + idPrefix} isSortable\n                        headers={policies_content_injection_pathsheaderData}\n                        rows={policies_content_injection_pathsrowData.policies_content_injection_paths}\n                        render={({\n                          rows,\n                          headers,\n                          getHeaderProps,\n                          getRowProps,\n                          getTableProps,\n                          getToolbarProps,\n                          onInputChange,\n                          getTableContainerProps\n                    }) => (\n                      <TableContainer>\n                        <TableToolbar aria-label=\"data table toolbar\">\n                          <TableToolbarContent>\n                            <Button onClick={() => {policies_content_injection_pathshandleAdd(idPrefix, [setpolicies_content_injection_paths_paths(''),    setpolicies_content_injection_paths_paths_valid(true),]);}}>Add</Button>\n                          </TableToolbarContent>\n                        </TableToolbar>\n                        <Table size='normal' {...getTableProps()}>\n                          <TableHead>\n                            <TableRow>\n                              {headers.map(header => (\n                                <TableHeader {...getHeaderProps({ header })}>\n                                  {header.header}\n                                </TableHeader>\n                              ))}\n                              <TableHeader>\n                                  Actions\n                              </TableHeader>\n                            </TableRow>\n                          </TableHead>\n                          <TableBody>\n                            {rows.map(row => (\n                              <TableRow key={row.id}>\n                                {row.cells.map(cell => (\n                                  <TableCell key={cell.id}>{cell.value}</TableCell>\n                                ))}\n                                <TableCell>\n                                  <Suspense fallback={<div></div>}>\n                                    <PoliciescontentInjectionpathsDeleteModal row={row} loadGrid={policies_content_injection_pathsloadGrid} />\n                                  </Suspense>\n                                  <Suspense fallback={<div></div>}>\n                                    <PoliciescontentInjectionpathsEdit  data={policies_content_injection_pathsrowData.policies_content_injection_paths} setData={setDataMain} row={row} loadGrid={policies_content_injection_pathsloadGrid} dataLoad={dataLoad} editing={true} name={\"policies_content_injection_paths\"} idPrefix={idPrefix + \"_add\"} parentIdPrefix={idPrefix} \n            updatepolicies_content_injection_paths_paths={updatepolicies_content_injection_paths_paths} policies_content_injection_paths_paths={policies_content_injection_paths_paths}\n            policies_content_injection_paths_paths_valid={policies_content_injection_paths_paths_valid}\n            policies_content_injection_paths_paths_invalid_text={policies_content_injection_paths_paths_invalid_text}\n                                    />\n                                  </Suspense>\n                                </TableCell>\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </TableContainer>)}\n                    />\n                  </div>\n                </div>\n\n                </div>\n                </div>\n                  <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n                    <Button onClick={() => { handleClose(idPrefix,  doClose); }}>Cancel</Button>\n                    <Button disabled={(!props.policies_content_injection_name || !props.policies_content_injection_name_valid)} onClick={() => { handleSave(loadGrid, idPrefix,  doClose); }}>Save</Button>\n                  </div>\n              </TabPanel>\n          </Tabs>\n                  <Suspense fallback={<div></div>}>\n                    <PoliciescontentInjectionpathsAdd loadGrid={policies_content_injection_pathsloadGrid} doClose={() => {closeAdd(idPrefix);}} idPrefix={idPrefix} \n            updatepolicies_content_injection_paths_paths={updatepolicies_content_injection_paths_paths} policies_content_injection_paths_paths={policies_content_injection_paths_paths}\n            policies_content_injection_paths_paths_valid={policies_content_injection_paths_paths_valid}\n            policies_content_injection_paths_paths_invalid_text={policies_content_injection_paths_paths_invalid_text}\n                    />\n                  </Suspense>\n                  <Suspense fallback={<div></div>}>\n                    <PoliciescontentInjectionpathsEdit  loadGrid={policies_content_injection_pathsloadGrid} dataLoad={dataLoad} name={\"policies_content_injection_paths\"} idPrefix={idPrefix + \"_add\"} parentIdPrefix={idPrefix} \n            updatepolicies_content_injection_paths_paths={updatepolicies_content_injection_paths_paths} policies_content_injection_paths_paths={policies_content_injection_paths_paths}\n            policies_content_injection_paths_paths_valid={policies_content_injection_paths_paths_valid}\n            policies_content_injection_paths_paths_invalid_text={policies_content_injection_paths_paths_invalid_text}\n                    />\n                  </Suspense>\n        </div>\n        </div>\n    );\n}\n\nexport default Policies_content_injectionAdd;\n"],"sourceRoot":""}