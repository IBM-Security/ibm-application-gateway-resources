{"version":3,"file":"static/js/5008.cb59fc9a.chunk.js","mappings":"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","sources":["content/serverPage/serversslfront_endsniAdd.js"],"sourcesContent":["import React, { useCallback, useState, lazy, Suspense } from 'react';\nimport {\n  Button,\n  TextInput,\n  NumberInput,\n  Select,\n  SelectItem,\n  Checkbox,\n  DataTable,\n  TableRow,\n  TableHead,\n  TableHeader,\n  TableContainer,\n  TableCell,\n  Table,\n  TableBody,\n  TableToolbar,\n  TableToolbarContent,\n} from 'carbon-components-react';\n\nimport Collapsible from 'react-collapsible';\nimport { Tabs, Tab, TabPanel, TabList } from 'react-web-tabs';\nimport { Tooltip as ReactTooltip } from \"react-tooltip\";\n\nimport { safeLoad, getDivHeight, jsonToYaml, updateStyle, updateStyle2, validateField, toggleDescription } from '../../helpers';\n\n\nconst ServersslfrontEndsnicertificateDeleteModal = lazy(() => import('./serversslfront_endsnicertificateDeleteModal'));\nconst ServersslfrontEndsnicertificateAdd = lazy(() => import('./serversslfront_endsnicertificateAdd'));\nconst ServersslfrontEndsnicertificateEdit = lazy(() => import('./serversslfront_endsnicertificateEdit'));\n\n\n  const handleChange = () => {\n  };\n\n  const handleSave = (loadGrid, idPrefix, doClose) => {\n\n    if(idPrefix === undefined) idPrefix = \"\";\n\n    var json = {};\n      \n    if(document.getElementById(\"server_ssl_front_end_sni_hostname_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"server_ssl_front_end_sni_hostname\"] = document.getElementById(\"server_ssl_front_end_sni_hostname_id\" + idPrefix).value;\n    }\n    json[\"server_ssl_front_end_sni_certificate\"] = server_ssl_front_end_sni_certificaterowData.server_ssl_front_end_sni_certificate;\n      \n    loadGrid( json[\"server_ssl_front_end_sni_hostname\"], json[\"server_ssl_front_end_sni_certificate\"], true); \n\n    handleClose(idPrefix, doClose);\n  };\n\n  const handleAdd = (setserver_ssl_front_end_sni_certificate, idPrefix, doAdd, doClose) => {\n    if(idPrefix === undefined) idPrefix = \"\";\n\n\n    document.getElementById(\"server_ssl_front_end_sni_hostname_id\").value = \"\";\n    server_ssl_front_end_sni_certificaterowData.server_ssl_front_end_sni_certificate = []\n    setserver_ssl_front_end_sni_certificate(server_ssl_front_end_sni_certificaterowData.server_ssl_front_end_sni_certificate);\n\n\n    if(doAdd) {\n      doAdd();\n    }\n\n    handleClose(idPrefix,  doClose);\n  };\n\n  const handleClose = (idPrefix, doClose) => {\n    updateStyle(\"server_div\" + idPrefix, \"display\", \"block\");\n    document.getElementById(\"addserversslfront_end_sniPage\" + idPrefix).style.display = \"none\";\n\n      if(doClose) {\n        doClose();\n      }\n  };\n\n  const closeAdd = (idPrefix) => {\n      if(idPrefix === undefined) idPrefix = \"\";\n\n      updateStyle(\"server_ssl_front_end_sni_div\" + idPrefix, \"display\", \"block\");\n      document.getElementById(\"server_ssl_front_end_sni_tab\" + idPrefix).style.display = \"flex\";\n\n  };\n\nconst server_ssl_front_end_sni_certificateheaderData = [\n    {\n    header: 'Certificate',\n    key: 'certificate',\n  },\n\n];\n\nconst server_ssl_front_end_sni_certificaterowData = {server_ssl_front_end_sni_certificate: []};\n\nconst server_ssl_front_end_sni_certificatehandleAdd = (idPrefix, clearFields) => {\n    if(idPrefix === undefined) idPrefix = \"\";\n\n    // Set the fields to empty\n    if(clearFields) {\n      for(var i = 0; i < clearFields.length; i++) {\n        eval(clearFields[i]);\n      }\n    }\n\n    document.getElementById(\"server_ssl_front_end_sni_certificate_certificate_id\" + idPrefix).value = \"\";\n    // Hide the tab page\n    updateStyle(\"server_ssl_front_end_sni_div\" + idPrefix, \"display\", \"none\");\n    // Show the add page\n    document.getElementById(\"addserversslfront_endsni_certificatePage\" + idPrefix).style.display = \"block\";\n    // Hide the remaining fields\n    document.getElementById(\"server_ssl_front_end_sni_tab\" + idPrefix).style.display = \"none\";\n\n  };\n\nconst Serversslfront_end_sniAdd = (props) => {\n\n    var row = props.row;\n    const loadGrid = props.loadGrid;\n    const doClose = props.doClose;\n    const idPrefix = (props.idPrefix)?props.idPrefix:\"\";\n\n    const [server_ssl_front_end_sni_certificate, setserver_ssl_front_end_sni_certificate] = React.useState([]);\n    const [fetchedserver_ssl_front_end_sni_certificate, setFetchedserver_ssl_front_end_sni_certificate] = React.useState(false);\n\n    React.useEffect(() => {\n      server_ssl_front_end_sni_certificateloadGrid();\n    }, [fetchedserver_ssl_front_end_sni_certificate]);\n\n    const server_ssl_front_end_sni_certificateloadGrid = React.useCallback(async (server_ssl_front_end_sni_certificate_certificate, add) => {\n      try {\n        var attrs = [];\n        if(server_ssl_front_end_sni_certificate_certificate) {\n          if(add) {\n            for(var i = 0; i < server_ssl_front_end_sni_certificaterowData.server_ssl_front_end_sni_certificate.length; i++) {\n              var tempId = ((server_ssl_front_end_sni_certificaterowData.server_ssl_front_end_sni_certificate[i].certificate)?server_ssl_front_end_sni_certificaterowData.server_ssl_front_end_sni_certificate[i].certificate:\"\") + \"\";\n              if((window.server_ssl_front_end_sni_certificateediting != true && window.server_ssl_front_end_sni_certificateediting != \"true\") || tempId != window.server_ssl_front_end_sni_certificaterowId) {\n                attrs.push(server_ssl_front_end_sni_certificaterowData.server_ssl_front_end_sni_certificate[i]);\n              }\n            }\n            var newId = ((server_ssl_front_end_sni_certificate_certificate)?server_ssl_front_end_sni_certificate_certificate:\"\") + \"\";\n            attrs.push({\n              id: newId,\n              certificate: server_ssl_front_end_sni_certificate_certificate,\n            });\n          } else {\n            // Must be a delete\n            for(var i = 0; i < server_ssl_front_end_sni_certificaterowData.server_ssl_front_end_sni_certificate.length; i++) {\n              if(server_ssl_front_end_sni_certificaterowData.server_ssl_front_end_sni_certificate[i].certificate !== server_ssl_front_end_sni_certificate_certificate ) {\n                attrs.push(server_ssl_front_end_sni_certificaterowData.server_ssl_front_end_sni_certificate[i]);\n              }\n            }\n          }\n        } else {\n          attrs = server_ssl_front_end_sni_certificaterowData.server_ssl_front_end_sni_certificate;\n        }\n        server_ssl_front_end_sni_certificaterowData.server_ssl_front_end_sni_certificate = attrs;\n        const data = {server_ssl_front_end_sni_certificate: attrs};\n        setserver_ssl_front_end_sni_certificate(data.server_ssl_front_end_sni_certificate);\n\n        if(server_ssl_front_end_sni_certificate_certificate !== undefined && server_ssl_front_end_sni_certificate_certificate !== null ) {\n            handleChange();\n\n        }\n\n      } catch (e) {\n        console.log(e);\n      }\n      return true;\n    });\n\n\n\n    const [server_ssl_front_end_sni_certificate_certificate, setserver_ssl_front_end_sni_certificate_certificate] = useState(''),\n    updateserver_ssl_front_end_sni_certificate_certificate = useCallback((evt) => {\n      setserver_ssl_front_end_sni_certificate_certificate(evt.target.value);\n      var tempId = evt.target.value;\n      validateField(server_ssl_front_end_sni_certificaterowData.server_ssl_front_end_sni_certificate, setserver_ssl_front_end_sni_certificate_certificate_valid, setserver_ssl_front_end_sni_certificate_certificate_invalid_text, \"Server Ssl Front End Sni Certificate\", \"certificate\", tempId);\n    }, []);\n\n    const [server_ssl_front_end_sni_certificate_certificate_valid, setserver_ssl_front_end_sni_certificate_certificate_valid] = useState(true);\n    const [server_ssl_front_end_sni_certificate_certificate_invalid_text, setserver_ssl_front_end_sni_certificate_certificate_invalid_text] = useState(\"\");\n\n\n    const [server_ssl_front_end_sni_hostname, setserver_ssl_front_end_sni_hostname] = useState(''),\n    updateserver_ssl_front_end_sni_hostname = useCallback((evt) => setserver_ssl_front_end_sni_hostname(evt.target.value), []);\n\n\n    const [fetcheddata, setFetcheddata] = React.useState(false);\n    React.useEffect(() => {\n      dataLoad();\n    }, [fetcheddata]);\n    const dataLoad = () => {\n\n      for(var i = 0; i < server_ssl_front_end_sni_certificaterowData.server_ssl_front_end_sni_certificate.length; i++) {\n        if(server_ssl_front_end_sni_certificaterowData.server_ssl_front_end_sni_certificate[i].id === window.server_ssl_front_end_sni_certificaterowId) {\n        setserver_ssl_front_end_sni_certificate_certificate((server_ssl_front_end_sni_certificaterowData.server_ssl_front_end_sni_certificate[i] !== undefined && server_ssl_front_end_sni_certificaterowData.server_ssl_front_end_sni_certificate[i].certificate !== undefined )?server_ssl_front_end_sni_certificaterowData.server_ssl_front_end_sni_certificate[i].certificate:\"\");\n        }\n      }\n\n\n      return true;\n    };\n\n    const setDataMain = (functionName, data) => {\n      if(functionName && data) {\n        eval(functionName)(data);\n      }\n    };\n\n    return (\n      <div>\n        \n        <div id={'addserversslfront_end_sniPage' + idPrefix} style={{display:'none'}} className=\"bx--col bx--no-gutter\">\n\n          <Tabs id= {\"server_ssl_front_end_sni_tab\" + idPrefix} defaultTab={\"General_tab\" + idPrefix} vertical className=\"vertical-tabs\" style={{overflow:'auto'}}>\n              <TabList>\n                <Tab tabFor={\"General_tab\" + idPrefix}>General</Tab>\n                <Tab tabFor={\"certificate_tab\" + idPrefix}>Certificate</Tab>\n              </TabList>\n              <TabPanel style={{width:'100%', overflow:'auto'}} tabId={\"General_tab\" + idPrefix}>\n                <div className=\"iag_sublevel_tabs\" style={{height:'60vh', overflow:'auto'}}>\n                <div className= {\"iag_form_elem iag_tab_heading server_ssl_front_end_sni_div\" + idPrefix}>\n                  <span className=\"iag_breadcrumb\">Server / SSL / Front End / SNI : </span><br/>                  <h2>General Settings</h2><hr/>\n                  Specifies the general settings associated with this component\n                </div>\n                <div className={\"iag--simple-div server_ssl_front_end_sni_div\" + idPrefix}>\n                <div className= {\"iag_form_elem server_ssl_front_end_sni_div\" + idPrefix}>\n  <h3>SNI</h3><hr/>\n</div>\n                <div className=\"iag-wdgt-container\" style={{marginLeft:\"40px\",marginBottom:\"10px\"}}>\n\n                <div className= {\"iag_form_elem server_ssl_front_end_sni_div\" + idPrefix}>\n          <TextInput  invalid={!props.server_ssl_front_end_sni_hostname_valid}  invalidText={props.server_ssl_front_end_sni_hostname_invalid_text}  value={props.server_ssl_front_end_sni_hostname}  id={\"server_ssl_front_end_sni_hostname_id\" + idPrefix}  data-tooltip-id={\"server_ssl_front_end_sni_hostname_tooltip_id\" + idPrefix}  labelText=\"Hostname *\" onChange={props.updateserver_ssl_front_end_sni_hostname}/>\n          <ReactTooltip id={\"server_ssl_front_end_sni_hostname_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The name of the host for this SNI entry.<br/></div></ReactTooltip>\n        </div>\n\n                </div>\n\n                </div>\n                </div>\n                  <div className= {\"iag_form_elem server_ssl_front_end_sni_div\" + idPrefix}>\n                    <Button onClick={() => { handleClose(idPrefix,  doClose); }}>Cancel</Button>\n                    <Button disabled={(!props.server_ssl_front_end_sni_hostname || !props.server_ssl_front_end_sni_hostname_valid)} onClick={() => { handleSave(loadGrid, idPrefix,  doClose); }}>Save</Button>\n                  </div>\n              </TabPanel>\n              <TabPanel style={{width:'100%', overflow:'auto'}} tabId={\"certificate_tab\" + idPrefix}>\n                <div className=\"iag_sublevel_tabs\" style={{height:'60vh', overflow:'auto'}}>\n                <div className= {\"iag_form_elem iag_tab_heading server_ssl_front_end_sni_div\" + idPrefix}>\n                  <span className=\"iag_breadcrumb\">Server / SSL / Front End / SNI : </span><br/>                  <h2>Certificate Settings</h2><hr/>\n                </div>\n                <div className={\"iag--simple-div server_ssl_front_end_sni_div\" + idPrefix}>\n                <div className= {\"iag_form_elem server_ssl_front_end_sni_div\" + idPrefix}>\n  <h3 tabIndex=\"0\"  data-tooltip-id={\"server_ssl_front_end_sni_certificate_tooltip_id\" + idPrefix} >Certificate</h3><hr/>\n</div>\n          <ReactTooltip id={\"server_ssl_front_end_sni_certificate_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>PEM based personal certificate files which will be used when communicating with clients which indicate this host. These certificate files should include the private key, a certificate signed with the private key, and the signer certificate or signer certificate chain (if required).<br/></div></ReactTooltip>\n\n                <div id={\"server_ssl_front_end_sni_certificateTableDiv\" + idPrefix} style={{marginLeft:\"10px\",marginBottom:\"10px\"}}>\n                  <div className={\"iag_form_elem server_ssl_front_end_sni_div\" + idPrefix}>\n                    <DataTable id={\"server_ssl_front_end_sni_certificateTable\" + idPrefix} isSortable\n                        headers={server_ssl_front_end_sni_certificateheaderData}\n                        rows={server_ssl_front_end_sni_certificaterowData.server_ssl_front_end_sni_certificate}\n                        render={({\n                          rows,\n                          headers,\n                          getHeaderProps,\n                          getRowProps,\n                          getTableProps,\n                          getToolbarProps,\n                          onInputChange,\n                          getTableContainerProps\n                    }) => (\n                      <TableContainer>\n                        <TableToolbar aria-label=\"data table toolbar\">\n                          <TableToolbarContent>\n                            <Button onClick={() => {server_ssl_front_end_sni_certificatehandleAdd(idPrefix, [setserver_ssl_front_end_sni_certificate_certificate(''),    setserver_ssl_front_end_sni_certificate_certificate_valid(true),]);}}>Add</Button>\n                          </TableToolbarContent>\n                        </TableToolbar>\n                        <Table size='normal' {...getTableProps()}>\n                          <TableHead>\n                            <TableRow>\n                              {headers.map(header => (\n                                <TableHeader {...getHeaderProps({ header })}>\n                                  {header.header}\n                                </TableHeader>\n                              ))}\n                              <TableHeader>\n                                  Actions\n                              </TableHeader>\n                            </TableRow>\n                          </TableHead>\n                          <TableBody>\n                            {rows.map(row => (\n                              <TableRow key={row.id}>\n                                {row.cells.map(cell => (\n                                  <TableCell key={cell.id}>{cell.value}</TableCell>\n                                ))}\n                                <TableCell>\n                                  <Suspense fallback={<div></div>}>\n                                    <ServersslfrontEndsnicertificateDeleteModal row={row} loadGrid={server_ssl_front_end_sni_certificateloadGrid} />\n                                  </Suspense>\n                                  <Suspense fallback={<div></div>}>\n                                    <ServersslfrontEndsnicertificateEdit  data={server_ssl_front_end_sni_certificaterowData.server_ssl_front_end_sni_certificate} setData={setDataMain} row={row} loadGrid={server_ssl_front_end_sni_certificateloadGrid} dataLoad={dataLoad} editing={true} name={\"server_ssl_front_end_sni_certificate\"} idPrefix={idPrefix + \"_add\"} parentIdPrefix={idPrefix} \n            updateserver_ssl_front_end_sni_certificate_certificate={updateserver_ssl_front_end_sni_certificate_certificate} server_ssl_front_end_sni_certificate_certificate={server_ssl_front_end_sni_certificate_certificate}\n            server_ssl_front_end_sni_certificate_certificate_valid={server_ssl_front_end_sni_certificate_certificate_valid}\n            server_ssl_front_end_sni_certificate_certificate_invalid_text={server_ssl_front_end_sni_certificate_certificate_invalid_text}\n                                    />\n                                  </Suspense>\n                                </TableCell>\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </TableContainer>)}\n                    />\n                  </div>\n                </div>\n\n                </div>\n                </div>\n                  <div className= {\"iag_form_elem server_ssl_front_end_sni_div\" + idPrefix}>\n                    <Button onClick={() => { handleClose(idPrefix,  doClose); }}>Cancel</Button>\n                    <Button disabled={(!props.server_ssl_front_end_sni_hostname || !props.server_ssl_front_end_sni_hostname_valid)} onClick={() => { handleSave(loadGrid, idPrefix,  doClose); }}>Save</Button>\n                  </div>\n              </TabPanel>\n          </Tabs>\n                  <Suspense fallback={<div></div>}>\n                    <ServersslfrontEndsnicertificateAdd loadGrid={server_ssl_front_end_sni_certificateloadGrid} doClose={() => {closeAdd(idPrefix);}} idPrefix={idPrefix} \n            updateserver_ssl_front_end_sni_certificate_certificate={updateserver_ssl_front_end_sni_certificate_certificate} server_ssl_front_end_sni_certificate_certificate={server_ssl_front_end_sni_certificate_certificate}\n            server_ssl_front_end_sni_certificate_certificate_valid={server_ssl_front_end_sni_certificate_certificate_valid}\n            server_ssl_front_end_sni_certificate_certificate_invalid_text={server_ssl_front_end_sni_certificate_certificate_invalid_text}\n                    />\n                  </Suspense>\n                  <Suspense fallback={<div></div>}>\n                    <ServersslfrontEndsnicertificateEdit  loadGrid={server_ssl_front_end_sni_certificateloadGrid} dataLoad={dataLoad} name={\"server_ssl_front_end_sni_certificate\"} idPrefix={idPrefix + \"_add\"} parentIdPrefix={idPrefix} \n            updateserver_ssl_front_end_sni_certificate_certificate={updateserver_ssl_front_end_sni_certificate_certificate} server_ssl_front_end_sni_certificate_certificate={server_ssl_front_end_sni_certificate_certificate}\n            server_ssl_front_end_sni_certificate_certificate_valid={server_ssl_front_end_sni_certificate_certificate_valid}\n            server_ssl_front_end_sni_certificate_certificate_invalid_text={server_ssl_front_end_sni_certificate_certificate_invalid_text}\n                    />\n                  </Suspense>\n        </div>\n        </div>\n    );\n}\n\nexport default Serversslfront_end_sniAdd;\n"],"names":["ServersslfrontEndsnicertificateDeleteModal","lazy","ServersslfrontEndsnicertificateAdd","ServersslfrontEndsnicertificateEdit","handleChange","handleSave","loadGrid","idPrefix","doClose","undefined","json","document","getElementById","value","endsWith","server_ssl_front_end_sni_certificaterowData","server_ssl_front_end_sni_certificate","handleClose","handleAdd","setserver_ssl_front_end_sni_certificate","doAdd","updateStyle","style","display","closeAdd","server_ssl_front_end_sni_certificateheaderData","header","key","server_ssl_front_end_sni_certificatehandleAdd","clearFields","i","length","eval","Serversslfront_end_sniAdd","props","row","React","fetchedserver_ssl_front_end_sni_certificate","setFetchedserver_ssl_front_end_sni_certificate","server_ssl_front_end_sni_certificateloadGrid","async","server_ssl_front_end_sni_certificate_certificate","add","attrs","tempId","certificate","window","server_ssl_front_end_sni_certificateediting","server_ssl_front_end_sni_certificaterowId","push","newId","id","e","console","log","setserver_ssl_front_end_sni_certificate_certificate","useState","updateserver_ssl_front_end_sni_certificate_certificate","useCallback","evt","target","validateField","setserver_ssl_front_end_sni_certificate_certificate_valid","setserver_ssl_front_end_sni_certificate_certificate_invalid_text","server_ssl_front_end_sni_certificate_certificate_valid","server_ssl_front_end_sni_certificate_certificate_invalid_text","server_ssl_front_end_sni_hostname","setserver_ssl_front_end_sni_hostname","updateserver_ssl_front_end_sni_hostname","fetcheddata","setFetcheddata","dataLoad","setDataMain","functionName","data","_jsx","children","_jsxs","className","Tabs","defaultTab","vertical","overflow","TabList","Tab","tabFor","TabPanel","width","tabId","height","marginLeft","marginBottom","TextInput","invalid","server_ssl_front_end_sni_hostname_valid","invalidText","server_ssl_front_end_sni_hostname_invalid_text","labelText","onChange","ReactTooltip","clickable","place","effect","maxWidth","Button","onClick","disabled","tabIndex","DataTable","isSortable","headers","rows","render","_ref","getHeaderProps","getRowProps","getTableProps","getToolbarProps","onInputChange","getTableContainerProps","TableContainer","TableToolbar","TableToolbarContent","Table","_objectSpread","size","TableHead","TableRow","map","TableHeader","TableBody","cells","cell","TableCell","Suspense","fallback","setData","editing","name","parentIdPrefix"],"sourceRoot":""}