{"version":3,"sources":["content/policiesPage/policiescontent_injectionAdd.js"],"names":["PoliciescontentInjectionpathsDeleteModal","lazy","Promise","all","__webpack_require__","e","then","bind","PoliciescontentInjectionpathsAdd","PoliciescontentInjectionpathsEdit","handleChange","handleSave","loadGrid","idPrefix","doClose","undefined","json","document","getElementById","value","endsWith","checked","toString","policies_content_injection_pathsrowData","policies_content_injection_paths","handleClose","handleAdd","setpolicies_content_injection_paths","doAdd","updateStyle","style","display","closeAdd","policies_content_injection_pathsheaderData","header","key","policies_content_injection_pathshandleAdd","clearFields","i","length","eval","Policies_content_injectionAdd","props","row","_React$useState","React","useState","_React$useState2","Object","_home_travis_build_IAG_yaml_gui_generator_out_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","_React$useState3","_React$useState4","fetchedpolicies_content_injection_paths","setFetchedpolicies_content_injection_paths","useEffect","policies_content_injection_pathsloadGrid","useCallback","_ref","_home_travis_build_IAG_yaml_gui_generator_out_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_travis_build_IAG_yaml_gui_generator_out_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","policies_content_injection_paths_paths","add","attrs","tempId","newId","wrap","_context","prev","next","paths","window","policies_content_injection_pathsediting","policies_content_injection_pathsrowId","push","id","console","log","abrupt","stop","_x","_x2","apply","this","arguments","_useState","_useState2","policies_content_injection_name","setpolicies_content_injection_name","updatepolicies_content_injection_name","evt","target","_useState3","_useState4","setpolicies_content_injection_paths_paths","updatepolicies_content_injection_paths_paths","validateField","setpolicies_content_injection_paths_paths_valid","setpolicies_content_injection_paths_paths_invalid_text","_useState5","_useState6","policies_content_injection_paths_paths_valid","_useState7","_useState8","policies_content_injection_paths_paths_invalid_text","_useState9","_useState10","policies_content_injection_full_line_match","setpolicies_content_injection_full_line_match","updatepolicies_content_injection_full_line_match","_useState11","_useState12","policies_content_injection_location","setpolicies_content_injection_location","updatepolicies_content_injection_location","_useState13","_useState14","policies_content_injection_replace_match","setpolicies_content_injection_replace_match","updatepolicies_content_injection_replace_match","_useState15","_useState16","policies_content_injection_content","setpolicies_content_injection_content","updatepolicies_content_injection_content","_React$useState5","_React$useState6","fetcheddata","setFetcheddata","dataLoad","setDataMain","functionName","data","react__WEBPACK_IMPORTED_MODULE_3___default","createElement","className","react_web_tabs__WEBPACK_IMPORTED_MODULE_18__","defaultTab","vertical","overflow","tabFor","width","tabId","height","carbon_components_react__WEBPACK_IMPORTED_MODULE_4__","invalid","policies_content_injection_name_valid","invalidText","policies_content_injection_name_invalid_text","onFocus","ReactTooltip","show","onBlur","hide","data-tip","data-for","labelText","onChange","react_tooltip__WEBPACK_IMPORTED_MODULE_19__","place","effect","maxWidth","carbon_components_react__WEBPACK_IMPORTED_MODULE_5__","carbon_components_react__WEBPACK_IMPORTED_MODULE_6__","onClick","disabled","tabIndex","marginLeft","marginBottom","carbon_components_react__WEBPACK_IMPORTED_MODULE_7__","isSortable","headers","rows","render","_ref2","getHeaderProps","getTableProps","getRowProps","getToolbarProps","onInputChange","getTableContainerProps","carbon_components_react__WEBPACK_IMPORTED_MODULE_8__","carbon_components_react__WEBPACK_IMPORTED_MODULE_9__","aria-label","carbon_components_react__WEBPACK_IMPORTED_MODULE_10__","carbon_components_react__WEBPACK_IMPORTED_MODULE_11__","assign","size","carbon_components_react__WEBPACK_IMPORTED_MODULE_12__","carbon_components_react__WEBPACK_IMPORTED_MODULE_13__","map","carbon_components_react__WEBPACK_IMPORTED_MODULE_14__","carbon_components_react__WEBPACK_IMPORTED_MODULE_15__","cells","cell","carbon_components_react__WEBPACK_IMPORTED_MODULE_16__","react__WEBPACK_IMPORTED_MODULE_3__","fallback","setData","editing","name","parentIdPrefix"],"mappings":"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","file":"static/js/256.727d2739.chunk.js","sourcesContent":["import React, { useCallback, useState, lazy, Suspense } from 'react';\nimport {\n  Button,\n  TextInput,\n  NumberInput,\n  Select,\n  SelectItem,\n  Checkbox,\n  DataTable,\n  TableRow,\n  TableHead,\n  TableHeader,\n  TableContainer,\n  TableCell,\n  Table,\n  TableBody,\n  TableToolbar,\n  TableToolbarContent,\n} from 'carbon-components-react';\n\nimport Collapsible from 'react-collapsible';\nimport { Tabs, Tab, TabPanel, TabList } from 'react-web-tabs';\nimport ReactTooltip from \"react-tooltip\";\n\nimport { safeLoad, getDivHeight, jsonToYaml, updateStyle, updateStyle2, validateField, toggleDescription } from '../../helpers';\n\n\nconst PoliciescontentInjectionpathsDeleteModal = lazy(() => import('./policiescontent_injectionpathsDeleteModal'));\nconst PoliciescontentInjectionpathsAdd = lazy(() => import('./policiescontent_injectionpathsAdd'));\nconst PoliciescontentInjectionpathsEdit = lazy(() => import('./policiescontent_injectionpathsEdit'));\n\n\n  const handleChange = () => {\n  };\n\n  const handleSave = (loadGrid, idPrefix, doClose) => {\n\n    if(idPrefix === undefined) idPrefix = \"\";\n\n    var json = {};\n      \n    if(document.getElementById(\"policies_content_injection_name_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"policies_content_injection_name\"] = document.getElementById(\"policies_content_injection_name_id\" + idPrefix).value;\n    }\n    json[\"policies_content_injection_full_line_match\"] = document.getElementById(\"policies_content_injection_full_line_match_id\" + idPrefix).checked.toString();\n    if(document.getElementById(\"policies_content_injection_location_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"policies_content_injection_location\"] = document.getElementById(\"policies_content_injection_location_id\" + idPrefix).value;\n    }\n    json[\"policies_content_injection_replace_match\"] = document.getElementById(\"policies_content_injection_replace_match_id\" + idPrefix).checked.toString();\n    if(document.getElementById(\"policies_content_injection_content_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"policies_content_injection_content\"] = document.getElementById(\"policies_content_injection_content_id\" + idPrefix).value;\n    }\n    json[\"policies_content_injection_paths\"] = policies_content_injection_pathsrowData.policies_content_injection_paths;\n      \n    loadGrid( json[\"policies_content_injection_name\"], json[\"policies_content_injection_full_line_match\"], json[\"policies_content_injection_location\"], json[\"policies_content_injection_replace_match\"], json[\"policies_content_injection_content\"], json[\"policies_content_injection_paths\"], true); \n\n    handleClose(idPrefix, doClose);\n  };\n\n  const handleAdd = (setpolicies_content_injection_paths, idPrefix, doAdd, doClose) => {\n    if(idPrefix === undefined) idPrefix = \"\";\n\n\n    document.getElementById(\"policies_content_injection_name_id\").value = \"\";\n    document.getElementById(\"policies_content_injection_full_line_match_id\").checked = false;\n    document.getElementById(\"policies_content_injection_location_id\").value = \"\";\n    document.getElementById(\"policies_content_injection_replace_match_id\").checked = false;\n    document.getElementById(\"policies_content_injection_content_id\").value = \"\";\n    policies_content_injection_pathsrowData.policies_content_injection_paths = []\n    setpolicies_content_injection_paths(policies_content_injection_pathsrowData.policies_content_injection_paths);\n\n\n    if(doAdd) {\n      doAdd();\n    }\n\n    handleClose(idPrefix,  doClose);\n  };\n\n  const handleClose = (idPrefix, doClose) => {\n    updateStyle(\"policies_div\" + idPrefix, \"display\", \"block\");\n    document.getElementById(\"addpolicies_content_injectionPage\" + idPrefix).style.display = \"none\";\n\n      if(doClose) {\n        doClose();\n      }\n  };\n\n  const closeAdd = (idPrefix) => {\n      if(idPrefix === undefined) idPrefix = \"\";\n\n      updateStyle(\"policies_content_injection_div\" + idPrefix, \"display\", \"block\");\n      document.getElementById(\"policies_content_injection_tab\" + idPrefix).style.display = \"flex\";\n\n  };\n\nconst policies_content_injection_pathsheaderData = [\n    {\n    header: 'Path',\n    key: 'paths',\n  },\n\n];\n\nconst policies_content_injection_pathsrowData = {policies_content_injection_paths: []};\n\nconst policies_content_injection_pathshandleAdd = (idPrefix, clearFields) => {\n    if(idPrefix === undefined) idPrefix = \"\";\n\n    // Set the fields to empty\n    if(clearFields) {\n      for(var i = 0; i < clearFields.length; i++) {\n        eval(clearFields[i]);\n      }\n    }\n\n    document.getElementById(\"policies_content_injection_paths_paths_id\" + idPrefix).value = \"\";\n    // Hide the tab page\n    updateStyle(\"policies_content_injection_div\" + idPrefix, \"display\", \"none\");\n    // Show the add page\n    document.getElementById(\"addpoliciescontent_injection_pathsPage\" + idPrefix).style.display = \"block\";\n    // Hide the remaining fields\n    document.getElementById(\"policies_content_injection_tab\" + idPrefix).style.display = \"none\";\n\n  };\n\nconst Policies_content_injectionAdd = (props) => {\n\n    var row = props.row;\n    const loadGrid = props.loadGrid;\n    const doClose = props.doClose;\n    const idPrefix = (props.idPrefix)?props.idPrefix:\"\";\n\n    const [policies_content_injection_paths, setpolicies_content_injection_paths] = React.useState([]);\n    const [fetchedpolicies_content_injection_paths, setFetchedpolicies_content_injection_paths] = React.useState(false);\n\n    React.useEffect(() => {\n      policies_content_injection_pathsloadGrid();\n    }, [fetchedpolicies_content_injection_paths]);\n\n    const policies_content_injection_pathsloadGrid = React.useCallback(async (policies_content_injection_paths_paths, add) => {\n      try {\n        var attrs = [];\n        if(policies_content_injection_paths_paths) {\n          if(add) {\n            for(var i = 0; i < policies_content_injection_pathsrowData.policies_content_injection_paths.length; i++) {\n              var tempId = ((policies_content_injection_pathsrowData.policies_content_injection_paths[i].paths)?policies_content_injection_pathsrowData.policies_content_injection_paths[i].paths:\"\") + \"\";\n              if((window.policies_content_injection_pathsediting != true && window.policies_content_injection_pathsediting != \"true\") || tempId != window.policies_content_injection_pathsrowId) {\n                attrs.push(policies_content_injection_pathsrowData.policies_content_injection_paths[i]);\n              }\n            }\n            var newId = ((policies_content_injection_paths_paths)?policies_content_injection_paths_paths:\"\") + \"\";\n            attrs.push({\n              id: newId,\n              paths: policies_content_injection_paths_paths,\n            });\n          } else {\n            // Must be a delete\n            for(var i = 0; i < policies_content_injection_pathsrowData.policies_content_injection_paths.length; i++) {\n              if(policies_content_injection_pathsrowData.policies_content_injection_paths[i].paths !== policies_content_injection_paths_paths ) {\n                attrs.push(policies_content_injection_pathsrowData.policies_content_injection_paths[i]);\n              }\n            }\n          }\n        } else {\n          attrs = policies_content_injection_pathsrowData.policies_content_injection_paths;\n        }\n        policies_content_injection_pathsrowData.policies_content_injection_paths = attrs;\n        const data = {policies_content_injection_paths: attrs};\n        setpolicies_content_injection_paths(data.policies_content_injection_paths);\n\n        if(policies_content_injection_paths_paths !== undefined && policies_content_injection_paths_paths !== null ) {\n            handleChange();\n\n        }\n\n      } catch (e) {\n        console.log(e);\n      }\n      return true;\n    });\n\n\n\n    const [policies_content_injection_name, setpolicies_content_injection_name] = useState(''),\n    updatepolicies_content_injection_name = useCallback((evt) => setpolicies_content_injection_name(evt.target.value), []);\n\n    const [policies_content_injection_paths_paths, setpolicies_content_injection_paths_paths] = useState(''),\n    updatepolicies_content_injection_paths_paths = useCallback((evt) => {\n      setpolicies_content_injection_paths_paths(evt.target.value);\n      var tempId = evt.target.value;\n      validateField(policies_content_injection_pathsrowData.policies_content_injection_paths, setpolicies_content_injection_paths_paths_valid, setpolicies_content_injection_paths_paths_invalid_text, \"Policies Content Injection Paths\", \"paths\", tempId);\n    }, []);\n\n    const [policies_content_injection_paths_paths_valid, setpolicies_content_injection_paths_paths_valid] = useState(true);\n    const [policies_content_injection_paths_paths_invalid_text, setpolicies_content_injection_paths_paths_invalid_text] = useState(\"\");\n\n\n    const [policies_content_injection_full_line_match, setpolicies_content_injection_full_line_match] = useState(true),\n    updatepolicies_content_injection_full_line_match = useCallback((evt) => setpolicies_content_injection_full_line_match(evt), []);\n\n    const [policies_content_injection_location, setpolicies_content_injection_location] = useState(''),\n    updatepolicies_content_injection_location = useCallback((evt) => setpolicies_content_injection_location(evt.target.value), []);\n\n    const [policies_content_injection_replace_match, setpolicies_content_injection_replace_match] = useState(false),\n    updatepolicies_content_injection_replace_match = useCallback((evt) => setpolicies_content_injection_replace_match(evt), []);\n\n    const [policies_content_injection_content, setpolicies_content_injection_content] = useState(''),\n    updatepolicies_content_injection_content = useCallback((evt) => setpolicies_content_injection_content(evt.target.value), []);\n\n\n    const [fetcheddata, setFetcheddata] = React.useState(false);\n    React.useEffect(() => {\n      dataLoad();\n    }, [fetcheddata]);\n    const dataLoad = () => {\n\n      for(var i = 0; i < policies_content_injection_pathsrowData.policies_content_injection_paths.length; i++) {\n        if(policies_content_injection_pathsrowData.policies_content_injection_paths[i].id === window.policies_content_injection_pathsrowId) {\n        setpolicies_content_injection_paths_paths((policies_content_injection_pathsrowData.policies_content_injection_paths[i] !== undefined && policies_content_injection_pathsrowData.policies_content_injection_paths[i].paths !== undefined )?policies_content_injection_pathsrowData.policies_content_injection_paths[i].paths:\"\");\n        }\n      }\n\n\n      return true;\n    };\n\n    const setDataMain = (functionName, data) => {\n      if(functionName && data) {\n        eval(functionName)(data);\n      }\n    };\n\n    return (\n      <div>\n        \n        <div id={'addpolicies_content_injectionPage' + idPrefix} style={{display:'none'}} className=\"bx--col bx--no-gutter\">\n\n          <Tabs id= {\"policies_content_injection_tab\" + idPrefix} defaultTab={\"General_tab\" + idPrefix} vertical className=\"vertical-tabs\" style={{overflow:'auto'}}>\n              <TabList>\n                <Tab tabFor={\"General_tab\" + idPrefix}>General</Tab>\n                <Tab tabFor={\"paths_tab\" + idPrefix}>Paths</Tab>\n              </TabList>\n              <TabPanel style={{width:'100%', overflow:'auto'}} tabId={\"General_tab\" + idPrefix}>\n                <div className=\"iag_sublevel_tabs\" style={{height:'60vh', overflow:'auto'}}>\n                <div className= {\"iag_form_elem iag_tab_heading policies_content_injection_div\" + idPrefix}>\n                  <span className=\"iag_breadcrumb\">Policies / Content Injection : </span><br/>                  <h2>General Settings</h2><hr/>\n                  Specifies the general settings associated with this component\n                </div>\n                <div className={\"iag--simple-div policies_content_injection_div\" + idPrefix}>\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n          <TextInput  invalid={!props.policies_content_injection_name_valid}  invalidText={props.policies_content_injection_name_invalid_text}  value={props.policies_content_injection_name}  id={\"policies_content_injection_name_id\" + idPrefix}  onFocus={(e) => ReactTooltip.show(e.target)} onBlur={(e) => ReactTooltip.hide(e.target)} data-tip data-for={\"policies_content_injection_name_tooltip_id\" + idPrefix}  labelText=\"Name *\" onChange={props.updatepolicies_content_injection_name}/>\n          <ReactTooltip id={\"policies_content_injection_name_tooltip_id\" + idPrefix} place=\"top\" effect=\"solid\"><div style={{ maxWidth: 300 }}>A name to be associated with this content injection rule.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n          <Checkbox checked={props.policies_content_injection_full_line_match} id={\"policies_content_injection_full_line_match_id\" + idPrefix}  onFocus={(e) => ReactTooltip.show(e.target)} onBlur={(e) => ReactTooltip.hide(e.target)} data-tip data-for={\"policies_content_injection_full_line_match_tooltip_id\" + idPrefix}  labelText=\"Full Line Match\" onChange={props.updatepolicies_content_injection_full_line_match}/>\n          <ReactTooltip id={\"policies_content_injection_full_line_match_tooltip_id\" + idPrefix} place=\"top\" effect=\"solid\"><div style={{ maxWidth: 300 }}>Should the location match a full line, or should it match  any string in the response?  When a full line match is configured the content will be inserted prior to the matching line.  When a partial line match is configured the content will be inserted  immediately prior to the matching string.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n          <TextInput  value={props.policies_content_injection_location}  id={\"policies_content_injection_location_id\" + idPrefix}  onFocus={(e) => ReactTooltip.show(e.target)} onBlur={(e) => ReactTooltip.hide(e.target)} data-tip data-for={\"policies_content_injection_location_tooltip_id\" + idPrefix}  labelText=\"Location\" onChange={props.updatepolicies_content_injection_location}/>\n          <ReactTooltip id={\"policies_content_injection_location_tooltip_id\" + idPrefix} place=\"top\" effect=\"solid\"><div style={{ maxWidth: 300 }}>The location where the content should be injected. If a full line match is being used the location is pattern matched against  a line in the response using the '*.' wildcard characters.  The  maximum length of a line which can be matched is 8192 bytes.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n          <Checkbox checked={props.policies_content_injection_replace_match} id={\"policies_content_injection_replace_match_id\" + idPrefix}  onFocus={(e) => ReactTooltip.show(e.target)} onBlur={(e) => ReactTooltip.hide(e.target)} data-tip data-for={\"policies_content_injection_replace_match_tooltip_id\" + idPrefix}  labelText=\"Replace Match\" onChange={props.updatepolicies_content_injection_replace_match}/>\n          <ReactTooltip id={\"policies_content_injection_replace_match_tooltip_id\" + idPrefix} place=\"top\" effect=\"solid\"><div style={{ maxWidth: 300 }}>If a partial line match is being used this configuration entry will control whether the matching string is replaced with the supplied content, or whether the supplied content is inserted prior to the matching string.  This configuration entry will be ignored if full line matches are being used.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n          <TextInput  value={props.policies_content_injection_content}  id={\"policies_content_injection_content_id\" + idPrefix}  onFocus={(e) => ReactTooltip.show(e.target)} onBlur={(e) => ReactTooltip.hide(e.target)} data-tip data-for={\"policies_content_injection_content_tooltip_id\" + idPrefix}  labelText=\"Content\" onChange={props.updatepolicies_content_injection_content}/>\n          <ReactTooltip id={\"policies_content_injection_content_tooltip_id\" + idPrefix} place=\"top\" effect=\"solid\"><div style={{ maxWidth: 300 }}>The data which is to be injected.<br/></div></ReactTooltip>\n        </div>\n\n                </div>\n                </div>\n                  <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n                    <Button onClick={() => { handleClose(idPrefix,  doClose); }}>Cancel</Button>\n                    <Button disabled={(!props.policies_content_injection_name || !props.policies_content_injection_name_valid)} onClick={() => { handleSave(loadGrid, idPrefix,  doClose); }}>Save</Button>\n                  </div>\n              </TabPanel>\n              <TabPanel style={{width:'100%', overflow:'auto'}} tabId={\"paths_tab\" + idPrefix}>\n                <div className=\"iag_sublevel_tabs\" style={{height:'60vh', overflow:'auto'}}>\n                <div className= {\"iag_form_elem iag_tab_heading policies_content_injection_div\" + idPrefix}>\n                  <span className=\"iag_breadcrumb\">Policies / Content Injection : </span><br/>                  <h2>Paths Settings</h2><hr/>\n                </div>\n                <div className={\"iag--simple-div policies_content_injection_div\" + idPrefix}>\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n  <h3 tabIndex=\"0\"  onFocus={(e) => ReactTooltip.show(e.target)} onBlur={(e) => ReactTooltip.hide(e.target)} data-tip data-for={\"policies_content_injection_paths_tooltip_id\" + idPrefix} >Paths</h3><hr/>\n</div>\n          <ReactTooltip id={\"policies_content_injection_paths_tooltip_id\" + idPrefix} place=\"top\" effect=\"solid\"><div style={{ maxWidth: 300 }}>The path for which content injection will take place. This entry  is an array and can be used to specify multiple paths.<br/></div></ReactTooltip>\n\n                <div id={\"policies_content_injection_pathsTableDiv\" + idPrefix} style={{marginLeft:\"10px\",marginBottom:\"10px\"}}>\n                  <div className={\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n                    <DataTable id={\"policies_content_injection_pathsTable\" + idPrefix} isSortable\n                        headers={policies_content_injection_pathsheaderData}\n                        rows={policies_content_injection_pathsrowData.policies_content_injection_paths}\n                        render={({\n                          rows,\n                          headers,\n                          getHeaderProps,\n                          getRowProps,\n                          getTableProps,\n                          getToolbarProps,\n                          onInputChange,\n                          getTableContainerProps\n                    }) => (\n                      <TableContainer>\n                        <TableToolbar aria-label=\"data table toolbar\">\n                          <TableToolbarContent>\n                            <Button onClick={() => {policies_content_injection_pathshandleAdd(idPrefix, [setpolicies_content_injection_paths_paths(''),    setpolicies_content_injection_paths_paths_valid(true),]);}}>Add</Button>\n                          </TableToolbarContent>\n                        </TableToolbar>\n                        <Table size='normal' {...getTableProps()}>\n                          <TableHead>\n                            <TableRow>\n                              {headers.map(header => (\n                                <TableHeader {...getHeaderProps({ header })}>\n                                  {header.header}\n                                </TableHeader>\n                              ))}\n                              <TableHeader>\n                                  Actions\n                              </TableHeader>\n                            </TableRow>\n                          </TableHead>\n                          <TableBody>\n                            {rows.map(row => (\n                              <TableRow key={row.id}>\n                                {row.cells.map(cell => (\n                                  <TableCell key={cell.id}>{cell.value}</TableCell>\n                                ))}\n                                <TableCell>\n                                  <Suspense fallback={<div></div>}>\n                                    <PoliciescontentInjectionpathsDeleteModal row={row} loadGrid={policies_content_injection_pathsloadGrid} />\n                                  </Suspense>\n                                  <Suspense fallback={<div></div>}>\n                                    <PoliciescontentInjectionpathsEdit  data={policies_content_injection_pathsrowData.policies_content_injection_paths} setData={setDataMain} row={row} loadGrid={policies_content_injection_pathsloadGrid} dataLoad={dataLoad} editing={true} name={\"policies_content_injection_paths\"} idPrefix={idPrefix + \"_add\"} parentIdPrefix={idPrefix} \n            updatepolicies_content_injection_paths_paths={updatepolicies_content_injection_paths_paths} policies_content_injection_paths_paths={policies_content_injection_paths_paths}\n            policies_content_injection_paths_paths_valid={policies_content_injection_paths_paths_valid}\n            policies_content_injection_paths_paths_invalid_text={policies_content_injection_paths_paths_invalid_text}\n                                    />\n                                  </Suspense>\n                                </TableCell>\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </TableContainer>)}\n                    />\n                  </div>\n                </div>\n\n                </div>\n                </div>\n                  <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n                    <Button onClick={() => { handleClose(idPrefix,  doClose); }}>Cancel</Button>\n                    <Button disabled={(!props.policies_content_injection_name || !props.policies_content_injection_name_valid)} onClick={() => { handleSave(loadGrid, idPrefix,  doClose); }}>Save</Button>\n                  </div>\n              </TabPanel>\n          </Tabs>\n                  <Suspense fallback={<div></div>}>\n                    <PoliciescontentInjectionpathsAdd loadGrid={policies_content_injection_pathsloadGrid} doClose={() => {closeAdd(idPrefix);}} idPrefix={idPrefix} \n            updatepolicies_content_injection_paths_paths={updatepolicies_content_injection_paths_paths} policies_content_injection_paths_paths={policies_content_injection_paths_paths}\n            policies_content_injection_paths_paths_valid={policies_content_injection_paths_paths_valid}\n            policies_content_injection_paths_paths_invalid_text={policies_content_injection_paths_paths_invalid_text}\n                    />\n                  </Suspense>\n                  <Suspense fallback={<div></div>}>\n                    <PoliciescontentInjectionpathsEdit  loadGrid={policies_content_injection_pathsloadGrid} dataLoad={dataLoad} name={\"policies_content_injection_paths\"} idPrefix={idPrefix + \"_add\"} parentIdPrefix={idPrefix} \n            updatepolicies_content_injection_paths_paths={updatepolicies_content_injection_paths_paths} policies_content_injection_paths_paths={policies_content_injection_paths_paths}\n            policies_content_injection_paths_paths_valid={policies_content_injection_paths_paths_valid}\n            policies_content_injection_paths_paths_invalid_text={policies_content_injection_paths_paths_invalid_text}\n                    />\n                  </Suspense>\n        </div>\n        </div>\n    );\n}\n\nexport default Policies_content_injectionAdd;\n"],"sourceRoot":""}