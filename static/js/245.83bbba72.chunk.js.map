{"version":3,"sources":["content/identityPage/identityci_oidcallowed_query_argsDeleteModal.js"],"names":["ModalStateManager","_ref","LauncherContent","renderLauncher","ModalContent","children","_useState","useState","_useState2","_slicedToArray","open","setOpen","React","createElement","Fragment","document","ReactDOM","createPortal","body","deleteProps","arguments","length","undefined","titleOnly","danger","selectorPrimaryFocus","_ref3","name","label","title","iconDescription","hasScrollingContent","aria-label","primaryButtonText","primaryButtonDisabled","secondaryButtonText","shouldCloseAfterSubmit","style","margin","icon","iconDelete","role","fill","fillRule","width","height","description","iconTitle","className","handleSubmit","identity_ci_oidc_allowed_query_args_allowed_query_args","loadGrid","Identityci_oidcallowed_query_argsDeleteModal","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","this","call","state","row","cells","value","_createClass","key","_this2","_deleteProps$composed","size","rest","_objectWithoutProperties","_deleteProps$modalBod","_ref4","Icon","Object","assign","onClick","id","_ref5","ComposedModal","onClose","ModalHeader","code","model","ModalBody","ModalFooter","onRequestSubmit","Component"],"mappings":"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","file":"static/js/245.83bbba72.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  TextInput,\n  NumberInput,\n  ComposedModal,\n  ModalBody,\n  ModalHeader,\n  ModalFooter,\n  Button,\n  Icon\n} from  'carbon-components-react';\nimport { \n  iconDelete, iconDeleteSolid, iconDeleteOutline, \n} from 'carbon-icons';\n\n// This defines a modal controlled by a launcher button. We have one per DataTable row.\nconst ModalStateManager = ({\n  renderLauncher: LauncherContent,\n  children: ModalContent,\n}) => {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      {!ModalContent || typeof document === 'undefined'\n        ? null\n        : ReactDOM.createPortal(\n            <ModalContent  \n              open={open} \n              setOpen={setOpen} \n            />,\n            document.body\n          )\n      }\n      {LauncherContent && \n      <LauncherContent \n        open={open} \n        setOpen={setOpen} \n      />\n      }\n    </>\n  );\n};\n\n// Modal properties\nconst deleteProps = {\n  composedModal: ({ titleOnly } = {}) => ({\n    open: true,\n    danger: true,\n    selectorPrimaryFocus: '[data-modal-primary-focus]',\n  }),\n  modalHeader: ({ titleOnly, name } = {}) => ({\n    label: 'Allowed Query Args',\n    title: 'Delete Allowed Query Args?',\n    iconDescription: 'Close',\n  }),\n  modalBody: () => ({\n    hasScrollingContent: false,\n    'aria-label': 'Delete Allowed Query Args?',\n  }),\n  modalFooter: () => ({\n    primaryButtonText: 'Delete',\n    primaryButtonDisabled: false,\n    secondaryButtonText: 'Cancel',\n    shouldCloseAfterSubmit: true,\n    danger: true,\n  }),\n  menuItem: () => ({\n    closeMenu: (event) => { handleSubmit(event); }\n  }),\n  deleteIcon: () => ({\n    style: {\n      margin: '5px',\n    },\n    icon: iconDelete,\n    name: iconDelete,\n    role: 'img',\n    fill: 'grey',\n    fillRule: '',\n    width: '',\n    height: '',\n    description: 'This is a description of the icon and what it does in context',\n    iconTitle: '',\n    className: 'extra-class',\n  }),\n};\n\n// On submit we should be passed the values, not have to look them up\nconst handleSubmit = (identity_ci_oidc_allowed_query_args_allowed_query_args,  loadGrid, setOpen) => {\n \n  // Refresh data\n  loadGrid(identity_ci_oidc_allowed_query_args_allowed_query_args,  false);\n\n  return true;\n}\n\n// The implementation of the Modal\nclass Identityci_oidcallowed_query_argsDeleteModal extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      row: props.row,\n      loadGrid: props.loadGrid,\n      identity_ci_oidc_allowed_query_args_allowed_query_args: this.props.row.cells[0].value,\n      open: false,\n    }\n  }\n\n  render() {\n    // const { open } = this.state.open;\n    const { size, ...rest } = deleteProps.composedModal();\n    const { hasScrollingContent, ...bodyProps } = deleteProps.modalBody();\n\n    return (\n      <ModalStateManager\n        renderLauncher={({ setOpen }) => (\n          <Icon {...deleteProps.deleteIcon()} onClick={() => setOpen(true)} title={this.state.id} />\n        )}>\n        {({ open, setOpen }) => (\n          <ComposedModal\n            {...rest}\n            open={open}\n            row={this.props.row}\n            loadGrid={this.state.loadGrid}\n            size={size || undefined}\n            onClose={() => setOpen(false)}>\n            <ModalHeader {...deleteProps.modalHeader({ titleOnly: true, name: this.state.code + ' ' + this.state.model })} />\n            <ModalBody />\n            <ModalFooter {...deleteProps.modalFooter()} shouldCloseAfterSubmit={true} onRequestSubmit={() => { handleSubmit(this.state.identity_ci_oidc_allowed_query_args_allowed_query_args, this.state.loadGrid, setOpen); }} />\n          </ComposedModal>\n        )}\n      </ModalStateManager>\n    );\n  }\n\n  \n}\n\nexport default Identityci_oidcallowed_query_argsDeleteModal;\n"],"sourceRoot":""}