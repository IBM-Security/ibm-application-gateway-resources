{"version":3,"file":"static/js/6324.814c4259.chunk.js","mappings":"s/DA2BA,MAAMA,0CAA2CC,EAAAA,mCAAAA,OAAK,IAAM,kIACtDC,kCAAmCD,EAAAA,mCAAAA,OAAK,IAAM,uFAC9CE,mCAAoCF,EAAAA,mCAAAA,OAAK,IAAM,uFAG7CG,aAAeA,OAGfC,WAAaA,CAACC,EAAUC,EAAUC,UAEtBC,IAAbF,IAAwBA,EAAW,IAEtC,IAAIG,EAAO,CAAC,GAE2F,IAApGC,SAASC,eAAe,wCAA0CL,GAAUM,MAAMC,SAAS,OAC5FJ,EAAyC,mCAAIC,SAASC,eAAe,wCAA0CL,GAAUM,OAE3HH,EAAiD,2CAAIC,SAASC,eAAe,gDAAkDL,GAAUQ,QAAQC,YACzC,IAArGL,SAASC,eAAe,yCAA2CL,GAAUM,MAAMC,SAAS,OAC7FJ,EAA0C,oCAAIC,SAASC,eAAe,yCAA2CL,GAAUM,QAEzB,IAAjGF,SAASC,eAAe,qCAAuCL,GAAUM,MAAMC,SAAS,OACzFJ,EAAsC,gCAAIC,SAASC,eAAe,qCAAuCL,GAAUM,OAErHH,EAA+C,yCAAIC,SAASC,eAAe,8CAAgDL,GAAUQ,QAAQC,WAC7IN,EAAuC,iCAAIO,wCAAwCC,iCAEnFZ,EAAUI,EAAyC,mCAAGA,EAAiD,2CAAGA,EAA0C,oCAAGA,EAAsC,gCAAGA,EAA+C,yCAAGA,EAAuC,kCAAG,GAE5RS,YAAYZ,EAAUC,IAGlBY,UAAYA,CAACC,EAAqCd,EAAUe,EAAOd,UACvDC,IAAbF,IAAwBA,EAAW,IAGtCI,SAASC,eAAe,yCAAyCC,MAAQ,GACzEF,SAASC,eAAe,iDAAiDG,SAAU,EACnFJ,SAASC,eAAe,0CAA0CC,MAAQ,GAC1EF,SAASC,eAAe,sCAAsCC,MAAQ,GACtEF,SAASC,eAAe,+CAA+CG,SAAU,EACjFE,wCAAwCC,iCAAmC,GAC3EG,EAAoCJ,wCAAwCC,kCAGzEI,GACDA,IAGFH,YAAYZ,EAAWC,IAGnBW,YAAcA,CAACZ,EAAUC,MAC7Be,EAAAA,sCAAAA,IAAY,eAAiBhB,EAAU,UAAW,SAClDI,SAASC,eAAe,oCAAsCL,GAAUiB,MAAMC,QAAU,OAEnFjB,GACDA,KAIAkB,SAAYnB,SACEE,IAAbF,IAAwBA,EAAW,KAEtCgB,EAAAA,sCAAAA,IAAY,iCAAmChB,EAAU,UAAW,SACpEI,SAASC,eAAe,iCAAmCL,GAAUiB,MAAMC,QAAU,QAIrFE,2CAA6C,CAC/C,CACAC,OAAQ,OACRC,IAAK,UAKHZ,wCAA0C,CAACC,iCAAkC,IAE7EY,0CAA4CA,CAACvB,SAAUwB,eAIzD,QAHgBtB,IAAbF,WAAwBA,SAAW,IAGnCwB,YACD,IAAI,IAAIC,EAAI,EAAGA,EAAID,YAAYE,OAAQD,IACrCE,KAAKH,YAAYC,IAIrBrB,SAASC,eAAe,4CAA8CL,UAAUM,MAAQ,IAExFU,EAAAA,sCAAAA,IAAY,iCAAmChB,SAAU,UAAW,QAEpEI,SAASC,eAAe,yCAA2CL,UAAUiB,MAAMC,QAAU,QAE7Fd,SAASC,eAAe,iCAAmCL,UAAUiB,MAAMC,QAAU,QAInFU,8BAAiCC,QAEnC,IAAIC,IAAMD,MAAMC,IAChB,MAAM/B,SAAW8B,MAAM9B,SACjBE,QAAU4B,MAAM5B,QAChBD,SAAY6B,MAAM7B,SAAU6B,MAAM7B,SAAS,IAE1CW,iCAAkCG,qCAAuCiB,mCAAAA,SAAe,KACxFC,wCAAyCC,4CAA8CF,mCAAAA,UAAe,GAE7GA,mCAAAA,WAAgB,KACdG,6CACC,CAACF,0CAEJ,MAAME,yCAA2CH,mCAAAA,aAAkBI,MAAOC,EAAwCC,KAChH,IACE,IAAIC,EAAQ,GACZ,GAAGF,EACD,GAAGC,EAAK,CACN,IAAI,IAAIZ,EAAI,EAAGA,EAAIf,wCAAwCC,iCAAiCe,OAAQD,IAAK,CACvG,IAAIc,GAAW7B,wCAAwCC,iCAAiCc,GAAGe,MAAO9B,wCAAwCC,iCAAiCc,GAAGe,MAAM,IAAM,IACpI,GAAlDC,OAAOC,yCAAqG,QAAlDD,OAAOC,yCAAsDH,GAAUE,OAAOE,wCAC1IL,EAAMM,KAAKlC,wCAAwCC,iCAAiCc,GAExF,CACA,IAAIoB,GAAUT,GAA+E,IAAM,GACnGE,EAAMM,KAAK,CACTE,GAAID,EACJL,MAAOJ,GAEX,MAEE,IAAQX,EAAI,EAAGA,EAAIf,wCAAwCC,iCAAiCe,OAAQD,IAC/Ff,wCAAwCC,iCAAiCc,GAAGe,QAAUJ,GACvFE,EAAMM,KAAKlC,wCAAwCC,iCAAiCc,SAK1Fa,EAAQ5B,wCAAwCC,iCAElDD,wCAAwCC,iCAAmC2B,EAE3ExB,oCADa,CAACH,iCAAkC2B,GACP3B,uCAEKT,IAA3CkC,GAAmG,OAA3CA,GACvDvC,cAIN,CAAE,MAAOkD,GACPC,QAAQC,IAAIF,EACd,CACA,OAAO,MAKFG,mCAAoCC,wCAAyCC,EAAAA,mCAAAA,UAAS,IAC7FC,0CAA2CC,EAAAA,mCAAAA,cAAaC,GAAQJ,sCAAsCI,EAAIC,OAAOlD,QAAQ,KAElHmD,2CAA4CC,gDAAiDN,EAAAA,mCAAAA,WAAS,GAC7GO,kDAAmDL,EAAAA,mCAAAA,cAAaC,GAAQG,8CAA8CH,IAAM,KAErHK,oCAAqCC,yCAA0CT,EAAAA,mCAAAA,UAAS,IAC/FU,2CAA4CR,EAAAA,mCAAAA,cAAaC,GAAQM,uCAAuCN,EAAIC,OAAOlD,QAAQ,KAEpHyD,gCAAiCC,qCAAsCZ,EAAAA,mCAAAA,UAAS,IACvFa,uCAAwCX,EAAAA,mCAAAA,cAAaC,GAAQS,mCAAmCT,EAAIC,OAAOlD,QAAQ,KAE5G8B,uCAAwC8B,4CAA6Cd,EAAAA,mCAAAA,UAAS,IACrGe,8CAA+Cb,EAAAA,mCAAAA,cAAaC,IAC1DW,0CAA0CX,EAAIC,OAAOlD,OACrD,IAAIiC,EAASgB,EAAIC,OAAOlD,OACxB8D,EAAAA,sCAAAA,IAAc1D,wCAAwCC,iCAAkC0D,gDAAiDC,uDAAwD,mCAAoC,QAAS/B,KAC7O,KAEIgC,6CAA8CF,kDAAmDjB,EAAAA,mCAAAA,WAAS,IAC1GoB,oDAAqDF,yDAA0DlB,EAAAA,mCAAAA,UAAS,KAGxHqB,yCAA0CC,8CAA+CtB,EAAAA,mCAAAA,WAAS,GACzGuB,gDAAiDrB,EAAAA,mCAAAA,cAAaC,GAAQmB,4CAA4CnB,IAAM,KAGjHqB,YAAaC,gBAAkB9C,mCAAAA,UAAe,GACrDA,mCAAAA,WAAgB,KACd+C,aACC,CAACF,cACJ,MAAME,SAAWA,KAEf,IAAI,IAAIrD,EAAI,EAAGA,EAAIf,wCAAwCC,iCAAiCe,OAAQD,IAC/Ff,wCAAwCC,iCAAiCc,GAAGqB,KAAOL,OAAOE,uCAC7FuB,+CAA2HhE,IAAhFQ,wCAAwCC,iCAAiCc,SAA0GvB,IAAtFQ,wCAAwCC,iCAAiCc,GAAGe,MAAsB9B,wCAAwCC,iCAAiCc,GAAGe,MAAM,IAK9T,OAAO,GAGHuC,YAAcA,CAACC,aAAcC,QAC9BD,cAAgBC,MACjBtD,KAAKqD,aAALrD,CAAmBsD,OAIvB,OACEC,EAAAA,+CAAAA,KAAA,OAAAC,UAEEC,EAAAA,+CAAAA,MAAA,OAAKtC,GAAI,oCAAsC9C,SAAUiB,MAAO,CAACC,QAAQ,QAASmE,UAAU,wBAAuBF,SAAA,EAEjHC,EAAAA,+CAAAA,MAACE,4CAAAA,GAAI,CAACxC,GAAK,iCAAmC9C,SAAUuF,WAAY,cAAgBvF,SAAUwF,UAAQ,EAACH,UAAU,gBAAgBpE,MAAO,CAACwE,SAAS,QAAQN,SAAA,EACtJC,EAAAA,+CAAAA,MAACM,4CAAAA,GAAO,CAAAP,SAAA,EACND,EAAAA,+CAAAA,KAACS,4CAAAA,GAAG,CAACC,OAAQ,cAAgB5F,SAASmF,SAAC,aACvCD,EAAAA,+CAAAA,KAACS,4CAAAA,GAAG,CAACC,OAAQ,YAAc5F,SAASmF,SAAC,cAEvCC,EAAAA,+CAAAA,MAACS,4CAAAA,GAAQ,CAAC5E,MAAO,CAAC6E,MAAM,OAAQL,SAAS,QAASM,MAAO,cAAgB/F,SAASmF,SAAA,EAChFC,EAAAA,+CAAAA,MAAA,OAAKC,UAAU,oBAAoBpE,MAAO,CAAC+E,OAAO,OAAQP,SAAS,QAAQN,SAAA,EAC3EC,EAAAA,+CAAAA,MAAA,OAAKC,UAAY,+DAAiErF,SAASmF,SAAA,EACzFD,EAAAA,+CAAAA,KAAA,QAAMG,UAAU,iBAAgBF,SAAC,qCAAsCD,EAAAA,+CAAAA,KAAA,SAAK,sBAAkBA,EAAAA,+CAAAA,KAAA,MAAAC,SAAI,sBAAqBD,EAAAA,+CAAAA,KAAA,SAAK,oEAG9HE,EAAAA,+CAAAA,MAAA,OAAKC,UAAW,iDAAmDrF,SAASmF,SAAA,EAC5EC,EAAAA,+CAAAA,MAAA,OAAKC,UAAY,+CAAiDrF,SAASmF,SAAA,EACjFD,EAAAA,+CAAAA,KAACe,qDAAAA,EAAS,CAAE3F,MAAOuB,MAAMqB,mCAAqCJ,GAAI,wCAA0C9C,SAAW,kBAAiB,gDAAkDA,SAAWkG,UAAU,UAAUC,SAAUtE,MAAMwB,4CACzO6B,EAAAA,+CAAAA,KAACkB,2CAAAA,GAAY,CAACtD,GAAI,gDAAkD9C,SAAUqG,WAAW,EAAMC,MAAM,MAAMC,OAAO,QAAOpB,UAAEC,EAAAA,+CAAAA,MAAA,OAAKnE,MAAO,CAAEuF,SAAU,KAAMrB,SAAA,CAAC,qCAAiCD,EAAAA,+CAAAA,KAAA,kBAGrLE,EAAAA,+CAAAA,MAAA,OAAKC,UAAY,+CAAiDrF,SAASmF,SAAA,EACjFD,EAAAA,+CAAAA,KAACuB,qDAAAA,EAAQ,CAACjG,QAASqB,MAAM4B,2CAA4CX,GAAI,gDAAkD9C,SAAW,kBAAiB,wDAA0DA,SAAWkG,UAAU,kBAAkBC,SAAUtE,MAAM8B,oDACxQuB,EAAAA,+CAAAA,KAACkB,2CAAAA,GAAY,CAACtD,GAAI,wDAA0D9C,SAAUqG,WAAW,EAAMC,MAAM,MAAMC,OAAO,QAAOpB,UAAEC,EAAAA,+CAAAA,MAAA,OAAKnE,MAAO,CAAEuF,SAAU,KAAMrB,SAAA,CAAC,wSAAoSD,EAAAA,+CAAAA,KAAA,kBAGhcE,EAAAA,+CAAAA,MAAA,OAAKC,UAAY,+CAAiDrF,SAASmF,SAAA,EACjFD,EAAAA,+CAAAA,KAACe,qDAAAA,EAAS,CAAE3F,MAAOuB,MAAM+B,oCAAsCd,GAAI,yCAA2C9C,SAAW,kBAAiB,iDAAmDA,SAAWkG,UAAU,WAAWC,SAAUtE,MAAMiC,6CAC7OoB,EAAAA,+CAAAA,KAACkB,2CAAAA,GAAY,CAACtD,GAAI,iDAAmD9C,SAAUqG,WAAW,EAAMC,MAAM,MAAMC,OAAO,QAAOpB,UAAEC,EAAAA,+CAAAA,MAAA,OAAKnE,MAAO,CAAEuF,SAAU,KAAMrB,SAAA,CAAC,8PAA0PD,EAAAA,+CAAAA,KAAA,kBAG/YE,EAAAA,+CAAAA,MAAA,OAAKC,UAAY,+CAAiDrF,SAASmF,SAAA,EACjFD,EAAAA,+CAAAA,KAACe,qDAAAA,EAAS,CAAES,SAAU7E,MAAM8E,sCAAwCC,YAAa/E,MAAMgF,6CAA+CvG,MAAOuB,MAAMkC,gCAAkCjB,GAAI,qCAAuC9C,SAAW,kBAAiB,6CAA+CA,SAAWkG,UAAU,SAASC,SAAUtE,MAAMoC,yCACzViB,EAAAA,+CAAAA,KAACkB,2CAAAA,GAAY,CAACtD,GAAI,6CAA+C9C,SAAUqG,WAAW,EAAMC,MAAM,MAAMC,OAAO,QAAOpB,UAAEC,EAAAA,+CAAAA,MAAA,OAAKnE,MAAO,CAAEuF,SAAU,KAAMrB,SAAA,CAAC,6DAAyDD,EAAAA,+CAAAA,KAAA,kBAG1ME,EAAAA,+CAAAA,MAAA,OAAKC,UAAY,+CAAiDrF,SAASmF,SAAA,EACjFD,EAAAA,+CAAAA,KAACuB,qDAAAA,EAAQ,CAACjG,QAASqB,MAAM4C,yCAA0C3B,GAAI,8CAAgD9C,SAAW,kBAAiB,sDAAwDA,SAAWkG,UAAU,gBAAgBC,SAAUtE,MAAM8C,kDAChQO,EAAAA,+CAAAA,KAACkB,2CAAAA,GAAY,CAACtD,GAAI,sDAAwD9C,SAAUqG,WAAW,EAAMC,MAAM,MAAMC,OAAO,QAAOpB,UAAEC,EAAAA,+CAAAA,MAAA,OAAKnE,MAAO,CAAEuF,SAAU,KAAMrB,SAAA,CAAC,2SAAuSD,EAAAA,+CAAAA,KAAA,wBAK/bE,EAAAA,+CAAAA,MAAA,OAAKC,UAAY,+CAAiDrF,SAASmF,SAAA,EACzED,EAAAA,+CAAAA,KAAC4B,qDAAAA,EAAM,CAACC,QAASA,KAAQnG,YAAYZ,SAAWC,UAAYkF,SAAC,YAC7DD,EAAAA,+CAAAA,KAAC4B,qDAAAA,EAAM,CAACE,UAAYnF,MAAMkC,kCAAoClC,MAAM8E,sCAAwCI,QAASA,KAAQjH,WAAWC,SAAUC,SAAWC,UAAYkF,SAAC,gBAGhLC,EAAAA,+CAAAA,MAACS,4CAAAA,GAAQ,CAAC5E,MAAO,CAAC6E,MAAM,OAAQL,SAAS,QAASM,MAAO,YAAc/F,SAASmF,SAAA,EAC9EC,EAAAA,+CAAAA,MAAA,OAAKC,UAAU,oBAAoBpE,MAAO,CAAC+E,OAAO,OAAQP,SAAS,QAAQN,SAAA,EAC3EC,EAAAA,+CAAAA,MAAA,OAAKC,UAAY,+DAAiErF,SAASmF,SAAA,EACzFD,EAAAA,+CAAAA,KAAA,QAAMG,UAAU,iBAAgBF,SAAC,qCAAsCD,EAAAA,+CAAAA,KAAA,SAAK,sBAAkBA,EAAAA,+CAAAA,KAAA,MAAAC,SAAI,oBAAmBD,EAAAA,+CAAAA,KAAA,aAEvHE,EAAAA,+CAAAA,MAAA,OAAKC,UAAW,iDAAmDrF,SAASmF,SAAA,EAC5EC,EAAAA,+CAAAA,MAAA,OAAKC,UAAY,+CAAiDrF,SAASmF,SAAA,EACzFD,EAAAA,+CAAAA,KAAA,MAAI+B,SAAS,IAAK,kBAAiB,8CAAgDjH,SAASmF,SAAE,WAAUD,EAAAA,+CAAAA,KAAA,aAEhGA,EAAAA,+CAAAA,KAACkB,2CAAAA,GAAY,CAACtD,GAAI,8CAAgD9C,SAAUqG,WAAW,EAAMC,MAAM,MAAMC,OAAO,QAAOpB,UAAEC,EAAAA,+CAAAA,MAAA,OAAKnE,MAAO,CAAEuF,SAAU,KAAMrB,SAAA,CAAC,2HAAuHD,EAAAA,+CAAAA,KAAA,eAEzQA,EAAAA,+CAAAA,KAAA,OAAKpC,GAAI,2CAA6C9C,SAAUiB,MAAO,CAACiG,WAAW,OAAOC,aAAa,QAAQhC,UAC7GD,EAAAA,+CAAAA,KAAA,OAAKG,UAAW,+CAAiDrF,SAASmF,UACxED,EAAAA,+CAAAA,KAACkC,qDAAAA,GAAS,CAACtE,GAAI,wCAA0C9C,SAAUqH,YAAU,EACzEC,QAASlG,2CACTmG,KAAM7G,wCAAwCC,iCAC9C6G,OAAQC,IAAA,IAAC,KACPF,EAAI,QACJD,EAAO,eACPI,EAAc,YACdC,EAAW,cACXC,EAAa,gBACbC,EAAe,cACfC,EAAa,uBACbC,GACLN,EAAA,OACCrC,EAAAA,+CAAAA,MAAC4C,sDAAAA,EAAc,CAAA7C,SAAA,EACbD,EAAAA,+CAAAA,KAAC+C,sDAAAA,EAAY,CAAC,aAAW,qBAAoB9C,UAC3CD,EAAAA,+CAAAA,KAACgD,sDAAAA,EAAmB,CAAA/C,UAClBD,EAAAA,+CAAAA,KAAC4B,qDAAAA,EAAM,CAACC,QAASA,KAAOxF,0CAA0CvB,SAAU,CAACkE,0CAA0C,IAAQG,iDAAgD,MAAWc,SAAC,aAG/LC,EAAAA,+CAAAA,MAAC+C,sDAAAA,GAAKC,EAAAA,4IAAAA,IAAAA,EAAAA,4IAAAA,GAAA,CAACC,KAAK,UAAaT,KAAe,IAAAzC,SAAA,EACtCD,EAAAA,+CAAAA,KAACoD,sDAAAA,EAAS,CAAAnD,UACRC,EAAAA,+CAAAA,MAACmD,sDAAAA,EAAQ,CAAApD,SAAA,CACNmC,EAAQkB,KAAInH,IACX6D,EAAAA,+CAAAA,KAACuD,sDAAAA,GAAWL,EAAAA,4IAAAA,IAAAA,EAAAA,4IAAAA,GAAA,GAAKV,EAAe,CAAErG,YAAS,IAAA8D,SACxC9D,EAAOA,aAGZ6D,EAAAA,+CAAAA,KAACuD,sDAAAA,EAAW,CAAAtD,SAAC,kBAKjBD,EAAAA,+CAAAA,KAACwD,sDAAAA,EAAS,CAAAvD,SACPoC,EAAKiB,KAAI1G,IACRsD,EAAAA,+CAAAA,MAACmD,sDAAAA,EAAQ,CAAApD,SAAA,CACNrD,EAAI6G,MAAMH,KAAII,IACb1D,EAAAA,+CAAAA,KAAC2D,sDAAAA,EAAS,CAAA1D,SAAgByD,EAAKtI,OAAfsI,EAAK9F,OAEvBsC,EAAAA,+CAAAA,MAACyD,sDAAAA,EAAS,CAAA1D,SAAA,EACRD,EAAAA,+CAAAA,KAAC4D,mCAAAA,SAAQ,CAACC,UAAU7D,EAAAA,+CAAAA,KAAA,UAAYC,UAC9BD,EAAAA,+CAAAA,KAACzF,yCAAwC,CAACqC,IAAKA,EAAK/B,SAAUmC,8CAEhEgD,EAAAA,+CAAAA,KAAC4D,mCAAAA,SAAQ,CAACC,UAAU7D,EAAAA,+CAAAA,KAAA,UAAYC,UAC9BD,EAAAA,+CAAAA,KAACtF,kCAAiC,CAAEqF,KAAMvE,wCAAwCC,iCAAkCqI,QAASjE,YAAajD,IAAKA,EAAK/B,SAAUmC,yCAA0C4C,SAAUA,SAAUmE,SAAS,EAAMC,KAAM,mCAAoClJ,SAAUA,SAAW,OAAQmJ,eAAgBnJ,SAC1VmE,6CAA8CA,6CAA8C/B,uCAAwCA,uCACpImC,6CAA8CA,6CAC9CC,oDAAqDA,6DAZpB1C,EAAIgB,6BA2B/BsC,EAAAA,+CAAAA,MAAA,OAAKC,UAAY,+CAAiDrF,SAASmF,SAAA,EACzED,EAAAA,+CAAAA,KAAC4B,qDAAAA,EAAM,CAACC,QAASA,KAAQnG,YAAYZ,SAAWC,UAAYkF,SAAC,YAC7DD,EAAAA,+CAAAA,KAAC4B,qDAAAA,EAAM,CAACE,UAAYnF,MAAMkC,kCAAoClC,MAAM8E,sCAAwCI,QAASA,KAAQjH,WAAWC,SAAUC,SAAWC,UAAYkF,SAAC,mBAI5KD,EAAAA,+CAAAA,KAAC4D,mCAAAA,SAAQ,CAACC,UAAU7D,EAAAA,+CAAAA,KAAA,UAAYC,UAC9BD,EAAAA,+CAAAA,KAACvF,iCAAgC,CAACI,SAAUmC,yCAA0CjC,QAASA,KAAOkB,SAASnB,WAAaA,SAAUA,SAC9ImE,6CAA8CA,6CAA8C/B,uCAAwCA,uCACpImC,6CAA8CA,6CAC9CC,oDAAqDA,yDAG/CU,EAAAA,+CAAAA,KAAC4D,mCAAAA,SAAQ,CAACC,UAAU7D,EAAAA,+CAAAA,KAAA,UAAYC,UAC9BD,EAAAA,+CAAAA,KAACtF,kCAAiC,CAAEG,SAAUmC,yCAA0C4C,SAAUA,SAAUoE,KAAM,mCAAoClJ,SAAUA,SAAW,OAAQmJ,eAAgBnJ,SAC3MmE,6CAA8CA,6CAA8C/B,uCAAwCA,uCACpImC,6CAA8CA,6CAC9CC,oDAAqDA,8DAQjE,wD","sources":["content/policiesPage/policiescontent_injectionAdd.js"],"sourcesContent":["import React, { useCallback, useState, lazy, Suspense } from 'react';\nimport {\n  Button,\n  TextInput,\n  NumberInput,\n  Select,\n  SelectItem,\n  Checkbox,\n  DataTable,\n  TableRow,\n  TableHead,\n  TableHeader,\n  TableContainer,\n  TableCell,\n  Table,\n  TableBody,\n  TableToolbar,\n  TableToolbarContent,\n} from 'carbon-components-react';\n\nimport Collapsible from 'react-collapsible';\nimport { Tabs, Tab, TabPanel, TabList } from 'react-web-tabs';\nimport { Tooltip as ReactTooltip } from \"react-tooltip\";\n\nimport { safeLoad, getDivHeight, jsonToYaml, updateStyle, updateStyle2, validateField, toggleDescription } from '../../helpers';\n\n\nconst PoliciescontentInjectionpathsDeleteModal = lazy(() => import('./policiescontent_injectionpathsDeleteModal'));\nconst PoliciescontentInjectionpathsAdd = lazy(() => import('./policiescontent_injectionpathsAdd'));\nconst PoliciescontentInjectionpathsEdit = lazy(() => import('./policiescontent_injectionpathsEdit'));\n\n\n  const handleChange = () => {\n  };\n\n  const handleSave = (loadGrid, idPrefix, doClose) => {\n\n    if(idPrefix === undefined) idPrefix = \"\";\n\n    var json = {};\n      \n    if(document.getElementById(\"policies_content_injection_content_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"policies_content_injection_content\"] = document.getElementById(\"policies_content_injection_content_id\" + idPrefix).value;\n    }\n    json[\"policies_content_injection_full_line_match\"] = document.getElementById(\"policies_content_injection_full_line_match_id\" + idPrefix).checked.toString();\n    if(document.getElementById(\"policies_content_injection_location_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"policies_content_injection_location\"] = document.getElementById(\"policies_content_injection_location_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"policies_content_injection_name_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"policies_content_injection_name\"] = document.getElementById(\"policies_content_injection_name_id\" + idPrefix).value;\n    }\n    json[\"policies_content_injection_replace_match\"] = document.getElementById(\"policies_content_injection_replace_match_id\" + idPrefix).checked.toString();\n    json[\"policies_content_injection_paths\"] = policies_content_injection_pathsrowData.policies_content_injection_paths;\n      \n    loadGrid( json[\"policies_content_injection_content\"], json[\"policies_content_injection_full_line_match\"], json[\"policies_content_injection_location\"], json[\"policies_content_injection_name\"], json[\"policies_content_injection_replace_match\"], json[\"policies_content_injection_paths\"], true); \n\n    handleClose(idPrefix, doClose);\n  };\n\n  const handleAdd = (setpolicies_content_injection_paths, idPrefix, doAdd, doClose) => {\n    if(idPrefix === undefined) idPrefix = \"\";\n\n\n    document.getElementById(\"policies_content_injection_content_id\").value = \"\";\n    document.getElementById(\"policies_content_injection_full_line_match_id\").checked = false;\n    document.getElementById(\"policies_content_injection_location_id\").value = \"\";\n    document.getElementById(\"policies_content_injection_name_id\").value = \"\";\n    document.getElementById(\"policies_content_injection_replace_match_id\").checked = false;\n    policies_content_injection_pathsrowData.policies_content_injection_paths = []\n    setpolicies_content_injection_paths(policies_content_injection_pathsrowData.policies_content_injection_paths);\n\n\n    if(doAdd) {\n      doAdd();\n    }\n\n    handleClose(idPrefix,  doClose);\n  };\n\n  const handleClose = (idPrefix, doClose) => {\n    updateStyle(\"policies_div\" + idPrefix, \"display\", \"block\");\n    document.getElementById(\"addpolicies_content_injectionPage\" + idPrefix).style.display = \"none\";\n\n      if(doClose) {\n        doClose();\n      }\n  };\n\n  const closeAdd = (idPrefix) => {\n      if(idPrefix === undefined) idPrefix = \"\";\n\n      updateStyle(\"policies_content_injection_div\" + idPrefix, \"display\", \"block\");\n      document.getElementById(\"policies_content_injection_tab\" + idPrefix).style.display = \"flex\";\n\n  };\n\nconst policies_content_injection_pathsheaderData = [\n    {\n    header: 'Path',\n    key: 'paths',\n  },\n\n];\n\nconst policies_content_injection_pathsrowData = {policies_content_injection_paths: []};\n\nconst policies_content_injection_pathshandleAdd = (idPrefix, clearFields) => {\n    if(idPrefix === undefined) idPrefix = \"\";\n\n    // Set the fields to empty\n    if(clearFields) {\n      for(var i = 0; i < clearFields.length; i++) {\n        eval(clearFields[i]);\n      }\n    }\n\n    document.getElementById(\"policies_content_injection_paths_paths_id\" + idPrefix).value = \"\";\n    // Hide the tab page\n    updateStyle(\"policies_content_injection_div\" + idPrefix, \"display\", \"none\");\n    // Show the add page\n    document.getElementById(\"addpoliciescontent_injection_pathsPage\" + idPrefix).style.display = \"block\";\n    // Hide the remaining fields\n    document.getElementById(\"policies_content_injection_tab\" + idPrefix).style.display = \"none\";\n\n  };\n\nconst Policies_content_injectionAdd = (props) => {\n\n    var row = props.row;\n    const loadGrid = props.loadGrid;\n    const doClose = props.doClose;\n    const idPrefix = (props.idPrefix)?props.idPrefix:\"\";\n\n    const [policies_content_injection_paths, setpolicies_content_injection_paths] = React.useState([]);\n    const [fetchedpolicies_content_injection_paths, setFetchedpolicies_content_injection_paths] = React.useState(false);\n\n    React.useEffect(() => {\n      policies_content_injection_pathsloadGrid();\n    }, [fetchedpolicies_content_injection_paths]);\n\n    const policies_content_injection_pathsloadGrid = React.useCallback(async (policies_content_injection_paths_paths, add) => {\n      try {\n        var attrs = [];\n        if(policies_content_injection_paths_paths) {\n          if(add) {\n            for(var i = 0; i < policies_content_injection_pathsrowData.policies_content_injection_paths.length; i++) {\n              var tempId = ((policies_content_injection_pathsrowData.policies_content_injection_paths[i].paths)?policies_content_injection_pathsrowData.policies_content_injection_paths[i].paths:\"\") + \"\";\n              if((window.policies_content_injection_pathsediting != true && window.policies_content_injection_pathsediting != \"true\") || tempId != window.policies_content_injection_pathsrowId) {\n                attrs.push(policies_content_injection_pathsrowData.policies_content_injection_paths[i]);\n              }\n            }\n            var newId = ((policies_content_injection_paths_paths)?policies_content_injection_paths_paths:\"\") + \"\";\n            attrs.push({\n              id: newId,\n              paths: policies_content_injection_paths_paths,\n            });\n          } else {\n            // Must be a delete\n            for(var i = 0; i < policies_content_injection_pathsrowData.policies_content_injection_paths.length; i++) {\n              if(policies_content_injection_pathsrowData.policies_content_injection_paths[i].paths !== policies_content_injection_paths_paths ) {\n                attrs.push(policies_content_injection_pathsrowData.policies_content_injection_paths[i]);\n              }\n            }\n          }\n        } else {\n          attrs = policies_content_injection_pathsrowData.policies_content_injection_paths;\n        }\n        policies_content_injection_pathsrowData.policies_content_injection_paths = attrs;\n        const data = {policies_content_injection_paths: attrs};\n        setpolicies_content_injection_paths(data.policies_content_injection_paths);\n\n        if(policies_content_injection_paths_paths !== undefined && policies_content_injection_paths_paths !== null ) {\n            handleChange();\n\n        }\n\n      } catch (e) {\n        console.log(e);\n      }\n      return true;\n    });\n\n\n\n    const [policies_content_injection_content, setpolicies_content_injection_content] = useState(''),\n    updatepolicies_content_injection_content = useCallback((evt) => setpolicies_content_injection_content(evt.target.value), []);\n\n    const [policies_content_injection_full_line_match, setpolicies_content_injection_full_line_match] = useState(true),\n    updatepolicies_content_injection_full_line_match = useCallback((evt) => setpolicies_content_injection_full_line_match(evt), []);\n\n    const [policies_content_injection_location, setpolicies_content_injection_location] = useState(''),\n    updatepolicies_content_injection_location = useCallback((evt) => setpolicies_content_injection_location(evt.target.value), []);\n\n    const [policies_content_injection_name, setpolicies_content_injection_name] = useState(''),\n    updatepolicies_content_injection_name = useCallback((evt) => setpolicies_content_injection_name(evt.target.value), []);\n\n    const [policies_content_injection_paths_paths, setpolicies_content_injection_paths_paths] = useState(''),\n    updatepolicies_content_injection_paths_paths = useCallback((evt) => {\n      setpolicies_content_injection_paths_paths(evt.target.value);\n      var tempId = evt.target.value;\n      validateField(policies_content_injection_pathsrowData.policies_content_injection_paths, setpolicies_content_injection_paths_paths_valid, setpolicies_content_injection_paths_paths_invalid_text, \"Policies Content Injection Paths\", \"paths\", tempId);\n    }, []);\n\n    const [policies_content_injection_paths_paths_valid, setpolicies_content_injection_paths_paths_valid] = useState(true);\n    const [policies_content_injection_paths_paths_invalid_text, setpolicies_content_injection_paths_paths_invalid_text] = useState(\"\");\n\n\n    const [policies_content_injection_replace_match, setpolicies_content_injection_replace_match] = useState(false),\n    updatepolicies_content_injection_replace_match = useCallback((evt) => setpolicies_content_injection_replace_match(evt), []);\n\n\n    const [fetcheddata, setFetcheddata] = React.useState(false);\n    React.useEffect(() => {\n      dataLoad();\n    }, [fetcheddata]);\n    const dataLoad = () => {\n\n      for(var i = 0; i < policies_content_injection_pathsrowData.policies_content_injection_paths.length; i++) {\n        if(policies_content_injection_pathsrowData.policies_content_injection_paths[i].id === window.policies_content_injection_pathsrowId) {\n        setpolicies_content_injection_paths_paths((policies_content_injection_pathsrowData.policies_content_injection_paths[i] !== undefined && policies_content_injection_pathsrowData.policies_content_injection_paths[i].paths !== undefined )?policies_content_injection_pathsrowData.policies_content_injection_paths[i].paths:\"\");\n        }\n      }\n\n\n      return true;\n    };\n\n    const setDataMain = (functionName, data) => {\n      if(functionName && data) {\n        eval(functionName)(data);\n      }\n    };\n\n    return (\n      <div>\n        \n        <div id={'addpolicies_content_injectionPage' + idPrefix} style={{display:'none'}} className=\"bx--col bx--no-gutter\">\n\n          <Tabs id= {\"policies_content_injection_tab\" + idPrefix} defaultTab={\"General_tab\" + idPrefix} vertical className=\"vertical-tabs\" style={{overflow:'auto'}}>\n              <TabList>\n                <Tab tabFor={\"General_tab\" + idPrefix}>General</Tab>\n                <Tab tabFor={\"paths_tab\" + idPrefix}>Paths</Tab>\n              </TabList>\n              <TabPanel style={{width:'100%', overflow:'auto'}} tabId={\"General_tab\" + idPrefix}>\n                <div className=\"iag_sublevel_tabs\" style={{height:'60vh', overflow:'auto'}}>\n                <div className= {\"iag_form_elem iag_tab_heading policies_content_injection_div\" + idPrefix}>\n                  <span className=\"iag_breadcrumb\">Policies / Content Injection : </span><br/>                  <h2>General Settings</h2><hr/>\n                  Specifies the general settings associated with this component\n                </div>\n                <div className={\"iag--simple-div policies_content_injection_div\" + idPrefix}>\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n          <TextInput  value={props.policies_content_injection_content}  id={\"policies_content_injection_content_id\" + idPrefix}  data-tooltip-id={\"policies_content_injection_content_tooltip_id\" + idPrefix}  labelText=\"Content\" onChange={props.updatepolicies_content_injection_content}/>\n          <ReactTooltip id={\"policies_content_injection_content_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The data which is to be injected.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n          <Checkbox checked={props.policies_content_injection_full_line_match} id={\"policies_content_injection_full_line_match_id\" + idPrefix}  data-tooltip-id={\"policies_content_injection_full_line_match_tooltip_id\" + idPrefix}  labelText=\"Full Line Match\" onChange={props.updatepolicies_content_injection_full_line_match}/>\n          <ReactTooltip id={\"policies_content_injection_full_line_match_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>Should the location match a full line, or should it match any string in the response?  When a full line match is configured the content will be inserted prior to the matching line.  When a partial line match is configured the content will be inserted immediately prior to the matching string.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n          <TextInput  value={props.policies_content_injection_location}  id={\"policies_content_injection_location_id\" + idPrefix}  data-tooltip-id={\"policies_content_injection_location_tooltip_id\" + idPrefix}  labelText=\"Location\" onChange={props.updatepolicies_content_injection_location}/>\n          <ReactTooltip id={\"policies_content_injection_location_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The location where the content should be injected. If a full line match is being used the location is pattern matched against a line in the response using the `*.` wildcard characters.  The maximum length of a line which can be matched is 8192 bytes.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n          <TextInput  invalid={!props.policies_content_injection_name_valid}  invalidText={props.policies_content_injection_name_invalid_text}  value={props.policies_content_injection_name}  id={\"policies_content_injection_name_id\" + idPrefix}  data-tooltip-id={\"policies_content_injection_name_tooltip_id\" + idPrefix}  labelText=\"Name *\" onChange={props.updatepolicies_content_injection_name}/>\n          <ReactTooltip id={\"policies_content_injection_name_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>A name to be associated with this content injection rule.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n          <Checkbox checked={props.policies_content_injection_replace_match} id={\"policies_content_injection_replace_match_id\" + idPrefix}  data-tooltip-id={\"policies_content_injection_replace_match_tooltip_id\" + idPrefix}  labelText=\"Replace Match\" onChange={props.updatepolicies_content_injection_replace_match}/>\n          <ReactTooltip id={\"policies_content_injection_replace_match_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>If a partial line match is being used this configuration entry will control whether the matching string is replaced with the supplied content, or whether the supplied content is inserted prior to the matching string.  This configuration entry will be ignored if full line matches are being used.<br/></div></ReactTooltip>\n        </div>\n\n                </div>\n                </div>\n                  <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n                    <Button onClick={() => { handleClose(idPrefix,  doClose); }}>Cancel</Button>\n                    <Button disabled={(!props.policies_content_injection_name || !props.policies_content_injection_name_valid)} onClick={() => { handleSave(loadGrid, idPrefix,  doClose); }}>Save</Button>\n                  </div>\n              </TabPanel>\n              <TabPanel style={{width:'100%', overflow:'auto'}} tabId={\"paths_tab\" + idPrefix}>\n                <div className=\"iag_sublevel_tabs\" style={{height:'60vh', overflow:'auto'}}>\n                <div className= {\"iag_form_elem iag_tab_heading policies_content_injection_div\" + idPrefix}>\n                  <span className=\"iag_breadcrumb\">Policies / Content Injection : </span><br/>                  <h2>Paths Settings</h2><hr/>\n                </div>\n                <div className={\"iag--simple-div policies_content_injection_div\" + idPrefix}>\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n  <h3 tabIndex=\"0\"  data-tooltip-id={\"policies_content_injection_paths_tooltip_id\" + idPrefix} >Paths</h3><hr/>\n</div>\n          <ReactTooltip id={\"policies_content_injection_paths_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The path for which content injection will take place. This entry is an array and can be used to specify multiple paths.<br/></div></ReactTooltip>\n\n                <div id={\"policies_content_injection_pathsTableDiv\" + idPrefix} style={{marginLeft:\"10px\",marginBottom:\"10px\"}}>\n                  <div className={\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n                    <DataTable id={\"policies_content_injection_pathsTable\" + idPrefix} isSortable\n                        headers={policies_content_injection_pathsheaderData}\n                        rows={policies_content_injection_pathsrowData.policies_content_injection_paths}\n                        render={({\n                          rows,\n                          headers,\n                          getHeaderProps,\n                          getRowProps,\n                          getTableProps,\n                          getToolbarProps,\n                          onInputChange,\n                          getTableContainerProps\n                    }) => (\n                      <TableContainer>\n                        <TableToolbar aria-label=\"data table toolbar\">\n                          <TableToolbarContent>\n                            <Button onClick={() => {policies_content_injection_pathshandleAdd(idPrefix, [setpolicies_content_injection_paths_paths(''),    setpolicies_content_injection_paths_paths_valid(true),]);}}>Add</Button>\n                          </TableToolbarContent>\n                        </TableToolbar>\n                        <Table size='normal' {...getTableProps()}>\n                          <TableHead>\n                            <TableRow>\n                              {headers.map(header => (\n                                <TableHeader {...getHeaderProps({ header })}>\n                                  {header.header}\n                                </TableHeader>\n                              ))}\n                              <TableHeader>\n                                  Actions\n                              </TableHeader>\n                            </TableRow>\n                          </TableHead>\n                          <TableBody>\n                            {rows.map(row => (\n                              <TableRow key={row.id}>\n                                {row.cells.map(cell => (\n                                  <TableCell key={cell.id}>{cell.value}</TableCell>\n                                ))}\n                                <TableCell>\n                                  <Suspense fallback={<div></div>}>\n                                    <PoliciescontentInjectionpathsDeleteModal row={row} loadGrid={policies_content_injection_pathsloadGrid} />\n                                  </Suspense>\n                                  <Suspense fallback={<div></div>}>\n                                    <PoliciescontentInjectionpathsEdit  data={policies_content_injection_pathsrowData.policies_content_injection_paths} setData={setDataMain} row={row} loadGrid={policies_content_injection_pathsloadGrid} dataLoad={dataLoad} editing={true} name={\"policies_content_injection_paths\"} idPrefix={idPrefix + \"_add\"} parentIdPrefix={idPrefix} \n            updatepolicies_content_injection_paths_paths={updatepolicies_content_injection_paths_paths} policies_content_injection_paths_paths={policies_content_injection_paths_paths}\n            policies_content_injection_paths_paths_valid={policies_content_injection_paths_paths_valid}\n            policies_content_injection_paths_paths_invalid_text={policies_content_injection_paths_paths_invalid_text}\n                                    />\n                                  </Suspense>\n                                </TableCell>\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </TableContainer>)}\n                    />\n                  </div>\n                </div>\n\n                </div>\n                </div>\n                  <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n                    <Button onClick={() => { handleClose(idPrefix,  doClose); }}>Cancel</Button>\n                    <Button disabled={(!props.policies_content_injection_name || !props.policies_content_injection_name_valid)} onClick={() => { handleSave(loadGrid, idPrefix,  doClose); }}>Save</Button>\n                  </div>\n              </TabPanel>\n          </Tabs>\n                  <Suspense fallback={<div></div>}>\n                    <PoliciescontentInjectionpathsAdd loadGrid={policies_content_injection_pathsloadGrid} doClose={() => {closeAdd(idPrefix);}} idPrefix={idPrefix} \n            updatepolicies_content_injection_paths_paths={updatepolicies_content_injection_paths_paths} policies_content_injection_paths_paths={policies_content_injection_paths_paths}\n            policies_content_injection_paths_paths_valid={policies_content_injection_paths_paths_valid}\n            policies_content_injection_paths_paths_invalid_text={policies_content_injection_paths_paths_invalid_text}\n                    />\n                  </Suspense>\n                  <Suspense fallback={<div></div>}>\n                    <PoliciescontentInjectionpathsEdit  loadGrid={policies_content_injection_pathsloadGrid} dataLoad={dataLoad} name={\"policies_content_injection_paths\"} idPrefix={idPrefix + \"_add\"} parentIdPrefix={idPrefix} \n            updatepolicies_content_injection_paths_paths={updatepolicies_content_injection_paths_paths} policies_content_injection_paths_paths={policies_content_injection_paths_paths}\n            policies_content_injection_paths_paths_valid={policies_content_injection_paths_paths_valid}\n            policies_content_injection_paths_paths_invalid_text={policies_content_injection_paths_paths_invalid_text}\n                    />\n                  </Suspense>\n        </div>\n        </div>\n    );\n}\n\nexport default Policies_content_injectionAdd;\n"],"names":["PoliciescontentInjectionpathsDeleteModal","lazy","PoliciescontentInjectionpathsAdd","PoliciescontentInjectionpathsEdit","handleChange","handleSave","loadGrid","idPrefix","doClose","undefined","json","document","getElementById","value","endsWith","checked","toString","policies_content_injection_pathsrowData","policies_content_injection_paths","handleClose","handleAdd","setpolicies_content_injection_paths","doAdd","updateStyle","style","display","closeAdd","policies_content_injection_pathsheaderData","header","key","policies_content_injection_pathshandleAdd","clearFields","i","length","eval","Policies_content_injectionAdd","props","row","React","fetchedpolicies_content_injection_paths","setFetchedpolicies_content_injection_paths","policies_content_injection_pathsloadGrid","async","policies_content_injection_paths_paths","add","attrs","tempId","paths","window","policies_content_injection_pathsediting","policies_content_injection_pathsrowId","push","newId","id","e","console","log","policies_content_injection_content","setpolicies_content_injection_content","useState","updatepolicies_content_injection_content","useCallback","evt","target","policies_content_injection_full_line_match","setpolicies_content_injection_full_line_match","updatepolicies_content_injection_full_line_match","policies_content_injection_location","setpolicies_content_injection_location","updatepolicies_content_injection_location","policies_content_injection_name","setpolicies_content_injection_name","updatepolicies_content_injection_name","setpolicies_content_injection_paths_paths","updatepolicies_content_injection_paths_paths","validateField","setpolicies_content_injection_paths_paths_valid","setpolicies_content_injection_paths_paths_invalid_text","policies_content_injection_paths_paths_valid","policies_content_injection_paths_paths_invalid_text","policies_content_injection_replace_match","setpolicies_content_injection_replace_match","updatepolicies_content_injection_replace_match","fetcheddata","setFetcheddata","dataLoad","setDataMain","functionName","data","_jsx","children","_jsxs","className","Tabs","defaultTab","vertical","overflow","TabList","Tab","tabFor","TabPanel","width","tabId","height","TextInput","labelText","onChange","ReactTooltip","clickable","place","effect","maxWidth","Checkbox","invalid","policies_content_injection_name_valid","invalidText","policies_content_injection_name_invalid_text","Button","onClick","disabled","tabIndex","marginLeft","marginBottom","DataTable","isSortable","headers","rows","render","_ref","getHeaderProps","getRowProps","getTableProps","getToolbarProps","onInputChange","getTableContainerProps","TableContainer","TableToolbar","TableToolbarContent","Table","_objectSpread","size","TableHead","TableRow","map","TableHeader","TableBody","cells","cell","TableCell","Suspense","fallback","setData","editing","name","parentIdPrefix"],"sourceRoot":""}