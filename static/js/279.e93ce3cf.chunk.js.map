{"version":3,"sources":["content/policiesPage/policiescontent_injectionAdd.js"],"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","PoliciescontentInjectionpathsDeleteModal","lazy","all","__webpack_require__","e","bind","PoliciescontentInjectionpathsAdd","PoliciescontentInjectionpathsEdit","handleChange","handleSave","loadGrid","idPrefix","doClose","json","document","getElementById","endsWith","checked","toString","policies_content_injection_pathsrowData","policies_content_injection_paths","handleClose","handleAdd","setpolicies_content_injection_paths","doAdd","updateStyle","style","display","closeAdd","policies_content_injection_pathsheaderData","header","policies_content_injection_pathshandleAdd","clearFields","eval","Policies_content_injectionAdd","props","row","_React$useState","React","useState","_React$useState2","_slicedToArray","_React$useState3","_React$useState4","fetchedpolicies_content_injection_paths","setFetchedpolicies_content_injection_paths","useEffect","policies_content_injection_pathsloadGrid","useCallback","_ref","_asyncToGenerator","_callee","policies_content_injection_paths_paths","add","attrs","tempId","newId","_context","paths","window","policies_content_injection_pathsediting","policies_content_injection_pathsrowId","id","console","log","_x","_x2","apply","arguments","_useState","_useState2","policies_content_injection_name","setpolicies_content_injection_name","updatepolicies_content_injection_name","evt","target","_useState3","_useState4","setpolicies_content_injection_paths_paths","updatepolicies_content_injection_paths_paths","validateField","setpolicies_content_injection_paths_paths_valid","setpolicies_content_injection_paths_paths_invalid_text","_useState5","_useState6","policies_content_injection_paths_paths_valid","_useState7","_useState8","policies_content_injection_paths_paths_invalid_text","_useState9","_useState10","policies_content_injection_full_line_match","setpolicies_content_injection_full_line_match","updatepolicies_content_injection_full_line_match","_useState11","_useState12","policies_content_injection_location","setpolicies_content_injection_location","updatepolicies_content_injection_location","_useState13","_useState14","policies_content_injection_replace_match","setpolicies_content_injection_replace_match","updatepolicies_content_injection_replace_match","_useState15","_useState16","policies_content_injection_content","setpolicies_content_injection_content","updatepolicies_content_injection_content","_React$useState5","_React$useState6","fetcheddata","setFetcheddata","dataLoad","setDataMain","functionName","data","createElement","className","Tabs","defaultTab","vertical","overflow","TabList","Tab","tabFor","TabPanel","width","tabId","height","TextInput","invalid","policies_content_injection_name_valid","invalidText","policies_content_injection_name_invalid_text","onFocus","ReactTooltip","show","onBlur","hide","data-tip","data-for","labelText","onChange","place","effect","maxWidth","Checkbox","Button","onClick","disabled","tabIndex","marginLeft","marginBottom","DataTable","isSortable","headers","rows","render","_ref2","getHeaderProps","getTableProps","getRowProps","getToolbarProps","onInputChange","getTableContainerProps","TableContainer","TableToolbar","aria-label","TableToolbarContent","Table","assign","size","TableHead","TableRow","map","TableHeader","TableBody","cells","cell","TableCell","Suspense","fallback","setData","editing","parentIdPrefix"],"mappings":"ymEACAA,oBAAA,kBAAAC,GAAA,IAAAA,EAAA,GAAAC,EAAAC,OAAAC,UAAAC,EAAAH,EAAAI,eAAAC,EAAAJ,OAAAI,gBAAA,SAAAC,EAAAC,EAAAC,GAAAF,EAAAC,GAAAC,EAAAC,OAAAC,EAAA,mBAAAC,cAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,eAAA,kBAAAC,EAAAN,EAAAO,aAAA,yBAAAC,EAAAZ,EAAAC,EAAAE,GAAA,OAAAR,OAAAI,eAAAC,EAAAC,EAAA,CAAAE,QAAAU,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAf,EAAAC,GAAA,IAAAW,EAAA,aAAAI,GAAAJ,EAAA,SAAAZ,EAAAC,EAAAE,GAAA,OAAAH,EAAAC,GAAAE,GAAA,SAAAc,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,KAAAvB,qBAAA2B,EAAAJ,EAAAI,EAAAC,EAAA7B,OAAA8B,OAAAH,EAAA1B,WAAA8B,EAAA,IAAAC,EAAAN,GAAA,WAAAtB,EAAAyB,EAAA,WAAArB,MAAAyB,EAAAV,EAAAE,EAAAM,KAAAF,EAAA,SAAAK,EAAAC,EAAA9B,EAAA+B,GAAA,WAAAC,KAAA,SAAAD,IAAAD,EAAAG,KAAAjC,EAAA+B,IAAA,MAAAf,GAAA,OAAAgB,KAAA,QAAAD,IAAAf,IAAAvB,EAAAwB,OAAA,IAAAiB,EAAA,YAAAX,KAAA,SAAAY,KAAA,SAAAC,KAAA,IAAAC,EAAA,GAAAzB,EAAAyB,EAAA/B,EAAA,kBAAAgC,OAAA,IAAAC,EAAA5C,OAAA6C,eAAAC,EAAAF,OAAAG,EAAA,MAAAD,OAAA/C,GAAAG,EAAAoC,KAAAQ,EAAAnC,KAAA+B,EAAAI,GAAA,IAAAE,EAAAP,EAAAxC,UAAA2B,EAAA3B,UAAAD,OAAA8B,OAAAY,GAAA,SAAAO,EAAAhD,GAAA,0BAAAiD,QAAA,SAAAC,GAAAlC,EAAAhB,EAAAkD,EAAA,SAAAf,GAAA,OAAAO,KAAAS,QAAAD,EAAAf,OAAA,SAAAiB,EAAAxB,EAAAyB,GAAA,IAAAC,EAAAnD,EAAAuC,KAAA,WAAAnC,MAAA,SAAA2C,EAAAf,GAAA,SAAAoB,IAAA,WAAAF,EAAA,SAAAG,EAAAC,IAAA,SAAAC,EAAAR,EAAAf,EAAAqB,EAAAC,GAAA,IAAAE,EAAA1B,EAAAL,EAAAsB,GAAAtB,EAAAO,GAAA,aAAAwB,EAAAvB,KAAA,KAAAwB,EAAAD,EAAAxB,IAAA5B,EAAAqD,EAAArD,MAAA,OAAAA,GAAA,iBAAAA,GAAAN,EAAAoC,KAAA9B,EAAA,WAAA8C,EAAAG,QAAAjD,EAAAsD,SAAAC,KAAA,SAAAvD,GAAAmD,EAAA,OAAAnD,EAAAiD,EAAAC,IAAA,SAAArC,GAAAsC,EAAA,QAAAtC,EAAAoC,EAAAC,KAAAJ,EAAAG,QAAAjD,GAAAuD,KAAA,SAAAC,GAAAH,EAAArD,MAAAwD,EAAAP,EAAAI,IAAA,SAAAI,GAAA,OAAAN,EAAA,QAAAM,EAAAR,EAAAC,OAAAE,EAAAxB,KAAAuB,CAAAR,EAAAf,EAAAqB,EAAAC,KAAA,OAAAH,MAAAQ,KAAAP,YAAA,SAAAvB,EAAAV,EAAAE,EAAAM,GAAA,IAAAmC,EAAA,iCAAAf,EAAAf,GAAA,iBAAA8B,EAAA,UAAAC,MAAA,iDAAAD,EAAA,cAAAf,EAAA,MAAAf,EAAA,OAAAgC,IAAA,IAAArC,EAAAoB,SAAApB,EAAAK,QAAA,KAAAiC,EAAAtC,EAAAsC,SAAA,GAAAA,EAAA,KAAAC,EAAAC,EAAAF,EAAAtC,GAAA,GAAAuC,EAAA,IAAAA,IAAA/B,EAAA,gBAAA+B,GAAA,YAAAvC,EAAAoB,OAAApB,EAAAyC,KAAAzC,EAAA0C,MAAA1C,EAAAK,SAAA,aAAAL,EAAAoB,OAAA,uBAAAe,EAAA,MAAAA,EAAA,YAAAnC,EAAAK,IAAAL,EAAA2C,kBAAA3C,EAAAK,SAAA,WAAAL,EAAAoB,QAAApB,EAAA4C,OAAA,SAAA5C,EAAAK,KAAA8B,EAAA,gBAAAN,EAAA1B,EAAAX,EAAAE,EAAAM,GAAA,cAAA6B,EAAAvB,KAAA,IAAA6B,EAAAnC,EAAA6C,KAAA,6BAAAhB,EAAAxB,MAAAG,EAAA,gBAAA/B,MAAAoD,EAAAxB,IAAAwC,KAAA7C,EAAA6C,MAAA,UAAAhB,EAAAvB,OAAA6B,EAAA,YAAAnC,EAAAoB,OAAA,QAAApB,EAAAK,IAAAwB,EAAAxB,OAAA,SAAAmC,EAAAF,EAAAtC,GAAA,IAAA8C,EAAA9C,EAAAoB,SAAAkB,EAAAzD,SAAAiE,GAAA,QAAAC,IAAA3B,EAAA,OAAApB,EAAAsC,SAAA,eAAAQ,GAAAR,EAAAzD,SAAAmE,SAAAhD,EAAAoB,OAAA,SAAApB,EAAAK,SAAA0C,EAAAP,EAAAF,EAAAtC,GAAA,UAAAA,EAAAoB,SAAA,WAAA0B,IAAA9C,EAAAoB,OAAA,QAAApB,EAAAK,IAAA,IAAA4C,UAAA,oCAAAH,EAAA,aAAAtC,EAAA,IAAAqB,EAAA1B,EAAAiB,EAAAkB,EAAAzD,SAAAmB,EAAAK,KAAA,aAAAwB,EAAAvB,KAAA,OAAAN,EAAAoB,OAAA,QAAApB,EAAAK,IAAAwB,EAAAxB,IAAAL,EAAAsC,SAAA,KAAA9B,EAAA,IAAA0C,EAAArB,EAAAxB,IAAA,OAAA6C,IAAAL,MAAA7C,EAAAsC,EAAAa,YAAAD,EAAAzE,MAAAuB,EAAAoD,KAAAd,EAAAe,QAAA,WAAArD,EAAAoB,SAAApB,EAAAoB,OAAA,OAAApB,EAAAK,SAAA0C,GAAA/C,EAAAsC,SAAA,KAAA9B,GAAA0C,GAAAlD,EAAAoB,OAAA,QAAApB,EAAAK,IAAA,IAAA4C,UAAA,oCAAAjD,EAAAsC,SAAA,KAAA9B,GAAA,SAAA8C,EAAAC,GAAA,IAAAC,EAAA,CAAAC,OAAAF,EAAA,SAAAA,IAAAC,EAAAE,SAAAH,EAAA,SAAAA,IAAAC,EAAAG,WAAAJ,EAAA,GAAAC,EAAAI,SAAAL,EAAA,IAAA3C,KAAAiD,WAAAC,KAAAN,GAAA,SAAAO,EAAAP,GAAA,IAAA3B,EAAA2B,EAAAQ,YAAA,GAAAnC,EAAAvB,KAAA,gBAAAuB,EAAAxB,IAAAmD,EAAAQ,WAAAnC,EAAA,SAAA5B,EAAAN,GAAAiB,KAAAiD,WAAA,EAAAJ,OAAA,SAAA9D,EAAAwB,QAAAmC,EAAA1C,WAAAqD,OAAA,YAAAjD,EAAAkD,GAAA,GAAAA,EAAA,KAAAC,EAAAD,EAAAtF,GAAA,GAAAuF,EAAA,OAAAA,EAAA5D,KAAA2D,GAAA,sBAAAA,EAAAd,KAAA,OAAAc,EAAA,IAAAE,MAAAF,EAAAG,QAAA,KAAAC,GAAA,EAAAlB,EAAA,SAAAA,IAAA,OAAAkB,EAAAJ,EAAAG,QAAA,GAAAlG,EAAAoC,KAAA2D,EAAAI,GAAA,OAAAlB,EAAA3E,MAAAyF,EAAAI,GAAAlB,EAAAP,MAAA,EAAAO,EAAA,OAAAA,EAAA3E,WAAAsE,EAAAK,EAAAP,MAAA,EAAAO,GAAA,OAAAA,UAAA,OAAAA,KAAAf,GAAA,SAAAA,IAAA,OAAA5D,WAAAsE,EAAAF,MAAA,UAAApC,EAAAvC,UAAAwC,EAAArC,EAAA4C,EAAA,eAAAxC,MAAAiC,EAAAtB,cAAA,IAAAf,EAAAqC,EAAA,eAAAjC,MAAAgC,EAAArB,cAAA,IAAAqB,EAAA8D,YAAArF,EAAAwB,EAAA1B,EAAA,qBAAAjB,EAAAyG,oBAAA,SAAAC,GAAA,IAAAC,EAAA,mBAAAD,KAAAE,YAAA,QAAAD,QAAAjE,GAAA,uBAAAiE,EAAAH,aAAAG,EAAAE,QAAA7G,EAAA8G,KAAA,SAAAJ,GAAA,OAAAxG,OAAA6G,eAAA7G,OAAA6G,eAAAL,EAAA/D,IAAA+D,EAAAM,UAAArE,EAAAxB,EAAAuF,EAAAzF,EAAA,sBAAAyF,EAAAvG,UAAAD,OAAA8B,OAAAkB,GAAAwD,GAAA1G,EAAAiH,MAAA,SAAA3E,GAAA,OAAA0B,QAAA1B,IAAAa,EAAAI,EAAApD,WAAAgB,EAAAoC,EAAApD,UAAAY,EAAA,kBAAA8B,OAAA7C,EAAAuD,gBAAAvD,EAAAkH,MAAA,SAAAzF,EAAAC,EAAAC,EAAAC,EAAA4B,QAAA,IAAAA,MAAA2D,SAAA,IAAAC,EAAA,IAAA7D,EAAA/B,EAAAC,EAAAC,EAAAC,EAAAC,GAAA4B,GAAA,OAAAxD,EAAAyG,oBAAA/E,GAAA0F,IAAA/B,OAAApB,KAAA,SAAAF,GAAA,OAAAA,EAAAe,KAAAf,EAAArD,MAAA0G,EAAA/B,UAAAlC,EAAAD,GAAA/B,EAAA+B,EAAAjC,EAAA,aAAAE,EAAA+B,EAAArC,EAAA,kBAAAgC,OAAA1B,EAAA+B,EAAA,mDAAAlD,EAAAqH,KAAA,SAAAC,GAAA,IAAAC,EAAArH,OAAAoH,GAAAD,EAAA,WAAA7G,KAAA+G,EAAAF,EAAAtB,KAAAvF,GAAA,OAAA6G,EAAAG,UAAA,SAAAnC,IAAA,KAAAgC,EAAAf,QAAA,KAAA9F,EAAA6G,EAAAI,MAAA,GAAAjH,KAAA+G,EAAA,OAAAlC,EAAA3E,MAAAF,EAAA6E,EAAAP,MAAA,EAAAO,EAAA,OAAAA,EAAAP,MAAA,EAAAO,IAAArF,EAAAiD,SAAAf,EAAA/B,UAAA,CAAAyG,YAAA1E,EAAAgE,MAAA,SAAAwB,GAAA,GAAA7E,KAAA8E,KAAA,EAAA9E,KAAAwC,KAAA,EAAAxC,KAAA6B,KAAA7B,KAAA8B,WAAAK,EAAAnC,KAAAiC,MAAA,EAAAjC,KAAA0B,SAAA,KAAA1B,KAAAQ,OAAA,OAAAR,KAAAP,SAAA0C,EAAAnC,KAAAiD,WAAA1C,QAAA4C,IAAA0B,EAAA,QAAAb,KAAAhE,KAAA,MAAAgE,EAAAe,OAAA,IAAAxH,EAAAoC,KAAAK,KAAAgE,KAAAR,OAAAQ,EAAAgB,MAAA,MAAAhF,KAAAgE,QAAA7B,IAAA8C,KAAA,WAAAjF,KAAAiC,MAAA,MAAAiD,EAAAlF,KAAAiD,WAAA,GAAAG,WAAA,aAAA8B,EAAAxF,KAAA,MAAAwF,EAAAzF,IAAA,OAAAO,KAAAmF,MAAApD,kBAAA,SAAAqD,GAAA,GAAApF,KAAAiC,KAAA,MAAAmD,EAAA,IAAAhG,EAAAY,KAAA,SAAAqF,EAAAC,EAAAC,GAAA,OAAAtE,EAAAvB,KAAA,QAAAuB,EAAAxB,IAAA2F,EAAAhG,EAAAoD,KAAA8C,EAAAC,IAAAnG,EAAAoB,OAAA,OAAApB,EAAAK,SAAA0C,KAAAoD,EAAA,QAAA7B,EAAA1D,KAAAiD,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAA5C,KAAAiD,WAAAS,GAAAzC,EAAA2B,EAAAQ,WAAA,YAAAR,EAAAC,OAAA,OAAAwC,EAAA,UAAAzC,EAAAC,QAAA7C,KAAA8E,KAAA,KAAAU,EAAAjI,EAAAoC,KAAAiD,EAAA,YAAA6C,EAAAlI,EAAAoC,KAAAiD,EAAA,iBAAA4C,GAAAC,EAAA,IAAAzF,KAAA8E,KAAAlC,EAAAE,SAAA,OAAAuC,EAAAzC,EAAAE,UAAA,MAAA9C,KAAA8E,KAAAlC,EAAAG,WAAA,OAAAsC,EAAAzC,EAAAG,iBAAA,GAAAyC,GAAA,GAAAxF,KAAA8E,KAAAlC,EAAAE,SAAA,OAAAuC,EAAAzC,EAAAE,UAAA,YAAA2C,EAAA,UAAAjE,MAAA,6CAAAxB,KAAA8E,KAAAlC,EAAAG,WAAA,OAAAsC,EAAAzC,EAAAG,gBAAAf,OAAA,SAAAtC,EAAAD,GAAA,QAAAiE,EAAA1D,KAAAiD,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAA5C,KAAAiD,WAAAS,GAAA,GAAAd,EAAAC,QAAA7C,KAAA8E,MAAAvH,EAAAoC,KAAAiD,EAAA,eAAA5C,KAAA8E,KAAAlC,EAAAG,WAAA,KAAA2C,EAAA9C,EAAA,OAAA8C,IAAA,UAAAhG,GAAA,aAAAA,IAAAgG,EAAA7C,QAAApD,MAAAiG,EAAA3C,aAAA2C,EAAA,UAAAzE,EAAAyE,IAAAtC,WAAA,UAAAnC,EAAAvB,OAAAuB,EAAAxB,MAAAiG,GAAA1F,KAAAQ,OAAA,OAAAR,KAAAwC,KAAAkD,EAAA3C,WAAAnD,GAAAI,KAAA2F,SAAA1E,IAAA0E,SAAA,SAAA1E,EAAA+B,GAAA,aAAA/B,EAAAvB,KAAA,MAAAuB,EAAAxB,IAAA,gBAAAwB,EAAAvB,MAAA,aAAAuB,EAAAvB,KAAAM,KAAAwC,KAAAvB,EAAAxB,IAAA,WAAAwB,EAAAvB,MAAAM,KAAAmF,KAAAnF,KAAAP,IAAAwB,EAAAxB,IAAAO,KAAAQ,OAAA,SAAAR,KAAAwC,KAAA,kBAAAvB,EAAAvB,MAAAsD,IAAAhD,KAAAwC,KAAAQ,GAAApD,GAAAgG,OAAA,SAAA7C,GAAA,QAAAW,EAAA1D,KAAAiD,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAA5C,KAAAiD,WAAAS,GAAA,GAAAd,EAAAG,eAAA,OAAA/C,KAAA2F,SAAA/C,EAAAQ,WAAAR,EAAAI,UAAAG,EAAAP,GAAAhD,IAAAiG,MAAA,SAAAhD,GAAA,QAAAa,EAAA1D,KAAAiD,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAA5C,KAAAiD,WAAAS,GAAA,GAAAd,EAAAC,WAAA,KAAA5B,EAAA2B,EAAAQ,WAAA,aAAAnC,EAAAvB,KAAA,KAAAoG,EAAA7E,EAAAxB,IAAA0D,EAAAP,GAAA,OAAAkD,GAAA,UAAAtE,MAAA,0BAAAuE,cAAA,SAAAzC,EAAAf,EAAAE,GAAA,OAAAzC,KAAA0B,SAAA,CAAAzD,SAAAmC,EAAAkD,GAAAf,aAAAE,WAAA,SAAAzC,KAAAQ,SAAAR,KAAAP,SAAA0C,GAAAvC,IAAAzC,EA0BA,IAAM6I,yCAA2CC,gDAAK,kBAAM3B,QAAA4B,IAAA,CAAAC,oBAAAC,EAAA,IAAAD,oBAAAC,EAAA,OAAAhF,KAAA+E,oBAAAE,KAAA,aACtDC,iCAAmCL,gDAAK,kBAAME,oBAAAC,EAAA,IAAAhF,KAAA+E,oBAAAE,KAAA,aAC9CE,kCAAoCN,gDAAK,kBAAME,oBAAAC,EAAA,IAAAhF,KAAA+E,oBAAAE,KAAA,aAG7CG,aAAe,aAGfC,WAAa,SAACC,EAAUC,EAAUC,QAEtBzE,IAAbwE,IAAwBA,EAAW,IAEtC,IAAIE,EAAO,IAEyF,IAAjGC,SAASC,eAAe,qCAAuCJ,GAAU9I,MAAMmJ,SAAS,OACzFH,EAAsC,gCAAIC,SAASC,eAAe,qCAAuCJ,GAAU9I,OAErHgJ,EAAiD,2CAAIC,SAASC,eAAe,gDAAkDJ,GAAUM,QAAQC,YACzC,IAArGJ,SAASC,eAAe,yCAA2CJ,GAAU9I,MAAMmJ,SAAS,OAC7FH,EAA0C,oCAAIC,SAASC,eAAe,yCAA2CJ,GAAU9I,OAE7HgJ,EAA+C,yCAAIC,SAASC,eAAe,8CAAgDJ,GAAUM,QAAQC,YACtC,IAApGJ,SAASC,eAAe,wCAA0CJ,GAAU9I,MAAMmJ,SAAS,OAC5FH,EAAyC,mCAAIC,SAASC,eAAe,wCAA0CJ,GAAU9I,OAE3HgJ,EAAuC,iCAAIM,wCAAwCC,iCAEnFV,EAAUG,EAAsC,gCAAGA,EAAiD,2CAAGA,EAA0C,oCAAGA,EAA+C,yCAAGA,EAAyC,mCAAGA,EAAuC,kCAAG,GAE5RQ,YAAYV,EAAUC,IAGlBU,UAAY,SAACC,EAAqCZ,EAAUa,EAAOZ,QACvDzE,IAAbwE,IAAwBA,EAAW,IAGtCG,SAASC,eAAe,sCAAsClJ,MAAQ,GACtEiJ,SAASC,eAAe,iDAAiDE,SAAU,EACnFH,SAASC,eAAe,0CAA0ClJ,MAAQ,GAC1EiJ,SAASC,eAAe,+CAA+CE,SAAU,EACjFH,SAASC,eAAe,yCAAyClJ,MAAQ,GACzEsJ,wCAAwCC,iCAAmC,GAC3EG,EAAoCJ,wCAAwCC,kCAGzEI,GACDA,IAGFH,YAAYV,EAAWC,IAGnBS,YAAc,SAACV,EAAUC,GAC7Ba,iDAAY,eAAiBd,EAAU,UAAW,SAClDG,SAASC,eAAe,oCAAsCJ,GAAUe,MAAMC,QAAU,OAEnFf,GACDA,KAIAgB,SAAW,SAACjB,QACExE,IAAbwE,IAAwBA,EAAW,IAEtCc,iDAAY,iCAAmCd,EAAU,UAAW,SACpEG,SAASC,eAAe,iCAAmCJ,GAAUe,MAAMC,QAAU,QAIrFE,2CAA6C,CAC/C,CACAC,OAAQ,OACRnK,IAAK,UAKHwJ,wCAA0C,CAACC,iCAAkC,IAE7EW,0CAA4C,SAA5CA,0CAA6CpB,SAAUqB,aAIzD,QAHgB7F,IAAbwE,WAAwBA,SAAW,IAGnCqB,YACD,IAAI,IAAItE,EAAI,EAAGA,EAAIsE,YAAYvE,OAAQC,IACrCuE,KAAKD,YAAYtE,IAIrBoD,SAASC,eAAe,4CAA8CJ,UAAU9I,MAAQ,GAExF4J,iDAAY,iCAAmCd,SAAU,UAAW,QAEpEG,SAASC,eAAe,yCAA2CJ,UAAUe,MAAMC,QAAU,QAE7Fb,SAASC,eAAe,iCAAmCJ,UAAUe,MAAMC,QAAU,QAInFO,8BAAgC,SAAhCA,8BAAiCC,OAEnC,IAAIC,IAAMD,MAAMC,IACV1B,SAAWyB,MAAMzB,SACjBE,QAAUuB,MAAMvB,QAChBD,SAAYwB,MAAMxB,SAAUwB,MAAMxB,SAAS,GAAG0B,gBAE4BC,6CAAMC,SAAS,IAAGC,iBAAAC,8KAAAJ,gBAAA,GAA3FjB,iCAAgCoB,iBAAA,GAAEjB,oCAAmCiB,iBAAA,GAAAE,iBACkBJ,6CAAMC,UAAS,GAAMI,iBAAAF,8KAAAC,iBAAA,GAA5GE,wCAAuCD,iBAAA,GAAEE,2CAA0CF,iBAAA,GAE1FL,6CAAMQ,UAAU,WACdC,4CACC,CAACH,0CAEJ,IAAMG,yCAA2CT,6CAAMU,YAAW,eAAAC,EAAAC,iLAAAhM,sBAAA+G,KAAC,SAAAkF,EAAOC,EAAwCC,GAAG,IAAAC,EAAA5F,EAAA6F,EAAAC,EAAA,OAAAtM,sBAAAyB,KAAA,SAAA8K,GAAA,cAAAA,EAAA3E,KAAA2E,EAAAjH,MAAA,OACnH,IAEE,GADI8G,EAAQ,GACTF,EACD,GAAGC,EAAK,CACN,IAAQ3F,EAAI,EAAGA,EAAIyD,wCAAwCC,iCAAiC3D,OAAQC,IAC9F6F,GAAWpC,wCAAwCC,iCAAiC1D,GAAGgG,MAAOvC,wCAAwCC,iCAAiC1D,GAAGgG,MAAM,IAAM,IACpI,GAAlDC,OAAOC,yCAAqG,QAAlDD,OAAOC,yCAAsDL,GAAUI,OAAOE,wCAC1IP,EAAMpG,KAAKiE,wCAAwCC,iCAAiC1D,IAGpF8F,GAAUJ,GAA+E,IAAM,GACnGE,EAAMpG,KAAK,CACT4G,GAAIN,EACJE,MAAON,SAIT,IAAQ1F,EAAI,EAAGA,EAAIyD,wCAAwCC,iCAAiC3D,OAAQC,IAC/FyD,wCAAwCC,iCAAiC1D,GAAGgG,QAAUN,GACvFE,EAAMpG,KAAKiE,wCAAwCC,iCAAiC1D,SAK1F4F,EAAQnC,wCAAwCC,iCAElDD,wCAAwCC,iCAAmCkC,EAE3E/B,oCADa,CAACH,iCAAkCkC,GACPlC,uCAEKjF,IAA3CiH,GAAmG,OAA3CA,GACvD5C,eAIJ,MAAOJ,GACP2D,QAAQC,IAAI5D,GACb,OAAAqD,EAAAzH,OAAA,UACM,GAAI,wBAAAyH,EAAAxE,SAAAkE,MACZ,gBAAAc,EAAAC,GAAA,OAAAjB,EAAAkB,MAAAnK,KAAAoK,YAxCiE,IAwC/DC,UAI2E9B,oDAAS,IAAG+B,WAAA7B,8KAAA4B,UAAA,GAAnFE,gCAA+BD,WAAA,GAAEE,mCAAkCF,WAAA,GAC1EG,sCAAwCzB,uDAAY,SAAC0B,GAAG,OAAKF,mCAAmCE,EAAIC,OAAO9M,QAAQ,IAAG+M,WAE1BrC,oDAAS,IAAGsC,WAAApC,8KAAAmC,WAAA,GAAjGxB,uCAAsCyB,WAAA,GAAEC,0CAAyCD,WAAA,GACxFE,6CAA+C/B,uDAAY,SAAC0B,GAC1DI,0CAA0CJ,EAAIC,OAAO9M,OACrD,IAAI0L,EAASmB,EAAIC,OAAO9M,MACxBmN,iDAAc7D,wCAAwCC,iCAAkC6D,gDAAiDC,uDAAwD,mCAAoC,QAAS3B,IAC7O,IAAG4B,WAEkG5C,qDAAS,GAAK6C,WAAA3C,8KAAA0C,WAAA,GAA/GE,6CAA4CD,WAAA,GAAEH,gDAA+CG,WAAA,GAAAE,WACkB/C,oDAAS,IAAGgD,WAAA9C,8KAAA6C,WAAA,GAA3HE,oDAAmDD,WAAA,GAAEL,uDAAsDK,WAAA,GAAAE,WAGdlD,qDAAS,GAAKmD,YAAAjD,8KAAAgD,WAAA,GAA3GE,2CAA0CD,YAAA,GAAEE,8CAA6CF,YAAA,GAChGG,iDAAmD7C,uDAAY,SAAC0B,GAAG,OAAKkB,8CAA8ClB,IAAM,IAAGoB,YAEzCvD,oDAAS,IAAGwD,YAAAtD,8KAAAqD,YAAA,GAA3FE,oCAAmCD,YAAA,GAAEE,uCAAsCF,YAAA,GAClFG,0CAA4ClD,uDAAY,SAAC0B,GAAG,OAAKuB,uCAAuCvB,EAAIC,OAAO9M,QAAQ,IAAGsO,YAE9B5D,qDAAS,GAAM6D,YAAA3D,8KAAA0D,YAAA,GAAxGE,yCAAwCD,YAAA,GAAEE,4CAA2CF,YAAA,GAC5FG,+CAAiDvD,uDAAY,SAAC0B,GAAG,OAAK4B,4CAA4C5B,IAAM,IAAG8B,YAEvCjE,oDAAS,IAAGkE,YAAAhE,8KAAA+D,YAAA,GAAzFE,mCAAkCD,YAAA,GAAEE,sCAAqCF,YAAA,GAChFG,yCAA2C5D,uDAAY,SAAC0B,GAAG,OAAKiC,sCAAsCjC,EAAIC,OAAO9M,QAAQ,IAAGgP,iBAGtFvE,6CAAMC,UAAS,GAAMuE,iBAAArE,8KAAAoE,iBAAA,GAApDE,YAAWD,iBAAA,GAAEE,eAAcF,iBAAA,GAClCxE,6CAAMQ,UAAU,WACdmE,YACC,CAACF,cACJ,IAAME,SAAW,WAEf,IAAI,IAAIvJ,EAAI,EAAGA,EAAIyD,wCAAwCC,iCAAiC3D,OAAQC,IAC/FyD,wCAAwCC,iCAAiC1D,GAAGoG,KAAOH,OAAOE,uCAC7FiB,+CAA2H3I,IAAhFgF,wCAAwCC,iCAAiC1D,SAA0GvB,IAAtFgF,wCAAwCC,iCAAiC1D,GAAGgG,MAAsBvC,wCAAwCC,iCAAiC1D,GAAGgG,MAAM,IAK9T,OAAO,GAGHwD,YAAc,SAAdA,YAAeC,aAAcC,MAC9BD,cAAgBC,MACjBnF,KAAKkF,aAALlF,CAAmBmF,OAIvB,OACE9E,6CAAA+E,cAAA,WAEE/E,6CAAA+E,cAAA,OAAKvD,GAAI,oCAAsCnD,SAAUe,MAAO,CAACC,QAAQ,QAAS2F,UAAU,yBAE1FhF,6CAAA+E,cAACE,+CAAI,CAACzD,GAAK,iCAAmCnD,SAAU6G,WAAY,cAAgB7G,SAAU8G,UAAQ,EAACH,UAAU,gBAAgB5F,MAAO,CAACgG,SAAS,SAC9IpF,6CAAA+E,cAACM,+CAAO,KACNrF,6CAAA+E,cAACO,+CAAG,CAACC,OAAQ,cAAgBlH,UAAU,WACvC2B,6CAAA+E,cAACO,+CAAG,CAACC,OAAQ,YAAclH,UAAU,UAEvC2B,6CAAA+E,cAACS,+CAAQ,CAACpG,MAAO,CAACqG,MAAM,OAAQL,SAAS,QAASM,MAAO,cAAgBrH,UACvE2B,6CAAA+E,cAAA,OAAKC,UAAU,oBAAoB5F,MAAO,CAACuG,OAAO,OAAQP,SAAS,SACnEpF,6CAAA+E,cAAA,OAAKC,UAAY,+DAAiE3G,UAChF2B,6CAAA+E,cAAA,QAAMC,UAAU,kBAAiB,mCAAsChF,6CAAA+E,cAAA,WAAK,qBAAkB/E,6CAAA+E,cAAA,UAAI,oBAAqB/E,6CAAA+E,cAAA,WAAK,iEAG9H/E,6CAAA+E,cAAA,OAAKC,UAAW,iDAAmD3G,UACnE2B,6CAAA+E,cAAA,OAAKC,UAAY,+CAAiD3G,UACxE2B,6CAAA+E,cAACa,uDAAS,CAAEC,SAAUhG,MAAMiG,sCAAwCC,YAAalG,MAAMmG,6CAA+CzQ,MAAOsK,MAAMoC,gCAAkCT,GAAI,qCAAuCnD,SAAW4H,QAAS,SAACnI,GAAC,OAAKoI,8CAAaC,KAAKrI,EAAEuE,SAAS+D,OAAQ,SAACtI,GAAC,OAAKoI,8CAAaG,KAAKvI,EAAEuE,SAASiE,YAAA,EAASC,WAAU,6CAA+ClI,SAAWmI,UAAU,SAASC,SAAU5G,MAAMsC,wCACpbnC,6CAAA+E,cAACmB,8CAAY,CAAC1E,GAAI,6CAA+CnD,SAAUqI,MAAM,MAAMC,OAAO,SAAS3G,6CAAA+E,cAAA,OAAK3F,MAAO,CAAEwH,SAAU,MAAO,4DAAyD5G,6CAAA+E,cAAA,cAGzL/E,6CAAA+E,cAAA,OAAKC,UAAY,+CAAiD3G,UACxE2B,6CAAA+E,cAAC8B,uDAAQ,CAAClI,QAASkB,MAAMwD,2CAA4C7B,GAAI,gDAAkDnD,SAAW4H,QAAS,SAACnI,GAAC,OAAKoI,8CAAaC,KAAKrI,EAAEuE,SAAS+D,OAAQ,SAACtI,GAAC,OAAKoI,8CAAaG,KAAKvI,EAAEuE,SAASiE,YAAA,EAASC,WAAU,wDAA0DlI,SAAWmI,UAAU,kBAAkBC,SAAU5G,MAAM0D,mDACnWvD,6CAAA+E,cAACmB,8CAAY,CAAC1E,GAAI,wDAA0DnD,SAAUqI,MAAM,MAAMC,OAAO,SAAS3G,6CAAA+E,cAAA,OAAK3F,MAAO,CAAEwH,SAAU,MAAO,uSAAoS5G,6CAAA+E,cAAA,cAG/a/E,6CAAA+E,cAAA,OAAKC,UAAY,+CAAiD3G,UACxE2B,6CAAA+E,cAACa,uDAAS,CAAErQ,MAAOsK,MAAM6D,oCAAsClC,GAAI,yCAA2CnD,SAAW4H,QAAS,SAACnI,GAAC,OAAKoI,8CAAaC,KAAKrI,EAAEuE,SAAS+D,OAAQ,SAACtI,GAAC,OAAKoI,8CAAaG,KAAKvI,EAAEuE,SAASiE,YAAA,EAASC,WAAU,iDAAmDlI,SAAWmI,UAAU,WAAWC,SAAU5G,MAAM+D,4CACxU5D,6CAAA+E,cAACmB,8CAAY,CAAC1E,GAAI,iDAAmDnD,SAAUqI,MAAM,MAAMC,OAAO,SAAS3G,6CAAA+E,cAAA,OAAK3F,MAAO,CAAEwH,SAAU,MAAO,6PAA0P5G,6CAAA+E,cAAA,cAG9X/E,6CAAA+E,cAAA,OAAKC,UAAY,+CAAiD3G,UACxE2B,6CAAA+E,cAAC8B,uDAAQ,CAAClI,QAASkB,MAAMkE,yCAA0CvC,GAAI,8CAAgDnD,SAAW4H,QAAS,SAACnI,GAAC,OAAKoI,8CAAaC,KAAKrI,EAAEuE,SAAS+D,OAAQ,SAACtI,GAAC,OAAKoI,8CAAaG,KAAKvI,EAAEuE,SAASiE,YAAA,EAASC,WAAU,sDAAwDlI,SAAWmI,UAAU,gBAAgBC,SAAU5G,MAAMoE,iDAC3VjE,6CAAA+E,cAACmB,8CAAY,CAAC1E,GAAI,sDAAwDnD,SAAUqI,MAAM,MAAMC,OAAO,SAAS3G,6CAAA+E,cAAA,OAAK3F,MAAO,CAAEwH,SAAU,MAAO,0SAAuS5G,6CAAA+E,cAAA,cAGhb/E,6CAAA+E,cAAA,OAAKC,UAAY,+CAAiD3G,UACxE2B,6CAAA+E,cAACa,uDAAS,CAAErQ,MAAOsK,MAAMuE,mCAAqC5C,GAAI,wCAA0CnD,SAAW4H,QAAS,SAACnI,GAAC,OAAKoI,8CAAaC,KAAKrI,EAAEuE,SAAS+D,OAAQ,SAACtI,GAAC,OAAKoI,8CAAaG,KAAKvI,EAAEuE,SAASiE,YAAA,EAASC,WAAU,gDAAkDlI,SAAWmI,UAAU,UAAUC,SAAU5G,MAAMyE,2CACpUtE,6CAAA+E,cAACmB,8CAAY,CAAC1E,GAAI,gDAAkDnD,SAAUqI,MAAM,MAAMC,OAAO,SAAS3G,6CAAA+E,cAAA,OAAK3F,MAAO,CAAEwH,SAAU,MAAO,oCAAiC5G,6CAAA+E,cAAA,gBAKlK/E,6CAAA+E,cAAA,OAAKC,UAAY,+CAAiD3G,UAChE2B,6CAAA+E,cAAC+B,uDAAM,CAACC,QAAS,WAAQhI,YAAYV,SAAWC,WAAa,UAC7D0B,6CAAA+E,cAAC+B,uDAAM,CAACE,UAAYnH,MAAMoC,kCAAoCpC,MAAMiG,sCAAwCiB,QAAS,WAAQ5I,WAAWC,SAAUC,SAAWC,WAAa,UAGhL0B,6CAAA+E,cAACS,+CAAQ,CAACpG,MAAO,CAACqG,MAAM,OAAQL,SAAS,QAASM,MAAO,YAAcrH,UACrE2B,6CAAA+E,cAAA,OAAKC,UAAU,oBAAoB5F,MAAO,CAACuG,OAAO,OAAQP,SAAS,SACnEpF,6CAAA+E,cAAA,OAAKC,UAAY,+DAAiE3G,UAChF2B,6CAAA+E,cAAA,QAAMC,UAAU,kBAAiB,mCAAsChF,6CAAA+E,cAAA,WAAK,qBAAkB/E,6CAAA+E,cAAA,UAAI,kBAAmB/E,6CAAA+E,cAAA,YAEvH/E,6CAAA+E,cAAA,OAAKC,UAAW,iDAAmD3G,UACnE2B,6CAAA+E,cAAA,OAAKC,UAAY,+CAAiD3G,UAChF2B,6CAAA+E,cAAA,MAAIkC,SAAS,IAAKhB,QAAS,SAACnI,GAAC,OAAKoI,8CAAaC,KAAKrI,EAAEuE,SAAS+D,OAAQ,SAACtI,GAAC,OAAKoI,8CAAaG,KAAKvI,EAAEuE,SAASiE,YAAA,EAASC,WAAU,8CAAgDlI,UAAW,SAAU2B,6CAAA+E,cAAA,YAE3L/E,6CAAA+E,cAACmB,8CAAY,CAAC1E,GAAI,8CAAgDnD,SAAUqI,MAAM,MAAMC,OAAO,SAAS3G,6CAAA+E,cAAA,OAAK3F,MAAO,CAAEwH,SAAU,MAAO,0HAAuH5G,6CAAA+E,cAAA,aAExP/E,6CAAA+E,cAAA,OAAKvD,GAAI,2CAA6CnD,SAAUe,MAAO,CAAC8H,WAAW,OAAOC,aAAa,SACrGnH,6CAAA+E,cAAA,OAAKC,UAAW,+CAAiD3G,UAC/D2B,6CAAA+E,cAACqC,uDAAS,CAAC5F,GAAI,wCAA0CnD,SAAUgJ,YAAU,EACzEC,QAAS/H,2CACTgI,KAAM1I,wCAAwCC,iCAC9C0I,OAAQ,SAAAC,GAAA,IACNF,EAAIE,EAAJF,KACAD,EAAOG,EAAPH,QACAI,EAAcD,EAAdC,eAEAC,GADWF,EAAXG,YACaH,EAAbE,eACeF,EAAfI,gBACaJ,EAAbK,cACsBL,EAAtBM,uBAAsB,OAE1B/H,6CAAA+E,cAACiD,uDAAc,KACbhI,6CAAA+E,cAACkD,uDAAY,CAACC,aAAW,sBACvBlI,6CAAA+E,cAACoD,uDAAmB,KAClBnI,6CAAA+E,cAAC+B,uDAAM,CAACC,QAAS,WAAOtH,0CAA0CpB,SAAU,CAACmE,0CAA0C,IAAQG,iDAAgD,OAAY,SAG/L3C,6CAAA+E,cAACqD,wDAAKrT,OAAAsT,OAAA,CAACC,KAAK,UAAaX,KACvB3H,6CAAA+E,cAACwD,wDAAS,KACRvI,6CAAA+E,cAACyD,wDAAQ,KACNlB,EAAQmB,IAAI,SAAAjJ,GAAM,OACjBQ,6CAAA+E,cAAC2D,wDAAgBhB,EAAe,CAAElI,WAC/BA,EAAOA,UAGZQ,6CAAA+E,cAAC2D,wDAAW,KAAC,aAKjB1I,6CAAA+E,cAAC4D,wDAAS,KACPpB,EAAKkB,IAAI,SAAA3I,GAAG,OACXE,6CAAA+E,cAACyD,wDAAQ,CAACnT,IAAKyK,EAAI0B,IAChB1B,EAAI8I,MAAMH,IAAI,SAAAI,GAAI,OACjB7I,6CAAA+E,cAAC+D,wDAAS,CAACzT,IAAKwT,EAAKrH,IAAKqH,EAAKtT,SAEjCyK,6CAAA+E,cAAC+D,wDAAS,KACR9I,6CAAA+E,cAACgE,4CAAQ,CAACC,SAAUhJ,6CAAA+E,cAAA,aAClB/E,6CAAA+E,cAACrH,yCAAwC,CAACoC,IAAKA,EAAK1B,SAAUqC,4CAEhET,6CAAA+E,cAACgE,4CAAQ,CAACC,SAAUhJ,6CAAA+E,cAAA,aAClB/E,6CAAA+E,cAAC9G,kCAAiC,CAAE6G,KAAMjG,wCAAwCC,iCAAkCmK,QAASrE,YAAa9E,IAAKA,EAAK1B,SAAUqC,yCAA0CkE,SAAUA,SAAUuE,SAAS,EAAMxN,KAAM,mCAAoC2C,SAAUA,SAAW,OAAQ8K,eAAgB9K,SAC1VoE,6CAA8CA,6CAA8C3B,uCAAwCA,uCACpIiC,6CAA8CA,6CAC9CG,oDAAqDA,qEAe/ClD,6CAAA+E,cAAA,OAAKC,UAAY,+CAAiD3G,UAChE2B,6CAAA+E,cAAC+B,uDAAM,CAACC,QAAS,WAAQhI,YAAYV,SAAWC,WAAa,UAC7D0B,6CAAA+E,cAAC+B,uDAAM,CAACE,UAAYnH,MAAMoC,kCAAoCpC,MAAMiG,sCAAwCiB,QAAS,WAAQ5I,WAAWC,SAAUC,SAAWC,WAAa,WAI5K0B,6CAAA+E,cAACgE,4CAAQ,CAACC,SAAUhJ,6CAAA+E,cAAA,aAClB/E,6CAAA+E,cAAC/G,iCAAgC,CAACI,SAAUqC,yCAA0CnC,QAAS,WAAOgB,SAASjB,WAAaA,SAAUA,SAC9IoE,6CAA8CA,6CAA8C3B,uCAAwCA,uCACpIiC,6CAA8CA,6CAC9CG,oDAAqDA,uDAG/ClD,6CAAA+E,cAACgE,4CAAQ,CAACC,SAAUhJ,6CAAA+E,cAAA,aAClB/E,6CAAA+E,cAAC9G,kCAAiC,CAAEG,SAAUqC,yCAA0CkE,SAAUA,SAAUjJ,KAAM,mCAAoC2C,SAAUA,SAAW,OAAQ8K,eAAgB9K,SAC3MoE,6CAA8CA,6CAA8C3B,uCAAwCA,uCACpIiC,6CAA8CA,6CAC9CG,oDAAqDA,0DAQlDtD","file":"static/js/279.e93ce3cf.chunk.js","sourcesContent":["import React, { useCallback, useState, lazy, Suspense } from 'react';\nimport {\n  Button,\n  TextInput,\n  NumberInput,\n  Select,\n  SelectItem,\n  Checkbox,\n  DataTable,\n  TableRow,\n  TableHead,\n  TableHeader,\n  TableContainer,\n  TableCell,\n  Table,\n  TableBody,\n  TableToolbar,\n  TableToolbarContent,\n} from 'carbon-components-react';\n\nimport Collapsible from 'react-collapsible';\nimport { Tabs, Tab, TabPanel, TabList } from 'react-web-tabs';\nimport ReactTooltip from \"react-tooltip\";\n\nimport { safeLoad, getDivHeight, jsonToYaml, updateStyle, updateStyle2, validateField, toggleDescription } from '../../helpers';\n\n\nconst PoliciescontentInjectionpathsDeleteModal = lazy(() => import('./policiescontent_injectionpathsDeleteModal'));\nconst PoliciescontentInjectionpathsAdd = lazy(() => import('./policiescontent_injectionpathsAdd'));\nconst PoliciescontentInjectionpathsEdit = lazy(() => import('./policiescontent_injectionpathsEdit'));\n\n\n  const handleChange = () => {\n  };\n\n  const handleSave = (loadGrid, idPrefix, doClose) => {\n\n    if(idPrefix === undefined) idPrefix = \"\";\n\n    var json = {};\n      \n    if(document.getElementById(\"policies_content_injection_name_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"policies_content_injection_name\"] = document.getElementById(\"policies_content_injection_name_id\" + idPrefix).value;\n    }\n    json[\"policies_content_injection_full_line_match\"] = document.getElementById(\"policies_content_injection_full_line_match_id\" + idPrefix).checked.toString();\n    if(document.getElementById(\"policies_content_injection_location_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"policies_content_injection_location\"] = document.getElementById(\"policies_content_injection_location_id\" + idPrefix).value;\n    }\n    json[\"policies_content_injection_replace_match\"] = document.getElementById(\"policies_content_injection_replace_match_id\" + idPrefix).checked.toString();\n    if(document.getElementById(\"policies_content_injection_content_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"policies_content_injection_content\"] = document.getElementById(\"policies_content_injection_content_id\" + idPrefix).value;\n    }\n    json[\"policies_content_injection_paths\"] = policies_content_injection_pathsrowData.policies_content_injection_paths;\n      \n    loadGrid( json[\"policies_content_injection_name\"], json[\"policies_content_injection_full_line_match\"], json[\"policies_content_injection_location\"], json[\"policies_content_injection_replace_match\"], json[\"policies_content_injection_content\"], json[\"policies_content_injection_paths\"], true); \n\n    handleClose(idPrefix, doClose);\n  };\n\n  const handleAdd = (setpolicies_content_injection_paths, idPrefix, doAdd, doClose) => {\n    if(idPrefix === undefined) idPrefix = \"\";\n\n\n    document.getElementById(\"policies_content_injection_name_id\").value = \"\";\n    document.getElementById(\"policies_content_injection_full_line_match_id\").checked = false;\n    document.getElementById(\"policies_content_injection_location_id\").value = \"\";\n    document.getElementById(\"policies_content_injection_replace_match_id\").checked = false;\n    document.getElementById(\"policies_content_injection_content_id\").value = \"\";\n    policies_content_injection_pathsrowData.policies_content_injection_paths = []\n    setpolicies_content_injection_paths(policies_content_injection_pathsrowData.policies_content_injection_paths);\n\n\n    if(doAdd) {\n      doAdd();\n    }\n\n    handleClose(idPrefix,  doClose);\n  };\n\n  const handleClose = (idPrefix, doClose) => {\n    updateStyle(\"policies_div\" + idPrefix, \"display\", \"block\");\n    document.getElementById(\"addpolicies_content_injectionPage\" + idPrefix).style.display = \"none\";\n\n      if(doClose) {\n        doClose();\n      }\n  };\n\n  const closeAdd = (idPrefix) => {\n      if(idPrefix === undefined) idPrefix = \"\";\n\n      updateStyle(\"policies_content_injection_div\" + idPrefix, \"display\", \"block\");\n      document.getElementById(\"policies_content_injection_tab\" + idPrefix).style.display = \"flex\";\n\n  };\n\nconst policies_content_injection_pathsheaderData = [\n    {\n    header: 'Path',\n    key: 'paths',\n  },\n\n];\n\nconst policies_content_injection_pathsrowData = {policies_content_injection_paths: []};\n\nconst policies_content_injection_pathshandleAdd = (idPrefix, clearFields) => {\n    if(idPrefix === undefined) idPrefix = \"\";\n\n    // Set the fields to empty\n    if(clearFields) {\n      for(var i = 0; i < clearFields.length; i++) {\n        eval(clearFields[i]);\n      }\n    }\n\n    document.getElementById(\"policies_content_injection_paths_paths_id\" + idPrefix).value = \"\";\n    // Hide the tab page\n    updateStyle(\"policies_content_injection_div\" + idPrefix, \"display\", \"none\");\n    // Show the add page\n    document.getElementById(\"addpoliciescontent_injection_pathsPage\" + idPrefix).style.display = \"block\";\n    // Hide the remaining fields\n    document.getElementById(\"policies_content_injection_tab\" + idPrefix).style.display = \"none\";\n\n  };\n\nconst Policies_content_injectionAdd = (props) => {\n\n    var row = props.row;\n    const loadGrid = props.loadGrid;\n    const doClose = props.doClose;\n    const idPrefix = (props.idPrefix)?props.idPrefix:\"\";\n\n    const [policies_content_injection_paths, setpolicies_content_injection_paths] = React.useState([]);\n    const [fetchedpolicies_content_injection_paths, setFetchedpolicies_content_injection_paths] = React.useState(false);\n\n    React.useEffect(() => {\n      policies_content_injection_pathsloadGrid();\n    }, [fetchedpolicies_content_injection_paths]);\n\n    const policies_content_injection_pathsloadGrid = React.useCallback(async (policies_content_injection_paths_paths, add) => {\n      try {\n        var attrs = [];\n        if(policies_content_injection_paths_paths) {\n          if(add) {\n            for(var i = 0; i < policies_content_injection_pathsrowData.policies_content_injection_paths.length; i++) {\n              var tempId = ((policies_content_injection_pathsrowData.policies_content_injection_paths[i].paths)?policies_content_injection_pathsrowData.policies_content_injection_paths[i].paths:\"\") + \"\";\n              if((window.policies_content_injection_pathsediting != true && window.policies_content_injection_pathsediting != \"true\") || tempId != window.policies_content_injection_pathsrowId) {\n                attrs.push(policies_content_injection_pathsrowData.policies_content_injection_paths[i]);\n              }\n            }\n            var newId = ((policies_content_injection_paths_paths)?policies_content_injection_paths_paths:\"\") + \"\";\n            attrs.push({\n              id: newId,\n              paths: policies_content_injection_paths_paths,\n            });\n          } else {\n            // Must be a delete\n            for(var i = 0; i < policies_content_injection_pathsrowData.policies_content_injection_paths.length; i++) {\n              if(policies_content_injection_pathsrowData.policies_content_injection_paths[i].paths !== policies_content_injection_paths_paths ) {\n                attrs.push(policies_content_injection_pathsrowData.policies_content_injection_paths[i]);\n              }\n            }\n          }\n        } else {\n          attrs = policies_content_injection_pathsrowData.policies_content_injection_paths;\n        }\n        policies_content_injection_pathsrowData.policies_content_injection_paths = attrs;\n        const data = {policies_content_injection_paths: attrs};\n        setpolicies_content_injection_paths(data.policies_content_injection_paths);\n\n        if(policies_content_injection_paths_paths !== undefined && policies_content_injection_paths_paths !== null ) {\n            handleChange();\n\n        }\n\n      } catch (e) {\n        console.log(e);\n      }\n      return true;\n    });\n\n\n\n    const [policies_content_injection_name, setpolicies_content_injection_name] = useState(''),\n    updatepolicies_content_injection_name = useCallback((evt) => setpolicies_content_injection_name(evt.target.value), []);\n\n    const [policies_content_injection_paths_paths, setpolicies_content_injection_paths_paths] = useState(''),\n    updatepolicies_content_injection_paths_paths = useCallback((evt) => {\n      setpolicies_content_injection_paths_paths(evt.target.value);\n      var tempId = evt.target.value;\n      validateField(policies_content_injection_pathsrowData.policies_content_injection_paths, setpolicies_content_injection_paths_paths_valid, setpolicies_content_injection_paths_paths_invalid_text, \"Policies Content Injection Paths\", \"paths\", tempId);\n    }, []);\n\n    const [policies_content_injection_paths_paths_valid, setpolicies_content_injection_paths_paths_valid] = useState(true);\n    const [policies_content_injection_paths_paths_invalid_text, setpolicies_content_injection_paths_paths_invalid_text] = useState(\"\");\n\n\n    const [policies_content_injection_full_line_match, setpolicies_content_injection_full_line_match] = useState(true),\n    updatepolicies_content_injection_full_line_match = useCallback((evt) => setpolicies_content_injection_full_line_match(evt), []);\n\n    const [policies_content_injection_location, setpolicies_content_injection_location] = useState(''),\n    updatepolicies_content_injection_location = useCallback((evt) => setpolicies_content_injection_location(evt.target.value), []);\n\n    const [policies_content_injection_replace_match, setpolicies_content_injection_replace_match] = useState(false),\n    updatepolicies_content_injection_replace_match = useCallback((evt) => setpolicies_content_injection_replace_match(evt), []);\n\n    const [policies_content_injection_content, setpolicies_content_injection_content] = useState(''),\n    updatepolicies_content_injection_content = useCallback((evt) => setpolicies_content_injection_content(evt.target.value), []);\n\n\n    const [fetcheddata, setFetcheddata] = React.useState(false);\n    React.useEffect(() => {\n      dataLoad();\n    }, [fetcheddata]);\n    const dataLoad = () => {\n\n      for(var i = 0; i < policies_content_injection_pathsrowData.policies_content_injection_paths.length; i++) {\n        if(policies_content_injection_pathsrowData.policies_content_injection_paths[i].id === window.policies_content_injection_pathsrowId) {\n        setpolicies_content_injection_paths_paths((policies_content_injection_pathsrowData.policies_content_injection_paths[i] !== undefined && policies_content_injection_pathsrowData.policies_content_injection_paths[i].paths !== undefined )?policies_content_injection_pathsrowData.policies_content_injection_paths[i].paths:\"\");\n        }\n      }\n\n\n      return true;\n    };\n\n    const setDataMain = (functionName, data) => {\n      if(functionName && data) {\n        eval(functionName)(data);\n      }\n    };\n\n    return (\n      <div>\n        \n        <div id={'addpolicies_content_injectionPage' + idPrefix} style={{display:'none'}} className=\"bx--col bx--no-gutter\">\n\n          <Tabs id= {\"policies_content_injection_tab\" + idPrefix} defaultTab={\"General_tab\" + idPrefix} vertical className=\"vertical-tabs\" style={{overflow:'auto'}}>\n              <TabList>\n                <Tab tabFor={\"General_tab\" + idPrefix}>General</Tab>\n                <Tab tabFor={\"paths_tab\" + idPrefix}>Paths</Tab>\n              </TabList>\n              <TabPanel style={{width:'100%', overflow:'auto'}} tabId={\"General_tab\" + idPrefix}>\n                <div className=\"iag_sublevel_tabs\" style={{height:'60vh', overflow:'auto'}}>\n                <div className= {\"iag_form_elem iag_tab_heading policies_content_injection_div\" + idPrefix}>\n                  <span className=\"iag_breadcrumb\">Policies / Content Injection : </span><br/>                  <h2>General Settings</h2><hr/>\n                  Specifies the general settings associated with this component\n                </div>\n                <div className={\"iag--simple-div policies_content_injection_div\" + idPrefix}>\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n          <TextInput  invalid={!props.policies_content_injection_name_valid}  invalidText={props.policies_content_injection_name_invalid_text}  value={props.policies_content_injection_name}  id={\"policies_content_injection_name_id\" + idPrefix}  onFocus={(e) => ReactTooltip.show(e.target)} onBlur={(e) => ReactTooltip.hide(e.target)} data-tip data-for={\"policies_content_injection_name_tooltip_id\" + idPrefix}  labelText=\"Name *\" onChange={props.updatepolicies_content_injection_name}/>\n          <ReactTooltip id={\"policies_content_injection_name_tooltip_id\" + idPrefix} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>A name to be associated with this content injection rule.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n          <Checkbox checked={props.policies_content_injection_full_line_match} id={\"policies_content_injection_full_line_match_id\" + idPrefix}  onFocus={(e) => ReactTooltip.show(e.target)} onBlur={(e) => ReactTooltip.hide(e.target)} data-tip data-for={\"policies_content_injection_full_line_match_tooltip_id\" + idPrefix}  labelText=\"Full Line Match\" onChange={props.updatepolicies_content_injection_full_line_match}/>\n          <ReactTooltip id={\"policies_content_injection_full_line_match_tooltip_id\" + idPrefix} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>Should the location match a full line, or should it match any string in the response?  When a full line match is configured the content will be inserted prior to the matching line.  When a partial line match is configured the content will be inserted immediately prior to the matching string.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n          <TextInput  value={props.policies_content_injection_location}  id={\"policies_content_injection_location_id\" + idPrefix}  onFocus={(e) => ReactTooltip.show(e.target)} onBlur={(e) => ReactTooltip.hide(e.target)} data-tip data-for={\"policies_content_injection_location_tooltip_id\" + idPrefix}  labelText=\"Location\" onChange={props.updatepolicies_content_injection_location}/>\n          <ReactTooltip id={\"policies_content_injection_location_tooltip_id\" + idPrefix} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The location where the content should be injected. If a full line match is being used the location is pattern matched against a line in the response using the `*.` wildcard characters.  The maximum length of a line which can be matched is 8192 bytes.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n          <Checkbox checked={props.policies_content_injection_replace_match} id={\"policies_content_injection_replace_match_id\" + idPrefix}  onFocus={(e) => ReactTooltip.show(e.target)} onBlur={(e) => ReactTooltip.hide(e.target)} data-tip data-for={\"policies_content_injection_replace_match_tooltip_id\" + idPrefix}  labelText=\"Replace Match\" onChange={props.updatepolicies_content_injection_replace_match}/>\n          <ReactTooltip id={\"policies_content_injection_replace_match_tooltip_id\" + idPrefix} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>If a partial line match is being used this configuration entry will control whether the matching string is replaced with the supplied content, or whether the supplied content is inserted prior to the matching string.  This configuration entry will be ignored if full line matches are being used.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n          <TextInput  value={props.policies_content_injection_content}  id={\"policies_content_injection_content_id\" + idPrefix}  onFocus={(e) => ReactTooltip.show(e.target)} onBlur={(e) => ReactTooltip.hide(e.target)} data-tip data-for={\"policies_content_injection_content_tooltip_id\" + idPrefix}  labelText=\"Content\" onChange={props.updatepolicies_content_injection_content}/>\n          <ReactTooltip id={\"policies_content_injection_content_tooltip_id\" + idPrefix} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The data which is to be injected.<br/></div></ReactTooltip>\n        </div>\n\n                </div>\n                </div>\n                  <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n                    <Button onClick={() => { handleClose(idPrefix,  doClose); }}>Cancel</Button>\n                    <Button disabled={(!props.policies_content_injection_name || !props.policies_content_injection_name_valid)} onClick={() => { handleSave(loadGrid, idPrefix,  doClose); }}>Save</Button>\n                  </div>\n              </TabPanel>\n              <TabPanel style={{width:'100%', overflow:'auto'}} tabId={\"paths_tab\" + idPrefix}>\n                <div className=\"iag_sublevel_tabs\" style={{height:'60vh', overflow:'auto'}}>\n                <div className= {\"iag_form_elem iag_tab_heading policies_content_injection_div\" + idPrefix}>\n                  <span className=\"iag_breadcrumb\">Policies / Content Injection : </span><br/>                  <h2>Paths Settings</h2><hr/>\n                </div>\n                <div className={\"iag--simple-div policies_content_injection_div\" + idPrefix}>\n                <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n  <h3 tabIndex=\"0\"  onFocus={(e) => ReactTooltip.show(e.target)} onBlur={(e) => ReactTooltip.hide(e.target)} data-tip data-for={\"policies_content_injection_paths_tooltip_id\" + idPrefix} >Paths</h3><hr/>\n</div>\n          <ReactTooltip id={\"policies_content_injection_paths_tooltip_id\" + idPrefix} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The path for which content injection will take place. This entry is an array and can be used to specify multiple paths.<br/></div></ReactTooltip>\n\n                <div id={\"policies_content_injection_pathsTableDiv\" + idPrefix} style={{marginLeft:\"10px\",marginBottom:\"10px\"}}>\n                  <div className={\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n                    <DataTable id={\"policies_content_injection_pathsTable\" + idPrefix} isSortable\n                        headers={policies_content_injection_pathsheaderData}\n                        rows={policies_content_injection_pathsrowData.policies_content_injection_paths}\n                        render={({\n                          rows,\n                          headers,\n                          getHeaderProps,\n                          getRowProps,\n                          getTableProps,\n                          getToolbarProps,\n                          onInputChange,\n                          getTableContainerProps\n                    }) => (\n                      <TableContainer>\n                        <TableToolbar aria-label=\"data table toolbar\">\n                          <TableToolbarContent>\n                            <Button onClick={() => {policies_content_injection_pathshandleAdd(idPrefix, [setpolicies_content_injection_paths_paths(''),    setpolicies_content_injection_paths_paths_valid(true),]);}}>Add</Button>\n                          </TableToolbarContent>\n                        </TableToolbar>\n                        <Table size='normal' {...getTableProps()}>\n                          <TableHead>\n                            <TableRow>\n                              {headers.map(header => (\n                                <TableHeader {...getHeaderProps({ header })}>\n                                  {header.header}\n                                </TableHeader>\n                              ))}\n                              <TableHeader>\n                                  Actions\n                              </TableHeader>\n                            </TableRow>\n                          </TableHead>\n                          <TableBody>\n                            {rows.map(row => (\n                              <TableRow key={row.id}>\n                                {row.cells.map(cell => (\n                                  <TableCell key={cell.id}>{cell.value}</TableCell>\n                                ))}\n                                <TableCell>\n                                  <Suspense fallback={<div></div>}>\n                                    <PoliciescontentInjectionpathsDeleteModal row={row} loadGrid={policies_content_injection_pathsloadGrid} />\n                                  </Suspense>\n                                  <Suspense fallback={<div></div>}>\n                                    <PoliciescontentInjectionpathsEdit  data={policies_content_injection_pathsrowData.policies_content_injection_paths} setData={setDataMain} row={row} loadGrid={policies_content_injection_pathsloadGrid} dataLoad={dataLoad} editing={true} name={\"policies_content_injection_paths\"} idPrefix={idPrefix + \"_add\"} parentIdPrefix={idPrefix} \n            updatepolicies_content_injection_paths_paths={updatepolicies_content_injection_paths_paths} policies_content_injection_paths_paths={policies_content_injection_paths_paths}\n            policies_content_injection_paths_paths_valid={policies_content_injection_paths_paths_valid}\n            policies_content_injection_paths_paths_invalid_text={policies_content_injection_paths_paths_invalid_text}\n                                    />\n                                  </Suspense>\n                                </TableCell>\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </TableContainer>)}\n                    />\n                  </div>\n                </div>\n\n                </div>\n                </div>\n                  <div className= {\"iag_form_elem policies_content_injection_div\" + idPrefix}>\n                    <Button onClick={() => { handleClose(idPrefix,  doClose); }}>Cancel</Button>\n                    <Button disabled={(!props.policies_content_injection_name || !props.policies_content_injection_name_valid)} onClick={() => { handleSave(loadGrid, idPrefix,  doClose); }}>Save</Button>\n                  </div>\n              </TabPanel>\n          </Tabs>\n                  <Suspense fallback={<div></div>}>\n                    <PoliciescontentInjectionpathsAdd loadGrid={policies_content_injection_pathsloadGrid} doClose={() => {closeAdd(idPrefix);}} idPrefix={idPrefix} \n            updatepolicies_content_injection_paths_paths={updatepolicies_content_injection_paths_paths} policies_content_injection_paths_paths={policies_content_injection_paths_paths}\n            policies_content_injection_paths_paths_valid={policies_content_injection_paths_paths_valid}\n            policies_content_injection_paths_paths_invalid_text={policies_content_injection_paths_paths_invalid_text}\n                    />\n                  </Suspense>\n                  <Suspense fallback={<div></div>}>\n                    <PoliciescontentInjectionpathsEdit  loadGrid={policies_content_injection_pathsloadGrid} dataLoad={dataLoad} name={\"policies_content_injection_paths\"} idPrefix={idPrefix + \"_add\"} parentIdPrefix={idPrefix} \n            updatepolicies_content_injection_paths_paths={updatepolicies_content_injection_paths_paths} policies_content_injection_paths_paths={policies_content_injection_paths_paths}\n            policies_content_injection_paths_paths_valid={policies_content_injection_paths_paths_valid}\n            policies_content_injection_paths_paths_invalid_text={policies_content_injection_paths_paths_invalid_text}\n                    />\n                  </Suspense>\n        </div>\n        </div>\n    );\n}\n\nexport default Policies_content_injectionAdd;\n"],"sourceRoot":""}