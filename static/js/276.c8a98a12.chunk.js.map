{"version":3,"sources":["content/policiesPage/policiesauthorizationDeleteModal.js"],"names":["ModalStateManager","_ref","LauncherContent","renderLauncher","ModalContent","children","_useState","useState","_useState2","_slicedToArray","open","setOpen","React","createElement","Fragment","document","ReactDOM","createPortal","body","deleteProps","arguments","length","undefined","titleOnly","danger","selectorPrimaryFocus","_ref3","name","label","title","iconDescription","hasScrollingContent","aria-label","primaryButtonText","primaryButtonDisabled","secondaryButtonText","shouldCloseAfterSubmit","style","margin","icon","iconDelete","role","fill","fillRule","width","height","description","iconTitle","className","handleSubmit","policies_authorization_name","policies_authorization_host","policies_authorization_rule","policies_authorization_action","policies_authorization_obligation_oidc_acr_values","policies_authorization_obligation_oidc_prompt","policies_authorization_obligation_oidc_max_age","policies_authorization_obligation_redirect_url","loadGrid","PoliciesauthorizationDeleteModal","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","this","call","state","row","cells","value","_createClass","key","_this2","_deleteProps$composed","size","rest","_objectWithoutProperties","_deleteProps$modalBod","_ref4","Icon","Object","assign","onClick","id","_ref5","ComposedModal","onClose","ModalHeader","code","model","ModalBody","ModalFooter","onRequestSubmit","Component"],"mappings":"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","file":"static/js/276.c8a98a12.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  TextInput,\n  NumberInput,\n  ComposedModal,\n  ModalBody,\n  ModalHeader,\n  ModalFooter,\n  Button,\n  Icon\n} from  'carbon-components-react';\nimport { \n  iconDelete, iconDeleteSolid, iconDeleteOutline, \n} from 'carbon-icons';\n\n// This defines a modal controlled by a launcher button. We have one per DataTable row.\nconst ModalStateManager = ({\n  renderLauncher: LauncherContent,\n  children: ModalContent,\n}) => {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      {!ModalContent || typeof document === 'undefined'\n        ? null\n        : ReactDOM.createPortal(\n            <ModalContent  \n              open={open} \n              setOpen={setOpen} \n            />,\n            document.body\n          )\n      }\n      {LauncherContent && \n      <LauncherContent \n        open={open} \n        setOpen={setOpen} \n      />\n      }\n    </>\n  );\n};\n\n// Modal properties\nconst deleteProps = {\n  composedModal: ({ titleOnly } = {}) => ({\n    open: true,\n    danger: true,\n    selectorPrimaryFocus: '[data-modal-primary-focus]',\n  }),\n  modalHeader: ({ titleOnly, name } = {}) => ({\n    label: 'Authorization',\n    title: 'Delete Authorization?',\n    iconDescription: 'Close',\n  }),\n  modalBody: () => ({\n    hasScrollingContent: false,\n    'aria-label': 'Delete Authorization?',\n  }),\n  modalFooter: () => ({\n    primaryButtonText: 'Delete',\n    primaryButtonDisabled: false,\n    secondaryButtonText: 'Cancel',\n    shouldCloseAfterSubmit: true,\n    danger: true,\n  }),\n  menuItem: () => ({\n    closeMenu: (event) => { handleSubmit(event); }\n  }),\n  deleteIcon: () => ({\n    style: {\n      margin: '5px',\n    },\n    icon: iconDelete,\n    name: iconDelete,\n    role: 'img',\n    fill: 'grey',\n    fillRule: '',\n    width: '',\n    height: '',\n    description: 'This is a description of the icon and what it does in context',\n    iconTitle: '',\n    className: 'extra-class',\n  }),\n};\n\n// On submit we should be passed the values, not have to look them up\nconst handleSubmit = (policies_authorization_name, policies_authorization_host, policies_authorization_rule, policies_authorization_action, policies_authorization_obligation_oidc_acr_values, policies_authorization_obligation_oidc_prompt, policies_authorization_obligation_oidc_max_age, policies_authorization_obligation_redirect_url,  loadGrid, setOpen) => {\n \n  // Refresh data\n  loadGrid(policies_authorization_name, policies_authorization_host, policies_authorization_rule, policies_authorization_action, policies_authorization_obligation_oidc_acr_values, policies_authorization_obligation_oidc_prompt, policies_authorization_obligation_oidc_max_age, policies_authorization_obligation_redirect_url,  false);\n\n  return true;\n}\n\n// The implementation of the Modal\nclass PoliciesauthorizationDeleteModal extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      row: props.row,\n      loadGrid: props.loadGrid,\n      policies_authorization_name: this.props.row.cells[0].value,\n      policies_authorization_host: this.props.row.cells[1].value,\n      policies_authorization_rule: this.props.row.cells[2].value,\n      policies_authorization_action: this.props.row.cells[3].value,\n      open: false,\n    }\n  }\n\n  render() {\n    // const { open } = this.state.open;\n    const { size, ...rest } = deleteProps.composedModal();\n    const { hasScrollingContent, ...bodyProps } = deleteProps.modalBody();\n\n    return (\n      <ModalStateManager\n        renderLauncher={({ setOpen }) => (\n          <Icon {...deleteProps.deleteIcon()} onClick={() => setOpen(true)} title={this.state.id} />\n        )}>\n        {({ open, setOpen }) => (\n          <ComposedModal\n            {...rest}\n            open={open}\n            row={this.props.row}\n            loadGrid={this.state.loadGrid}\n            size={size || undefined}\n            onClose={() => setOpen(false)}>\n            <ModalHeader {...deleteProps.modalHeader({ titleOnly: true, name: this.state.code + ' ' + this.state.model })} />\n            <ModalBody />\n            <ModalFooter {...deleteProps.modalFooter()} shouldCloseAfterSubmit={true} onRequestSubmit={() => { handleSubmit(this.state.policies_authorization_name,this.state.policies_authorization_host,this.state.policies_authorization_rule,this.state.policies_authorization_action,this.state.policies_authorization_obligation_oidc_acr_values,this.state.policies_authorization_obligation_oidc_prompt,this.state.policies_authorization_obligation_oidc_max_age,this.state.policies_authorization_obligation_redirect_url, this.state.loadGrid, setOpen); }} />\n          </ComposedModal>\n        )}\n      </ModalStateManager>\n    );\n  }\n\n  \n}\n\nexport default PoliciesauthorizationDeleteModal;\n"],"sourceRoot":""}