{"version":3,"file":"static/js/4351.982881ae.chunk.js","mappings":"2NAiBA,MAAMA,EAAoBC,IAGnB,IAFLC,eAAgBC,EAChBC,SAAUC,GACXJ,EACC,MAAOK,EAAMC,IAAWC,EAAAA,EAAAA,WAAS,GACjC,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAN,SAAA,CACIC,GAAoC,qBAAbM,SAErBC,EAAAA,cACEC,EAAAA,EAAAA,KAACR,EAAY,CACXC,KAAMA,EACNC,QAASA,IAEXI,SAASG,MANX,KASHX,IACDU,EAAAA,EAAAA,KAACV,EAAe,CACdG,KAAMA,EACNC,QAASA,MAGV,EAKDQ,EACW,eAAC,UAAEC,GAAWC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MAAM,CACtCX,MAAM,EACNc,QAAQ,EACRC,qBAAsB,6BACvB,EALGN,EAMS,eAAC,UAAEC,EAAS,KAAEM,GAAML,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MAAM,CAC1CM,MAAO,iBACPC,MAAO,yBACPC,gBAAiB,QAClB,EAVGV,EAWOW,KAAA,CACTC,qBAAqB,EACrB,aAAc,2BAbZZ,EAeSa,KAAA,CACXC,kBAAmB,SACnBC,uBAAuB,EACvBC,oBAAqB,SACrBC,wBAAwB,EACxBZ,QAAQ,IApBNL,EAyBQkB,KAAA,CACVC,MAAO,CACLC,OAAQ,OAEVC,KAAMC,EAAAA,GACNf,KAAMe,EAAAA,GACNC,KAAM,MACNC,KAAM,OACNC,SAAU,GACVC,MAAO,GACPC,OAAQ,GACRC,YAAa,gEACbC,UAAW,GACXC,UAAW,gBAKTC,EAAeA,CAACC,EAA8CC,EAAUzC,KAG5EyC,EAASD,GAA8C,IAEhD,GAIT,MAAME,UAA8CC,EAAAA,UAElDC,WAAAA,CAAYC,GACVC,MAAMD,GAENE,KAAKC,MAAQ,CACXC,IAAKJ,EAAMI,IACXR,SAAUI,EAAMJ,SAChBD,4CAA6CO,KAAKF,MAAMI,IAAIC,MAAM,GAAGC,MACrEpD,MAAM,EAEV,CAEAqD,MAAAA,GAEE,MAAM,KAAEC,KAASC,GAAS9C,KACpB,oBAAEY,KAAwBmC,GAAc/C,IAE9C,OACEF,EAAAA,EAAAA,KAACb,EAAiB,CAChBE,eAAgB6D,IAAA,IAAC,QAAExD,GAASwD,EAAA,OAC1BlD,EAAAA,EAAAA,KAACmD,EAAAA,GAAI,IAAKjD,IAA0BkD,QAASA,IAAM1D,GAAQ,GAAOiB,MAAO8B,KAAKC,MAAMW,IAAM,EAC1F9D,SACD+D,IAAA,IAAC,KAAE7D,EAAI,QAAEC,GAAS4D,EAAA,OACjB1D,EAAAA,EAAAA,MAAC2D,EAAAA,GAAa,IACRP,EACJvD,KAAMA,EACNkD,IAAKF,KAAKF,MAAMI,IAChBR,SAAUM,KAAKC,MAAMP,SACrBY,KAAMA,QAAQzC,EACdkD,QAASA,IAAM9D,GAAQ,GAAOH,SAAA,EAC9BS,EAAAA,EAAAA,KAACyD,EAAAA,GAAW,IAAKvD,EAAwB,CAAEC,WAAW,EAAMM,KAAMgC,KAAKC,MAAMgB,KAAO,IAAMjB,KAAKC,MAAMiB,WACrG3D,EAAAA,EAAAA,KAAC4D,EAAAA,GAAS,KACV5D,EAAAA,EAAAA,KAAC6D,EAAAA,GAAW,IAAK3D,IAA2BiB,wBAAwB,EAAM2C,gBAAiBA,KAAQ7B,EAAaQ,KAAKC,MAAMR,4CAA6CO,KAAKC,MAAMP,SAAUzC,EAAQ,MACvL,GAIxB,EAKF,S","sources":["content/identityPage/identityoidcid_token_attrsDeleteModal.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  TextInput,\n  NumberInput,\n  ComposedModal,\n  ModalBody,\n  ModalHeader,\n  ModalFooter,\n  Button,\n  Icon\n} from  'carbon-components-react';\nimport { \n  iconDelete, iconDeleteSolid, iconDeleteOutline, \n} from 'carbon-icons';\n\n// This defines a modal controlled by a launcher button. We have one per DataTable row.\nconst ModalStateManager = ({\n  renderLauncher: LauncherContent,\n  children: ModalContent,\n}) => {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      {!ModalContent || typeof document === 'undefined'\n        ? null\n        : ReactDOM.createPortal(\n            <ModalContent  \n              open={open} \n              setOpen={setOpen} \n            />,\n            document.body\n          )\n      }\n      {LauncherContent && \n      <LauncherContent \n        open={open} \n        setOpen={setOpen} \n      />\n      }\n    </>\n  );\n};\n\n// Modal properties\nconst deleteProps = {\n  composedModal: ({ titleOnly } = {}) => ({\n    open: true,\n    danger: true,\n    selectorPrimaryFocus: '[data-modal-primary-focus]',\n  }),\n  modalHeader: ({ titleOnly, name } = {}) => ({\n    label: 'Id Token Attrs',\n    title: 'Delete Id Token Attrs?',\n    iconDescription: 'Close',\n  }),\n  modalBody: () => ({\n    hasScrollingContent: false,\n    'aria-label': 'Delete Id Token Attrs?',\n  }),\n  modalFooter: () => ({\n    primaryButtonText: 'Delete',\n    primaryButtonDisabled: false,\n    secondaryButtonText: 'Cancel',\n    shouldCloseAfterSubmit: true,\n    danger: true,\n  }),\n  menuItem: () => ({\n    closeMenu: (event) => { handleSubmit(event); }\n  }),\n  deleteIcon: () => ({\n    style: {\n      margin: '5px',\n    },\n    icon: iconDelete,\n    name: iconDelete,\n    role: 'img',\n    fill: 'grey',\n    fillRule: '',\n    width: '',\n    height: '',\n    description: 'This is a description of the icon and what it does in context',\n    iconTitle: '',\n    className: 'extra-class',\n  }),\n};\n\n// On submit we should be passed the values, not have to look them up\nconst handleSubmit = (identity_oidc_id_token_attrs_id_token_attrs,  loadGrid, setOpen) => {\n \n  // Refresh data\n  loadGrid(identity_oidc_id_token_attrs_id_token_attrs,  false);\n\n  return true;\n}\n\n// The implementation of the Modal\nclass Identityoidcid_token_attrsDeleteModal extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      row: props.row,\n      loadGrid: props.loadGrid,\n      identity_oidc_id_token_attrs_id_token_attrs: this.props.row.cells[0].value,\n      open: false,\n    }\n  }\n\n  render() {\n    // const { open } = this.state.open;\n    const { size, ...rest } = deleteProps.composedModal();\n    const { hasScrollingContent, ...bodyProps } = deleteProps.modalBody();\n\n    return (\n      <ModalStateManager\n        renderLauncher={({ setOpen }) => (\n          <Icon {...deleteProps.deleteIcon()} onClick={() => setOpen(true)} title={this.state.id} />\n        )}>\n        {({ open, setOpen }) => (\n          <ComposedModal\n            {...rest}\n            open={open}\n            row={this.props.row}\n            loadGrid={this.state.loadGrid}\n            size={size || undefined}\n            onClose={() => setOpen(false)}>\n            <ModalHeader {...deleteProps.modalHeader({ titleOnly: true, name: this.state.code + ' ' + this.state.model })} />\n            <ModalBody />\n            <ModalFooter {...deleteProps.modalFooter()} shouldCloseAfterSubmit={true} onRequestSubmit={() => { handleSubmit(this.state.identity_oidc_id_token_attrs_id_token_attrs, this.state.loadGrid, setOpen); }} />\n          </ComposedModal>\n        )}\n      </ModalStateManager>\n    );\n  }\n\n  \n}\n\nexport default Identityoidcid_token_attrsDeleteModal;\n"],"names":["ModalStateManager","_ref","renderLauncher","LauncherContent","children","ModalContent","open","setOpen","useState","_jsxs","_Fragment","document","ReactDOM","_jsx","body","deleteProps","titleOnly","arguments","length","undefined","danger","selectorPrimaryFocus","name","label","title","iconDescription","modalBody","hasScrollingContent","modalFooter","primaryButtonText","primaryButtonDisabled","secondaryButtonText","shouldCloseAfterSubmit","deleteIcon","style","margin","icon","iconDelete","role","fill","fillRule","width","height","description","iconTitle","className","handleSubmit","identity_oidc_id_token_attrs_id_token_attrs","loadGrid","Identityoidcid_token_attrsDeleteModal","React","constructor","props","super","this","state","row","cells","value","render","size","rest","bodyProps","_ref2","Icon","onClick","id","_ref3","ComposedModal","onClose","ModalHeader","code","model","ModalBody","ModalFooter","onRequestSubmit"],"sourceRoot":""}