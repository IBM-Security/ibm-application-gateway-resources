{"version":3,"file":"static/js/3124.1c820dee.chunk.js","mappings":"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","sources":["content/servicesPage/servicescredentialAdd.js"],"sourcesContent":["import React, { useCallback, useState, lazy, Suspense } from 'react';\nimport {\n  Button,\n  TextInput,\n  NumberInput,\n  Select,\n  SelectItem,\n  Checkbox,\n  DataTable,\n  TableRow,\n  TableHead,\n  TableHeader,\n  TableContainer,\n  TableCell,\n  Table,\n  TableBody,\n  TableToolbar,\n  TableToolbarContent,\n} from 'carbon-components-react';\n\nimport Collapsible from 'react-collapsible';\nimport { Tabs, Tab, TabPanel, TabList } from 'react-web-tabs';\nimport { Tooltip as ReactTooltip } from \"react-tooltip\";\n\nimport { safeLoad, getDivHeight, jsonToYaml, updateStyle, updateStyle2, validateField, toggleDescription } from '../../helpers';\n\n\nconst ServicescredentialsslcertificateDeleteModal = lazy(() => import('./servicescredentialsslcertificateDeleteModal'));\nconst ServicescredentialsslcertificateAdd = lazy(() => import('./servicescredentialsslcertificateAdd'));\nconst ServicescredentialsslcertificateEdit = lazy(() => import('./servicescredentialsslcertificateEdit'));\n\n\n  const handleChange = () => {\n  };\n\n  const handleSave = (loadGrid, idPrefix, doClose) => {\n\n    if(idPrefix === undefined) idPrefix = \"\";\n\n    var json = {};\n      \n    if(document.getElementById(\"services_credential_authentication_access_token_token_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_authentication_access_token_token\"] = document.getElementById(\"services_credential_authentication_access_token_token_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_authentication_ba_password_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_authentication_ba_password\"] = document.getElementById(\"services_credential_authentication_ba_password_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_authentication_ba_username_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_authentication_ba_username\"] = document.getElementById(\"services_credential_authentication_ba_username_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_authentication_sso_client_id_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_authentication_sso_client_id\"] = document.getElementById(\"services_credential_authentication_sso_client_id_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_authentication_sso_client_secret_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_authentication_sso_client_secret\"] = document.getElementById(\"services_credential_authentication_sso_client_secret_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_authentication_sso_endpoint_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_authentication_sso_endpoint\"] = document.getElementById(\"services_credential_authentication_sso_endpoint_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_authentication_sso_payload_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_authentication_sso_payload\"] = document.getElementById(\"services_credential_authentication_sso_payload_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_enc_key_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_enc_key\"] = document.getElementById(\"services_credential_enc_key_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_host_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_host\"] = document.getElementById(\"services_credential_host_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_name_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_name\"] = document.getElementById(\"services_credential_name_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_port_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_port\"] = document.getElementById(\"services_credential_port_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_proxy_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_proxy\"] = document.getElementById(\"services_credential_proxy_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_ssl_server_dn_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_ssl_server_dn\"] = document.getElementById(\"services_credential_ssl_server_dn_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_ssl_sni_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_ssl_sni\"] = document.getElementById(\"services_credential_ssl_sni_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_url_pattern_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_url_pattern\"] = document.getElementById(\"services_credential_url_pattern_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_user_attribute_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_user_attribute\"] = document.getElementById(\"services_credential_user_attribute_id\" + idPrefix).value;\n    }\n    if(document.getElementById(\"services_credential_user_attribute_encoding_id\" + idPrefix).value.endsWith(\":\") !== true) {\n      json[\"services_credential_user_attribute_encoding\"] = document.getElementById(\"services_credential_user_attribute_encoding_id\" + idPrefix).value;\n    }\n    json[\"services_credential_ssl_certificate\"] = services_credential_ssl_certificaterowData.services_credential_ssl_certificate;\n      \n    loadGrid( json[\"services_credential_authentication_access_token_token\"], json[\"services_credential_authentication_ba_password\"], json[\"services_credential_authentication_ba_username\"], json[\"services_credential_authentication_sso_client_id\"], json[\"services_credential_authentication_sso_client_secret\"], json[\"services_credential_authentication_sso_endpoint\"], json[\"services_credential_authentication_sso_payload\"], json[\"services_credential_enc_key\"], json[\"services_credential_host\"], json[\"services_credential_name\"], json[\"services_credential_port\"], json[\"services_credential_proxy\"], json[\"services_credential_ssl_server_dn\"], json[\"services_credential_ssl_sni\"], json[\"services_credential_url_pattern\"], json[\"services_credential_user_attribute\"], json[\"services_credential_user_attribute_encoding\"], json[\"services_credential_ssl_certificate\"], true); \n\n    handleClose(idPrefix, doClose);\n  };\n\n  const handleAdd = (setservices_credential_ssl_certificate, idPrefix, doAdd, doClose) => {\n    if(idPrefix === undefined) idPrefix = \"\";\n\n\n    document.getElementById(\"services_credential_authentication_access_token_token_id\").value = \"\";\n    document.getElementById(\"services_credential_authentication_ba_password_id\").value = \"\";\n    document.getElementById(\"services_credential_authentication_ba_username_id\").value = \"\";\n    document.getElementById(\"services_credential_authentication_sso_client_id_id\").value = \"\";\n    document.getElementById(\"services_credential_authentication_sso_client_secret_id\").value = \"\";\n    document.getElementById(\"services_credential_authentication_sso_endpoint_id\").value = \"\";\n    document.getElementById(\"services_credential_authentication_sso_payload_id\").value = \"\";\n    document.getElementById(\"services_credential_enc_key_id\").value = \"\";\n    document.getElementById(\"services_credential_host_id\").value = \"\";\n    document.getElementById(\"services_credential_name_id\").value = \"\";\n    document.getElementById(\"services_credential_port_id\").value = \"\";\n    document.getElementById(\"services_credential_proxy_id\").value = \"\";\n    document.getElementById(\"services_credential_ssl_server_dn_id\").value = \"\";\n    document.getElementById(\"services_credential_ssl_sni_id\").value = \"\";\n    document.getElementById(\"services_credential_url_pattern_id\").value = \"\";\n    document.getElementById(\"services_credential_user_attribute_id\").value = \"\";\n    document.getElementById(\"services_credential_user_attribute_encoding_id\").value = \"\";\n    services_credential_ssl_certificaterowData.services_credential_ssl_certificate = []\n    setservices_credential_ssl_certificate(services_credential_ssl_certificaterowData.services_credential_ssl_certificate);\n\n\n    if(doAdd) {\n      doAdd();\n    }\n\n    handleClose(idPrefix,  doClose);\n  };\n\n  const handleClose = (idPrefix, doClose) => {\n    updateStyle(\"services_div\" + idPrefix, \"display\", \"block\");\n    document.getElementById(\"addservices_credentialPage\" + idPrefix).style.display = \"none\";\n\n      if(doClose) {\n        doClose();\n      }\n  };\n\n  const closeAdd = (idPrefix) => {\n      if(idPrefix === undefined) idPrefix = \"\";\n\n      updateStyle(\"services_credential_div\" + idPrefix, \"display\", \"block\");\n      document.getElementById(\"services_credential_tab\" + idPrefix).style.display = \"flex\";\n\n  };\n\nconst services_credential_ssl_certificateheaderData = [\n    {\n    header: 'Certificate',\n    key: 'certificate',\n  },\n\n];\n\nconst services_credential_ssl_certificaterowData = {services_credential_ssl_certificate: []};\n\nconst services_credential_ssl_certificatehandleAdd = (idPrefix, clearFields) => {\n    if(idPrefix === undefined) idPrefix = \"\";\n\n    // Set the fields to empty\n    if(clearFields) {\n      for(var i = 0; i < clearFields.length; i++) {\n        eval(clearFields[i]);\n      }\n    }\n\n    document.getElementById(\"services_credential_ssl_certificate_certificate_id\" + idPrefix).value = \"\";\n    // Hide the tab page\n    updateStyle(\"services_credential_div\" + idPrefix, \"display\", \"none\");\n    // Show the add page\n    document.getElementById(\"addservicescredentialssl_certificatePage\" + idPrefix).style.display = \"block\";\n    // Hide the remaining fields\n    document.getElementById(\"services_credential_tab\" + idPrefix).style.display = \"none\";\n\n  };\n\nconst Services_credentialAdd = (props) => {\n\n    var row = props.row;\n    const loadGrid = props.loadGrid;\n    const doClose = props.doClose;\n    const idPrefix = (props.idPrefix)?props.idPrefix:\"\";\n\n    const [services_credential_ssl_certificate, setservices_credential_ssl_certificate] = React.useState([]);\n    const [fetchedservices_credential_ssl_certificate, setFetchedservices_credential_ssl_certificate] = React.useState(false);\n\n    React.useEffect(() => {\n      services_credential_ssl_certificateloadGrid();\n    }, [fetchedservices_credential_ssl_certificate]);\n\n    const services_credential_ssl_certificateloadGrid = React.useCallback(async (services_credential_ssl_certificate_certificate, add) => {\n      try {\n        var attrs = [];\n        if(services_credential_ssl_certificate_certificate) {\n          if(add) {\n            for(var i = 0; i < services_credential_ssl_certificaterowData.services_credential_ssl_certificate.length; i++) {\n              var tempId = ((services_credential_ssl_certificaterowData.services_credential_ssl_certificate[i].certificate)?services_credential_ssl_certificaterowData.services_credential_ssl_certificate[i].certificate:\"\") + \"\";\n              if((window.services_credential_ssl_certificateediting != true && window.services_credential_ssl_certificateediting != \"true\") || tempId != window.services_credential_ssl_certificaterowId) {\n                attrs.push(services_credential_ssl_certificaterowData.services_credential_ssl_certificate[i]);\n              }\n            }\n            var newId = ((services_credential_ssl_certificate_certificate)?services_credential_ssl_certificate_certificate:\"\") + \"\";\n            attrs.push({\n              id: newId,\n              certificate: services_credential_ssl_certificate_certificate,\n            });\n          } else {\n            // Must be a delete\n            for(var i = 0; i < services_credential_ssl_certificaterowData.services_credential_ssl_certificate.length; i++) {\n              if(services_credential_ssl_certificaterowData.services_credential_ssl_certificate[i].certificate !== services_credential_ssl_certificate_certificate ) {\n                attrs.push(services_credential_ssl_certificaterowData.services_credential_ssl_certificate[i]);\n              }\n            }\n          }\n        } else {\n          attrs = services_credential_ssl_certificaterowData.services_credential_ssl_certificate;\n        }\n        services_credential_ssl_certificaterowData.services_credential_ssl_certificate = attrs;\n        const data = {services_credential_ssl_certificate: attrs};\n        setservices_credential_ssl_certificate(data.services_credential_ssl_certificate);\n\n        if(services_credential_ssl_certificate_certificate !== undefined && services_credential_ssl_certificate_certificate !== null ) {\n            handleChange();\n\n        }\n\n      } catch (e) {\n        console.log(e);\n      }\n      return true;\n    });\n\n\n\n    const [services_credential_authentication_access_token_token, setservices_credential_authentication_access_token_token] = useState(''),\n    updateservices_credential_authentication_access_token_token = useCallback((evt) => setservices_credential_authentication_access_token_token(evt.target.value), []);\n\n    const [services_credential_authentication_ba_password, setservices_credential_authentication_ba_password] = useState(''),\n    updateservices_credential_authentication_ba_password = useCallback((evt) => setservices_credential_authentication_ba_password(evt.target.value), []);\n\n    const [services_credential_authentication_ba_username, setservices_credential_authentication_ba_username] = useState(''),\n    updateservices_credential_authentication_ba_username = useCallback((evt) => setservices_credential_authentication_ba_username(evt.target.value), []);\n\n    const [services_credential_authentication_sso_client_id, setservices_credential_authentication_sso_client_id] = useState(''),\n    updateservices_credential_authentication_sso_client_id = useCallback((evt) => setservices_credential_authentication_sso_client_id(evt.target.value), []);\n\n    const [services_credential_authentication_sso_client_secret, setservices_credential_authentication_sso_client_secret] = useState(''),\n    updateservices_credential_authentication_sso_client_secret = useCallback((evt) => setservices_credential_authentication_sso_client_secret(evt.target.value), []);\n\n    const [services_credential_authentication_sso_endpoint, setservices_credential_authentication_sso_endpoint] = useState(''),\n    updateservices_credential_authentication_sso_endpoint = useCallback((evt) => setservices_credential_authentication_sso_endpoint(evt.target.value), []);\n\n    const [services_credential_authentication_sso_payload, setservices_credential_authentication_sso_payload] = useState('basic'),\n    updateservices_credential_authentication_sso_payload = useCallback((evt) => setservices_credential_authentication_sso_payload(evt.target.value), []);\n\n    const [services_credential_enc_key, setservices_credential_enc_key] = useState(''),\n    updateservices_credential_enc_key = useCallback((evt) => setservices_credential_enc_key(evt.target.value), []);\n\n    const [services_credential_host, setservices_credential_host] = useState(''),\n    updateservices_credential_host = useCallback((evt) => setservices_credential_host(evt.target.value), []);\n\n    const [services_credential_name, setservices_credential_name] = useState(''),\n    updateservices_credential_name = useCallback((evt) => setservices_credential_name(evt.target.value), []);\n\n    const [services_credential_port, setservices_credential_port] = useState(''),\n    updateservices_credential_port = useCallback((evt) => setservices_credential_port(evt.target.value), []);\n\n    const [services_credential_proxy, setservices_credential_proxy] = useState(''),\n    updateservices_credential_proxy = useCallback((evt) => setservices_credential_proxy(evt.target.value), []);\n\n    const [services_credential_ssl_certificate_certificate, setservices_credential_ssl_certificate_certificate] = useState(''),\n    updateservices_credential_ssl_certificate_certificate = useCallback((evt) => {\n      setservices_credential_ssl_certificate_certificate(evt.target.value);\n      var tempId = evt.target.value;\n      validateField(services_credential_ssl_certificaterowData.services_credential_ssl_certificate, setservices_credential_ssl_certificate_certificate_valid, setservices_credential_ssl_certificate_certificate_invalid_text, \"Services Credential Ssl Certificate\", \"certificate\", tempId);\n    }, []);\n\n    const [services_credential_ssl_certificate_certificate_valid, setservices_credential_ssl_certificate_certificate_valid] = useState(true);\n    const [services_credential_ssl_certificate_certificate_invalid_text, setservices_credential_ssl_certificate_certificate_invalid_text] = useState(\"\");\n\n\n    const [services_credential_ssl_server_dn, setservices_credential_ssl_server_dn] = useState(''),\n    updateservices_credential_ssl_server_dn = useCallback((evt) => setservices_credential_ssl_server_dn(evt.target.value), []);\n\n    const [services_credential_ssl_sni, setservices_credential_ssl_sni] = useState(''),\n    updateservices_credential_ssl_sni = useCallback((evt) => setservices_credential_ssl_sni(evt.target.value), []);\n\n    const [services_credential_url_pattern, setservices_credential_url_pattern] = useState(''),\n    updateservices_credential_url_pattern = useCallback((evt) => setservices_credential_url_pattern(evt.target.value), []);\n\n    const [services_credential_user_attribute, setservices_credential_user_attribute] = useState('AZN_PRINCIPAL_ID'),\n    updateservices_credential_user_attribute = useCallback((evt) => setservices_credential_user_attribute(evt.target.value), []);\n\n    const [services_credential_user_attribute_encoding, setservices_credential_user_attribute_encoding] = useState('url'),\n    updateservices_credential_user_attribute_encoding = useCallback((evt) => setservices_credential_user_attribute_encoding(evt.target.value), []);\n\n\n    const [fetcheddata, setFetcheddata] = React.useState(false);\n    React.useEffect(() => {\n      dataLoad();\n    }, [fetcheddata]);\n    const dataLoad = () => {\n\n      for(var i = 0; i < services_credential_ssl_certificaterowData.services_credential_ssl_certificate.length; i++) {\n        if(services_credential_ssl_certificaterowData.services_credential_ssl_certificate[i].id === window.services_credential_ssl_certificaterowId) {\n        setservices_credential_ssl_certificate_certificate((services_credential_ssl_certificaterowData.services_credential_ssl_certificate[i] !== undefined && services_credential_ssl_certificaterowData.services_credential_ssl_certificate[i].certificate !== undefined )?services_credential_ssl_certificaterowData.services_credential_ssl_certificate[i].certificate:\"\");\n        }\n      }\n\n\n      return true;\n    };\n\n    const setDataMain = (functionName, data) => {\n      if(functionName && data) {\n        eval(functionName)(data);\n      }\n    };\n\n    return (\n      <div>\n        \n        <div id={'addservices_credentialPage' + idPrefix} style={{display:'none'}} className=\"bx--col bx--no-gutter\">\n\n          <Tabs id= {\"services_credential_tab\" + idPrefix} defaultTab={\"General_tab\" + idPrefix} vertical className=\"vertical-tabs\" style={{overflow:'auto'}}>\n              <TabList>\n                <Tab tabFor={\"General_tab\" + idPrefix}>General</Tab>\n                <Tab tabFor={\"authentication_tab\" + idPrefix}>Authentication</Tab>\n                <Tab tabFor={\"ssl_tab\" + idPrefix}>SSL</Tab>\n              </TabList>\n              <TabPanel style={{width:'100%', overflow:'auto'}} tabId={\"authentication_tab\" + idPrefix}>\n                <div className=\"iag_sublevel_tabs\" style={{height:'60vh', overflow:'auto'}}>\n                <div className= {\"iag_form_elem iag_tab_heading services_credential_div\" + idPrefix}>\n                  <span className=\"iag_breadcrumb\">Services / Credential : </span><br/>                  <h2>Authentication Settings</h2><hr/>\n                  <Collapsible tabIndex=\"0\" trigger=\"Controls how IAG will authenticate itself when communicating with the credential service\">\n                    <p>Controls how IAG will authenticate itself when communicating with the credential service. Only one of the following may be used at any time.</p>\n                  </Collapsible>\n\n                </div>\n                <div className={\"iag--simple-div services_credential_div\" + idPrefix}>\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n  <h3>Authentication</h3><hr/>\n</div>\n                <div className=\"iag-wdgt-container\" style={{marginLeft:\"20px\",marginBottom:\"10px\"}}>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n  <h3>Access Token</h3><hr/>\n</div>\n                <div className=\"iag-wdgt-container\" style={{marginLeft:\"40px\",marginBottom:\"10px\"}}>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_authentication_access_token_token}  id={\"services_credential_authentication_access_token_token_id\" + idPrefix}  data-tooltip-id={\"services_credential_authentication_access_token_token_tooltip_id\" + idPrefix}  labelText=\"Token\" onChange={props.updateservices_credential_authentication_access_token_token}/>\n          <ReactTooltip id={\"services_credential_authentication_access_token_token_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The literal access token that will be passed as a bearer token.<br/>Alternatively, if surrounded by &#123;}, this field can name a credential attribute for which the value of will be used as a bearer token.<br/></div></ReactTooltip>\n        </div>\n\n                </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n  <h3>Basic Authentication</h3><hr/>\n</div>\n                <div className=\"iag-wdgt-container\" style={{marginLeft:\"40px\",marginBottom:\"10px\"}}>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_authentication_ba_password}  id={\"services_credential_authentication_ba_password_id\" + idPrefix}  data-tooltip-id={\"services_credential_authentication_ba_password_tooltip_id\" + idPrefix}  labelText=\"Password\" onChange={props.updateservices_credential_authentication_ba_password}/>\n          <ReactTooltip id={\"services_credential_authentication_ba_password_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The password to be used to perform basic authentication to the credential service.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_authentication_ba_username}  id={\"services_credential_authentication_ba_username_id\" + idPrefix}  data-tooltip-id={\"services_credential_authentication_ba_username_tooltip_id\" + idPrefix}  labelText=\"Username\" onChange={props.updateservices_credential_authentication_ba_username}/>\n          <ReactTooltip id={\"services_credential_authentication_ba_username_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The username to be used to perform basic authentication to the credential service.<br/></div></ReactTooltip>\n        </div>\n\n                </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n  <h3>SSO</h3><hr/>\n</div>\n                <div className=\"iag-wdgt-container\" style={{marginLeft:\"40px\",marginBottom:\"10px\"}}>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_authentication_sso_client_id}  id={\"services_credential_authentication_sso_client_id_id\" + idPrefix}  data-tooltip-id={\"services_credential_authentication_sso_client_id_tooltip_id\" + idPrefix}  labelText=\"Client ID\" onChange={props.updateservices_credential_authentication_sso_client_id}/>\n          <ReactTooltip id={\"services_credential_authentication_sso_client_id_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The client identifier to use during the OAuth client credential flow.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_authentication_sso_client_secret}  id={\"services_credential_authentication_sso_client_secret_id\" + idPrefix}  data-tooltip-id={\"services_credential_authentication_sso_client_secret_tooltip_id\" + idPrefix}  labelText=\"Client Secret\" onChange={props.updateservices_credential_authentication_sso_client_secret}/>\n          <ReactTooltip id={\"services_credential_authentication_sso_client_secret_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The client identifier to use during the OAuth client credential flow.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_authentication_sso_endpoint}  id={\"services_credential_authentication_sso_endpoint_id\" + idPrefix}  data-tooltip-id={\"services_credential_authentication_sso_endpoint_tooltip_id\" + idPrefix}  labelText=\"Endpoint\" onChange={props.updateservices_credential_authentication_sso_endpoint}/>\n          <ReactTooltip id={\"services_credential_authentication_sso_endpoint_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The endpoint which will be called to obtain an access token which is used in requests to the credential service.<br/>The endpoint should conform to the OAuth client credential flow (OAuth 2.0 RFC 6749, section 4.4).<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n                <Select\n                  value={props.services_credential_authentication_sso_payload}\n                   id={\"services_credential_authentication_sso_payload_id\" + idPrefix}\n data-tooltip-id={\"services_credential_authentication_sso_payload_tooltip_id\" + idPrefix}                   labelText=\"Payload\"\n                  onChange={props.updateservices_credential_authentication_sso_payload}>\n                  <SelectItem text=\"\" value=\"\" />\n                  <SelectItem text=\"basic\" value=\"basic\" />\n                  <SelectItem text=\"form\" value=\"form\" />\n                </Select>\n          <ReactTooltip id={\"services_credential_authentication_sso_payload_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>Specifies how the client id and secret will be posted to the authentication endpoint.<br/>  - If this value is `form`, the client id and secret will be included in forms POST data.<br/>  - If this value is `basic`, a basic authentication header will be constructed using the client id and secret.<br/></div></ReactTooltip>\n                </div>\n\n                </div>\n\n                </div>\n\n                </div>\n                </div>\n                  <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n                    <Button onClick={() => { handleClose(idPrefix,  doClose); }}>Cancel</Button>\n                    <Button disabled={(!props.services_credential_name || !props.services_credential_name_valid)} onClick={() => { handleSave(loadGrid, idPrefix,  doClose); }}>Save</Button>\n                  </div>\n              </TabPanel>\n              <TabPanel style={{width:'100%', overflow:'auto'}} tabId={\"General_tab\" + idPrefix}>\n                <div className=\"iag_sublevel_tabs\" style={{height:'60vh', overflow:'auto'}}>\n                <div className= {\"iag_form_elem iag_tab_heading services_credential_div\" + idPrefix}>\n                  <span className=\"iag_breadcrumb\">Services / Credential : </span><br/>                  <h2>General Settings</h2><hr/>\n                  Specifies the general settings associated with this component\n                </div>\n                <div className={\"iag--simple-div services_credential_div\" + idPrefix}>\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_enc_key}  id={\"services_credential_enc_key_id\" + idPrefix}  data-tooltip-id={\"services_credential_enc_key_tooltip_id\" + idPrefix}  labelText=\"Encryption Key\" onChange={props.updateservices_credential_enc_key}/>\n          <ReactTooltip id={\"services_credential_enc_key_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The key which will be used to encrypt and decrypt credential data. This key should be an RSA or ECDSA key for which the private and public parts are available.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_host}  id={\"services_credential_host_id\" + idPrefix}  data-tooltip-id={\"services_credential_host_tooltip_id\" + idPrefix}  labelText=\"Host\" onChange={props.updateservices_credential_host}/>\n          <ReactTooltip id={\"services_credential_host_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The hostname of the endpoint where the credentials will be retrieved from.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  invalid={!props.services_credential_name_valid}  invalidText={props.services_credential_name_invalid_text}  value={props.services_credential_name}  id={\"services_credential_name_id\" + idPrefix}  data-tooltip-id={\"services_credential_name_tooltip_id\" + idPrefix}  labelText=\"Name *\" onChange={props.updateservices_credential_name}/>\n          <ReactTooltip id={\"services_credential_name_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The name which is associated with this credential service.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_port}  id={\"services_credential_port_id\" + idPrefix}  data-tooltip-id={\"services_credential_port_tooltip_id\" + idPrefix}  labelText=\"Port\" onChange={props.updateservices_credential_port}/>\n          <ReactTooltip id={\"services_credential_port_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The port of the endpoint where the credentials will be retrieved from.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_proxy}  id={\"services_credential_proxy_id\" + idPrefix}  data-tooltip-id={\"services_credential_proxy_tooltip_id\" + idPrefix}  labelText=\"Proxy\" onChange={props.updateservices_credential_proxy}/>\n          <ReactTooltip id={\"services_credential_proxy_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The proxy server which will be used when connecting to the credential service. The configuration entry should be of the form: `&lt;server&gt;:&lt;port&gt;`<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_url_pattern}  id={\"services_credential_url_pattern_id\" + idPrefix}  data-tooltip-id={\"services_credential_url_pattern_tooltip_id\" + idPrefix}  labelText=\"URL Pattern\" onChange={props.updateservices_credential_url_pattern}/>\n          <ReactTooltip id={\"services_credential_url_pattern_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The path of the endpoint where the credentials will be retrieved from. This must contain the &#123;user} and &#123;resource} macros. When communicating with the credential service, IAG will substitute `&#123;resource}` for the resource name provided in the configuration which refers to this credential service.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_user_attribute}  id={\"services_credential_user_attribute_id\" + idPrefix}  data-tooltip-id={\"services_credential_user_attribute_tooltip_id\" + idPrefix}  labelText=\"User Attribute\" onChange={props.updateservices_credential_user_attribute}/>\n          <ReactTooltip id={\"services_credential_user_attribute_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The name of the credential attribute which is used to populate the &#123;user} macro in the URL used when communicating with the credential service.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n                <Select\n                  value={props.services_credential_user_attribute_encoding}\n                   id={\"services_credential_user_attribute_encoding_id\" + idPrefix}\n data-tooltip-id={\"services_credential_user_attribute_encoding_tooltip_id\" + idPrefix}                   labelText=\"User Attribute Encoding\"\n                  onChange={props.updateservices_credential_user_attribute_encoding}>\n                  <SelectItem text=\"\" value=\"\" />\n                  <SelectItem text=\"url\" value=\"url\" />\n                  <SelectItem text=\"base64url\" value=\"base64url\" />\n                </Select>\n          <ReactTooltip id={\"services_credential_user_attribute_encoding_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The type of encoding to perform on the user_attribute for inclusion in the URL to communicate with the credential service.<br/>  - If this value is `url`, the user attribute value will be URL Encoded.<br/>  - If this value is `base64url`, the user attribute value will be converted to lower case and Base64 Encoded for URL.<br/></div></ReactTooltip>\n                </div>\n\n                </div>\n                </div>\n                  <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n                    <Button onClick={() => { handleClose(idPrefix,  doClose); }}>Cancel</Button>\n                    <Button disabled={(!props.services_credential_name || !props.services_credential_name_valid)} onClick={() => { handleSave(loadGrid, idPrefix,  doClose); }}>Save</Button>\n                  </div>\n              </TabPanel>\n              <TabPanel style={{width:'100%', overflow:'auto'}} tabId={\"ssl_tab\" + idPrefix}>\n                <div className=\"iag_sublevel_tabs\" style={{height:'60vh', overflow:'auto'}}>\n                <div className= {\"iag_form_elem iag_tab_heading services_credential_div\" + idPrefix}>\n                  <span className=\"iag_breadcrumb\">Services / Credential : </span><br/>                  <h2>SSL Settings</h2><hr/>\n                  SSL settings for the credential service connection.\n                </div>\n                <div className={\"iag--simple-div services_credential_div\" + idPrefix}>\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n  <h3>SSL</h3><hr/>\n</div>\n                <div className=\"iag-wdgt-container\" style={{marginLeft:\"20px\",marginBottom:\"10px\"}}>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n  <h3 tabIndex=\"0\"  data-tooltip-id={\"services_credential_ssl_certificate_tooltip_id\" + idPrefix} >Certificate</h3><hr/>\n</div>\n          <ReactTooltip id={\"services_credential_ssl_certificate_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>PEM based personal certificate files which will be used when communicating with the resource server.  These certificate files should include the private key, a certificate signed with the private key, and the signer certificate or signer certificate chain (if required).<br/></div></ReactTooltip>\n\n                <div id={\"services_credential_ssl_certificateTableDiv\" + idPrefix} style={{marginLeft:\"10px\",marginBottom:\"10px\"}}>\n                  <div className={\"iag_form_elem services_credential_div\" + idPrefix}>\n                    <DataTable id={\"services_credential_ssl_certificateTable\" + idPrefix} isSortable\n                        headers={services_credential_ssl_certificateheaderData}\n                        rows={services_credential_ssl_certificaterowData.services_credential_ssl_certificate}\n                        render={({\n                          rows,\n                          headers,\n                          getHeaderProps,\n                          getRowProps,\n                          getTableProps,\n                          getToolbarProps,\n                          onInputChange,\n                          getTableContainerProps\n                    }) => (\n                      <TableContainer>\n                        <TableToolbar aria-label=\"data table toolbar\">\n                          <TableToolbarContent>\n                            <Button onClick={() => {services_credential_ssl_certificatehandleAdd(idPrefix, [setservices_credential_ssl_certificate_certificate(''),    setservices_credential_ssl_certificate_certificate_valid(true),]);}}>Add</Button>\n                          </TableToolbarContent>\n                        </TableToolbar>\n                        <Table size='normal' {...getTableProps()}>\n                          <TableHead>\n                            <TableRow>\n                              {headers.map(header => (\n                                <TableHeader {...getHeaderProps({ header })}>\n                                  {header.header}\n                                </TableHeader>\n                              ))}\n                              <TableHeader>\n                                  Actions\n                              </TableHeader>\n                            </TableRow>\n                          </TableHead>\n                          <TableBody>\n                            {rows.map(row => (\n                              <TableRow key={row.id}>\n                                {row.cells.map(cell => (\n                                  <TableCell key={cell.id}>{cell.value}</TableCell>\n                                ))}\n                                <TableCell>\n                                  <Suspense fallback={<div></div>}>\n                                    <ServicescredentialsslcertificateDeleteModal row={row} loadGrid={services_credential_ssl_certificateloadGrid} />\n                                  </Suspense>\n                                  <Suspense fallback={<div></div>}>\n                                    <ServicescredentialsslcertificateEdit  data={services_credential_ssl_certificaterowData.services_credential_ssl_certificate} setData={setDataMain} row={row} loadGrid={services_credential_ssl_certificateloadGrid} dataLoad={dataLoad} editing={true} name={\"services_credential_ssl_certificate\"} idPrefix={idPrefix + \"_add\"} parentIdPrefix={idPrefix} \n            updateservices_credential_ssl_certificate_certificate={updateservices_credential_ssl_certificate_certificate} services_credential_ssl_certificate_certificate={services_credential_ssl_certificate_certificate}\n            services_credential_ssl_certificate_certificate_valid={services_credential_ssl_certificate_certificate_valid}\n            services_credential_ssl_certificate_certificate_invalid_text={services_credential_ssl_certificate_certificate_invalid_text}\n                                    />\n                                  </Suspense>\n                                </TableCell>\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </TableContainer>)}\n                    />\n                  </div>\n                </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_ssl_server_dn}  id={\"services_credential_ssl_server_dn_id\" + idPrefix}  data-tooltip-id={\"services_credential_ssl_server_dn_tooltip_id\" + idPrefix}  labelText=\"Server DN\" onChange={props.updateservices_credential_ssl_server_dn}/>\n          <ReactTooltip id={\"services_credential_ssl_server_dn_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>Specifies the accepted DN of the certificate presented by the credential service. If this entry is empty, any DN will be accepted.<br/></div></ReactTooltip>\n        </div>\n\n                <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n          <TextInput  value={props.services_credential_ssl_sni}  id={\"services_credential_ssl_sni_id\" + idPrefix}  data-tooltip-id={\"services_credential_ssl_sni_tooltip_id\" + idPrefix}  labelText=\"SNI\" onChange={props.updateservices_credential_ssl_sni}/>\n          <ReactTooltip id={\"services_credential_ssl_sni_tooltip_id\" + idPrefix} clickable={true} place=\"top\" effect=\"solid\" ><div style={{ maxWidth: 300 }}>The server name (SNI) which will be indicated when establishing a connection to the credential service. If this entry is empty, no name will be indicated.<br/></div></ReactTooltip>\n        </div>\n\n                </div>\n\n                </div>\n                </div>\n                  <div className= {\"iag_form_elem services_credential_div\" + idPrefix}>\n                    <Button onClick={() => { handleClose(idPrefix,  doClose); }}>Cancel</Button>\n                    <Button disabled={(!props.services_credential_name || !props.services_credential_name_valid)} onClick={() => { handleSave(loadGrid, idPrefix,  doClose); }}>Save</Button>\n                  </div>\n              </TabPanel>\n          </Tabs>\n                  <Suspense fallback={<div></div>}>\n                    <ServicescredentialsslcertificateAdd loadGrid={services_credential_ssl_certificateloadGrid} doClose={() => {closeAdd(idPrefix);}} idPrefix={idPrefix} \n            updateservices_credential_ssl_certificate_certificate={updateservices_credential_ssl_certificate_certificate} services_credential_ssl_certificate_certificate={services_credential_ssl_certificate_certificate}\n            services_credential_ssl_certificate_certificate_valid={services_credential_ssl_certificate_certificate_valid}\n            services_credential_ssl_certificate_certificate_invalid_text={services_credential_ssl_certificate_certificate_invalid_text}\n                    />\n                  </Suspense>\n                  <Suspense fallback={<div></div>}>\n                    <ServicescredentialsslcertificateEdit  loadGrid={services_credential_ssl_certificateloadGrid} dataLoad={dataLoad} name={\"services_credential_ssl_certificate\"} idPrefix={idPrefix + \"_add\"} parentIdPrefix={idPrefix} \n            updateservices_credential_ssl_certificate_certificate={updateservices_credential_ssl_certificate_certificate} services_credential_ssl_certificate_certificate={services_credential_ssl_certificate_certificate}\n            services_credential_ssl_certificate_certificate_valid={services_credential_ssl_certificate_certificate_valid}\n            services_credential_ssl_certificate_certificate_invalid_text={services_credential_ssl_certificate_certificate_invalid_text}\n                    />\n                  </Suspense>\n        </div>\n        </div>\n    );\n}\n\nexport default Services_credentialAdd;\n"],"names":["ServicescredentialsslcertificateDeleteModal","lazy","ServicescredentialsslcertificateAdd","ServicescredentialsslcertificateEdit","handleChange","handleSave","loadGrid","idPrefix","doClose","undefined","json","document","getElementById","value","endsWith","services_credential_ssl_certificaterowData","services_credential_ssl_certificate","handleClose","handleAdd","setservices_credential_ssl_certificate","doAdd","updateStyle","style","display","closeAdd","services_credential_ssl_certificateheaderData","header","key","services_credential_ssl_certificatehandleAdd","clearFields","i","length","eval","Services_credentialAdd","props","row","React","fetchedservices_credential_ssl_certificate","setFetchedservices_credential_ssl_certificate","services_credential_ssl_certificateloadGrid","async","services_credential_ssl_certificate_certificate","add","attrs","tempId","certificate","window","services_credential_ssl_certificateediting","services_credential_ssl_certificaterowId","push","newId","id","e","console","log","services_credential_authentication_access_token_token","setservices_credential_authentication_access_token_token","useState","updateservices_credential_authentication_access_token_token","useCallback","evt","target","services_credential_authentication_ba_password","setservices_credential_authentication_ba_password","updateservices_credential_authentication_ba_password","services_credential_authentication_ba_username","setservices_credential_authentication_ba_username","updateservices_credential_authentication_ba_username","services_credential_authentication_sso_client_id","setservices_credential_authentication_sso_client_id","updateservices_credential_authentication_sso_client_id","services_credential_authentication_sso_client_secret","setservices_credential_authentication_sso_client_secret","updateservices_credential_authentication_sso_client_secret","services_credential_authentication_sso_endpoint","setservices_credential_authentication_sso_endpoint","updateservices_credential_authentication_sso_endpoint","services_credential_authentication_sso_payload","setservices_credential_authentication_sso_payload","updateservices_credential_authentication_sso_payload","services_credential_enc_key","setservices_credential_enc_key","updateservices_credential_enc_key","services_credential_host","setservices_credential_host","updateservices_credential_host","services_credential_name","setservices_credential_name","updateservices_credential_name","services_credential_port","setservices_credential_port","updateservices_credential_port","services_credential_proxy","setservices_credential_proxy","updateservices_credential_proxy","setservices_credential_ssl_certificate_certificate","updateservices_credential_ssl_certificate_certificate","validateField","setservices_credential_ssl_certificate_certificate_valid","setservices_credential_ssl_certificate_certificate_invalid_text","services_credential_ssl_certificate_certificate_valid","services_credential_ssl_certificate_certificate_invalid_text","services_credential_ssl_server_dn","setservices_credential_ssl_server_dn","updateservices_credential_ssl_server_dn","services_credential_ssl_sni","setservices_credential_ssl_sni","updateservices_credential_ssl_sni","services_credential_url_pattern","setservices_credential_url_pattern","updateservices_credential_url_pattern","services_credential_user_attribute","setservices_credential_user_attribute","updateservices_credential_user_attribute","services_credential_user_attribute_encoding","setservices_credential_user_attribute_encoding","updateservices_credential_user_attribute_encoding","fetcheddata","setFetcheddata","dataLoad","setDataMain","functionName","data","_jsx","children","_jsxs","className","Tabs","defaultTab","vertical","overflow","TabList","Tab","tabFor","TabPanel","width","tabId","height","Collapsible","tabIndex","trigger","marginLeft","marginBottom","TextInput","labelText","onChange","ReactTooltip","clickable","place","effect","maxWidth","Select","SelectItem","text","Button","onClick","disabled","services_credential_name_valid","invalid","invalidText","services_credential_name_invalid_text","DataTable","isSortable","headers","rows","render","_ref","getHeaderProps","getRowProps","getTableProps","getToolbarProps","onInputChange","getTableContainerProps","TableContainer","TableToolbar","TableToolbarContent","Table","_objectSpread","size","TableHead","TableRow","map","TableHeader","TableBody","cells","cell","TableCell","Suspense","fallback","setData","editing","name","parentIdPrefix"],"sourceRoot":""}